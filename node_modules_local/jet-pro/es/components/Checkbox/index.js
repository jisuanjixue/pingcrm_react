var _excluded = ['options', 'fieldNams'];
function _slicedToArray(arr, i) {
  return (
    _arrayWithHoles(arr) ||
    _iterableToArrayLimit(arr, i) ||
    _unsupportedIterableToArray(arr, i) ||
    _nonIterableRest()
  );
}
function _nonIterableRest() {
  throw new TypeError(
    'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
  );
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === 'string') return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === 'Object' && o.constructor) n = o.constructor.name;
  if (n === 'Map' || n === 'Set') return Array.from(o);
  if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  var _i =
    null == arr
      ? null
      : ('undefined' != typeof Symbol && arr[Symbol.iterator]) || arr['@@iterator'];
  if (null != _i) {
    var _s,
      _e,
      _x,
      _r,
      _arr = [],
      _n = !0,
      _d = !1;
    try {
      if (((_x = (_i = _i.call(arr)).next), 0 === i)) {
        if (Object(_i) !== _i) return;
        _n = !1;
      } else
        for (
          ;
          !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i);
          _n = !0
        );
    } catch (err) {
      (_d = !0), (_e = err);
    } finally {
      try {
        if (!_n && null != _i.return && ((_r = _i.return()), Object(_r) !== _r)) return;
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
import { useControllableValue } from 'ahooks';
import { Checkbox as ACheckbox } from 'antd';
import React, { useMemo } from 'react';
export default (function (_ref) {
  var options = _ref.options,
    _ref$fieldNams = _ref.fieldNams,
    fieldNams =
      _ref$fieldNams === void 0
        ? {
            label: 'text',
            value: 'value',
          }
        : _ref$fieldNams,
    props = _objectWithoutProperties(_ref, _excluded);
  var mode = useMemo(
    function () {
      return props.mode;
    },
    [props.mode],
  );
  var _useControllableValue = useControllableValue(props),
    _useControllableValue2 = _slicedToArray(_useControllableValue, 2),
    value = _useControllableValue2[0],
    setValue = _useControllableValue2[1];
  var checkedValue = useMemo(
    function () {
      var checkValue;
      if (mode === 'single') {
        checkValue = [];
        if (
          ![undefined, null].some(function (val) {
            return val === value;
          })
        ) {
          checkValue.push(value);
        }
      } else {
        checkValue = value;
      }
      return checkValue;
    },
    [mode, value],
  );
  var onChange = function onChange(values) {
    var val;
    if (mode === 'single') {
      var _ref2 =
        values.filter(function (v) {
          return !(
            checkedValue !== null &&
            checkedValue !== void 0 &&
            checkedValue.some(function (v1) {
              return v1 === v;
            })
          );
        }) || [];
      var _ref3 = _slicedToArray(_ref2, 1);
      val = _ref3[0];
    } else {
      val = values;
    }
    setValue(val);
  };
  return /*#__PURE__*/ React.createElement(ACheckbox.Group, {
    options:
      options === null || options === void 0
        ? void 0
        : options.map(function (item) {
            return {
              label: item[fieldNams.label],
              value: item[fieldNams.value],
            };
          }),
    value: checkedValue,
    onChange: onChange,
  });
});
