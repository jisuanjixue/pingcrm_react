var _excluded = ['value', 'onChange'],
  _excluded2 = ['value', 'onChange'];
function _extends() {
  _extends = Object.assign
    ? Object.assign.bind()
    : function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
  return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
import { DatePicker as ADatePicker } from 'antd';
import React from 'react';
import { convertToMoment } from '../../utils/dateUtils';
var DatePickerComponent = function DatePickerComponent(_ref) {
  var value = _ref.value,
    _onChange = _ref.onChange,
    props = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/ React.createElement(
    ADatePicker,
    _extends(
      {
        value: convertToMoment(value),
        onChange: function onChange(date, val) {
          return _onChange === null || _onChange === void 0 ? void 0 : _onChange(val, date);
        },
      },
      props,
    ),
  );
};
/**
 * DatePicker.RangePicker
 * 较基础组件变动：同DatePicker
 */
var RangePicker = function RangePicker(_ref2) {
  var _ref2$value = _ref2.value,
    value = _ref2$value === void 0 ? [null, null] : _ref2$value,
    _onChange2 = _ref2.onChange,
    props = _objectWithoutProperties(_ref2, _excluded2);
  return /*#__PURE__*/ React.createElement(
    ADatePicker.RangePicker,
    _extends(
      {
        value: [convertToMoment(value[0]) || null, convertToMoment(value[1]) || null],
        onChange: function onChange(date, val) {
          return _onChange2 === null || _onChange2 === void 0 ? void 0 : _onChange2(val, date);
        },
      },
      props,
    ),
  );
};
/**
 * DatePicker
 * 较基础组件变动：
 *  value增加对string的支持
 *  onChange中两个参数顺序调换
 */
var DatePicker = DatePickerComponent;
DatePicker.RangePicker = RangePicker;
export default DatePicker;
