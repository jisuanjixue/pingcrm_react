var _excluded = ['componentProps', 'required'];
function _extends() {
  _extends = Object.assign
    ? Object.assign.bind()
    : function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
  return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
import React from 'react';
import { DebounceInput } from '../../../';
import FormItem from './FormItem';
import { getFormItemRequired, getLabelText } from './utils';
export default (function (_ref) {
  var componentProps = _ref.componentProps,
    required = _ref.required,
    props = _objectWithoutProperties(_ref, _excluded);
  var tip = '\u8BF7\u8F93\u5165'.concat(getLabelText(props.label));
  return /*#__PURE__*/ React.createElement(
    FormItem,
    _extends({}, props, {
      required: getFormItemRequired(required, tip),
    }),
    /*#__PURE__*/ React.createElement(
      DebounceInput.Password,
      _extends(
        {
          placeholder: tip,
          allowClear: true,
        },
        componentProps,
      ),
    ),
  );
});
