function _typeof(obj) {
  '@babel/helpers - typeof';
  return (
    (_typeof =
      'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
        ? function (obj) {
            return typeof obj;
          }
        : function (obj) {
            return obj &&
              'function' == typeof Symbol &&
              obj.constructor === Symbol &&
              obj !== Symbol.prototype
              ? 'symbol'
              : typeof obj;
          }),
    _typeof(obj)
  );
}
var _excluded = ['refAction'];
function _extends() {
  _extends = Object.assign
    ? Object.assign.bind()
    : function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
  return _extends.apply(this, arguments);
}
function _toConsumableArray(arr) {
  return (
    _arrayWithoutHoles(arr) ||
    _iterableToArray(arr) ||
    _unsupportedIterableToArray(arr) ||
    _nonIterableSpread()
  );
}
function _nonIterableSpread() {
  throw new TypeError(
    'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
  );
}
function _iterableToArray(iter) {
  if (
    (typeof Symbol !== 'undefined' && iter[Symbol.iterator] != null) ||
    iter['@@iterator'] != null
  )
    return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly &&
      (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })),
      keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2
      ? ownKeys(Object(source), !0).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        })
      : Object.getOwnPropertyDescriptors
      ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))
      : ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true,
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, 'string');
  return _typeof(key) === 'symbol' ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== 'object' || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || 'default');
    if (_typeof(res) !== 'object') return res;
    throw new TypeError('@@toPrimitive must return a primitive value.');
  }
  return (hint === 'string' ? String : Number)(input);
}
function _slicedToArray(arr, i) {
  return (
    _arrayWithHoles(arr) ||
    _iterableToArrayLimit(arr, i) ||
    _unsupportedIterableToArray(arr, i) ||
    _nonIterableRest()
  );
}
function _nonIterableRest() {
  throw new TypeError(
    'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
  );
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === 'string') return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === 'Object' && o.constructor) n = o.constructor.name;
  if (n === 'Map' || n === 'Set') return Array.from(o);
  if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  var _i =
    null == arr
      ? null
      : ('undefined' != typeof Symbol && arr[Symbol.iterator]) || arr['@@iterator'];
  if (null != _i) {
    var _s,
      _e,
      _x,
      _r,
      _arr = [],
      _n = !0,
      _d = !1;
    try {
      if (((_x = (_i = _i.call(arr)).next), 0 === i)) {
        if (Object(_i) !== _i) return;
        _n = !1;
      } else
        for (
          ;
          !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i);
          _n = !0
        );
    } catch (err) {
      (_d = !0), (_e = err);
    } finally {
      try {
        if (!_n && null != _i.return && ((_r = _i.return()), Object(_r) !== _r)) return;
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
import { PlusOutlined } from '@ant-design/icons';
import { useSafeState } from 'ahooks';
import { Button, Space } from 'antd';
import React, { useRef } from 'react';
import { genColumnsKeyIfy } from '../ProTable/utils';
import QueryTable from '../QueryTable';
import EditForm from './EditForm';

/**
 * CRUD表格，基于QueryTable扩展增、改功能
 * @param props
 * @returns
 */
var CRUDTable = function CRUDTable(_ref) {
  var _props$toolbarProps,
    _props$toolbarProps2,
    _props$toolbarProps2$,
    _props$toolbarProps3,
    _props$toolbarProps4,
    _props$toolbarProps4$,
    _props$toolbarProps5,
    _props$editProps;
  var propsRefAction = _ref.refAction,
    props = _objectWithoutProperties(_ref, _excluded);
  var propsColumns = genColumnsKeyIfy(props.columns);
  var _useSafeState = useSafeState(),
    _useSafeState2 = _slicedToArray(_useSafeState, 2),
    editState = _useSafeState2[0],
    setEditState = _useSafeState2[1];
  var showEdit = function showEdit(data) {
    return setEditState({
      visible: true,
      detail: data,
    });
  };
  var hideEdit = function hideEdit() {
    return setEditState({
      visible: false,
    });
  };
  var _refAction = useRef();
  return /*#__PURE__*/ React.createElement(
    React.Fragment,
    null,
    /*#__PURE__*/ React.createElement(
      QueryTable,
      _objectSpread(
        _objectSpread({}, props),
        {},
        {
          refAction: function refAction(prevAction) {
            _refAction.current = prevAction;
            if (!propsRefAction) return;
            var action;
            if (_refAction.current)
              action = _objectSpread(
                _objectSpread({}, _refAction.current),
                {},
                {
                  showEdit: showEdit,
                  hideEdit: hideEdit,
                },
              );
            if (typeof propsRefAction === 'function') propsRefAction(action);
            // eslint-disable-next-line no-param-reassign
            else propsRefAction.current = action;
          },
          columns: _toConsumableArray(propsColumns),
          actionColumn: _objectSpread(
            _objectSpread({}, props.actionColumn),
            {},
            {
              preRender: function preRender(item, index) {
                var _props$actionColumn, _props$actionColumn$p;
                return /*#__PURE__*/ React.createElement(
                  React.Fragment,
                  null,
                  (_props$actionColumn = props.actionColumn) === null ||
                    _props$actionColumn === void 0
                    ? void 0
                    : (_props$actionColumn$p = _props$actionColumn.preRender) === null ||
                      _props$actionColumn$p === void 0
                    ? void 0
                    : _props$actionColumn$p.call(_props$actionColumn, item, index),
                  /*#__PURE__*/ React.createElement(
                    Button,
                    {
                      size: 'small',
                      type: 'link',
                      onClick: function onClick() {
                        return setEditState({
                          visible: true,
                          detail: item,
                        });
                      },
                    },
                    '\u7F16\u8F91',
                  ),
                );
              },
            },
          ),
          toolbarProps: _objectSpread(
            _objectSpread({}, props.toolbarProps),
            {},
            {
              hideActions:
                (_props$toolbarProps = props.toolbarProps) === null ||
                _props$toolbarProps === void 0
                  ? void 0
                  : _props$toolbarProps.hideActions,
              extra: /*#__PURE__*/ React.createElement(
                Space,
                null,
                !(
                  (_props$toolbarProps2 = props.toolbarProps) !== null &&
                  _props$toolbarProps2 !== void 0 &&
                  (_props$toolbarProps2$ = _props$toolbarProps2.hideActions) !== null &&
                  _props$toolbarProps2$ !== void 0 &&
                  _props$toolbarProps2$.some(function (a) {
                    return a === 'add';
                  })
                ) &&
                  /*#__PURE__*/ React.createElement(
                    Button,
                    _extends(
                      {
                        icon: /*#__PURE__*/ React.createElement(PlusOutlined, null),
                        type: 'primary',
                      },
                      (_props$toolbarProps3 = props.toolbarProps) === null ||
                        _props$toolbarProps3 === void 0
                        ? void 0
                        : _props$toolbarProps3.createButtonProps,
                      {
                        onClick: function onClick() {
                          return setEditState({
                            visible: true,
                          });
                        },
                      },
                    ),
                    ((_props$toolbarProps4 = props.toolbarProps) === null ||
                    _props$toolbarProps4 === void 0
                      ? void 0
                      : (_props$toolbarProps4$ = _props$toolbarProps4.createButtonProps) === null ||
                        _props$toolbarProps4$ === void 0
                      ? void 0
                      : _props$toolbarProps4$.children) || '新建',
                  ),
                (_props$toolbarProps5 = props.toolbarProps) === null ||
                  _props$toolbarProps5 === void 0
                  ? void 0
                  : _props$toolbarProps5.extra,
              ),
            },
          ),
        },
      ),
    ),
    !(
      (_props$editProps = props.editProps) !== null &&
      _props$editProps !== void 0 &&
      _props$editProps.disabled
    ) &&
      /*#__PURE__*/ React.createElement(
        EditForm,
        _objectSpread(
          _objectSpread({}, props),
          {},
          {
            columns: propsColumns,
            visible: editState === null || editState === void 0 ? void 0 : editState.visible,
            detail: editState === null || editState === void 0 ? void 0 : editState.detail,
            onSuccess: function onSuccess() {
              var _refAction$current, _refAction$current$re;
              (_refAction$current = _refAction.current) === null || _refAction$current === void 0
                ? void 0
                : (_refAction$current$re = _refAction$current.reload) === null ||
                  _refAction$current$re === void 0
                ? void 0
                : _refAction$current$re.call(_refAction$current);
            },
            onClose: function onClose() {
              return setEditState(undefined);
            },
          },
        ),
      ),
  );
};
export default CRUDTable;
