function _typeof(obj) {
  '@babel/helpers - typeof';
  return (
    (_typeof =
      'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
        ? function (obj) {
            return typeof obj;
          }
        : function (obj) {
            return obj &&
              'function' == typeof Symbol &&
              obj.constructor === Symbol &&
              obj !== Symbol.prototype
              ? 'symbol'
              : typeof obj;
          }),
    _typeof(obj)
  );
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly &&
      (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })),
      keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2
      ? ownKeys(Object(source), !0).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        })
      : Object.getOwnPropertyDescriptors
      ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))
      : ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true,
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, 'string');
  return _typeof(key) === 'symbol' ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== 'object' || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || 'default');
    if (_typeof(res) !== 'object') return res;
    throw new TypeError('@@toPrimitive must return a primitive value.');
  }
  return (hint === 'string' ? String : Number)(input);
}
function _slicedToArray(arr, i) {
  return (
    _arrayWithHoles(arr) ||
    _iterableToArrayLimit(arr, i) ||
    _unsupportedIterableToArray(arr, i) ||
    _nonIterableRest()
  );
}
function _nonIterableRest() {
  throw new TypeError(
    'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
  );
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === 'string') return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === 'Object' && o.constructor) n = o.constructor.name;
  if (n === 'Map' || n === 'Set') return Array.from(o);
  if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  var _i =
    null == arr
      ? null
      : ('undefined' != typeof Symbol && arr[Symbol.iterator]) || arr['@@iterator'];
  if (null != _i) {
    var _s,
      _e,
      _x,
      _r,
      _arr = [],
      _n = !0,
      _d = !1;
    try {
      if (((_x = (_i = _i.call(arr)).next), 0 === i)) {
        if (Object(_i) !== _i) return;
        _n = !1;
      } else
        for (
          ;
          !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i);
          _n = !0
        );
    } catch (err) {
      (_d = !0), (_e = err);
    } finally {
      try {
        if (!_n && null != _i.return && ((_r = _i.return()), Object(_r) !== _r)) return;
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
import { useSafeState } from 'ahooks';
import update from 'immutability-helper';
import React, { useCallback, useMemo } from 'react';
import DndItem from './DndItem';
export default (function (_ref) {
  var fixedType = _ref.fixedType,
    columnConfigs = _ref.columnConfigs,
    _ref$columns = _ref.columns,
    columns = _ref$columns === void 0 ? [] : _ref$columns,
    onToggleKeyHide = _ref.onToggleKeyHide,
    onColumnFixed = _ref.onColumnFixed,
    onKeysOrder = _ref.onKeysOrder;
  var _useSafeState = useSafeState(),
    _useSafeState2 = _slicedToArray(_useSafeState, 2),
    currentHoverIndex = _useSafeState2[0],
    setCurrentHoverIndex = _useSafeState2[1];
  var hiddenKeys = useMemo(
    function () {
      return columnConfigs
        .filter(function (cfg) {
          return cfg.hide && !!cfg.key;
        })
        .map(function (cfg) {
          return cfg.key;
        });
    },
    [columnConfigs],
  );
  var keysFixed = useMemo(
    function () {
      return columnConfigs
        .filter(function (cfg) {
          return cfg.fixed === fixedType && cfg.key;
        })
        .map(function (cfg) {
          return cfg.key;
        });
    },
    [columnConfigs, fixedType],
  );
  var columnsFixed = useMemo(
    function () {
      return keysFixed
        .map(function (key) {
          var column = columns.find(function (col) {
            return col.key === key;
          });
          if (column)
            return _objectSpread(
              _objectSpread({}, column),
              {},
              {
                fixed: fixedType,
              },
            );
          return undefined;
        })
        .filter(function (col) {
          return !!col;
        })
        .map(function (col) {
          return col;
        });
    },
    [keysFixed, columns, fixedType],
  );
  var onDrop = useCallback(
    function (dragIndex, hoverIndex) {
      setCurrentHoverIndex(undefined);
      if (dragIndex === hoverIndex) return;
      var dragItem = keysFixed[dragIndex];
      onKeysOrder(
        fixedType,
        update(keysFixed, {
          $splice: [
            [dragIndex, 1],
            [hoverIndex, 0, dragItem],
          ],
        }),
      );
    },
    [columnsFixed],
  );
  return /*#__PURE__*/ React.createElement(
    'ul',
    {
      style: {
        maxHeight: 200,
        overflow: 'auto',
      },
    },
    columnsFixed.map(function (column, index) {
      return /*#__PURE__*/ React.createElement(DndItem, {
        key: column.key,
        type: 'dnd_item_'.concat(fixedType || 'no', '_fixed'),
        hiddenKeys: hiddenKeys,
        column: column,
        index: index,
        onDrop: onDrop,
        currentHoverIndex: currentHoverIndex,
        setCurrentHoverIndex: setCurrentHoverIndex,
        toggleKeyHide: onToggleKeyHide,
        onColumnFixed: onColumnFixed,
      });
    }),
  );
});
