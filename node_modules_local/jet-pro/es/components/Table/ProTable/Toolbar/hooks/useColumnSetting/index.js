function _typeof(obj) {
  '@babel/helpers - typeof';
  return (
    (_typeof =
      'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
        ? function (obj) {
            return typeof obj;
          }
        : function (obj) {
            return obj &&
              'function' == typeof Symbol &&
              obj.constructor === Symbol &&
              obj !== Symbol.prototype
              ? 'symbol'
              : typeof obj;
          }),
    _typeof(obj)
  );
}
function _toConsumableArray(arr) {
  return (
    _arrayWithoutHoles(arr) ||
    _iterableToArray(arr) ||
    _unsupportedIterableToArray(arr) ||
    _nonIterableSpread()
  );
}
function _nonIterableSpread() {
  throw new TypeError(
    'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
  );
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === 'string') return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === 'Object' && o.constructor) n = o.constructor.name;
  if (n === 'Map' || n === 'Set') return Array.from(o);
  if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _iterableToArray(iter) {
  if (
    (typeof Symbol !== 'undefined' && iter[Symbol.iterator] != null) ||
    iter['@@iterator'] != null
  )
    return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly &&
      (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })),
      keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2
      ? ownKeys(Object(source), !0).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        })
      : Object.getOwnPropertyDescriptors
      ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))
      : ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true,
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, 'string');
  return _typeof(key) === 'symbol' ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== 'object' || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || 'default');
    if (_typeof(res) !== 'object') return res;
    throw new TypeError('@@toPrimitive must return a primitive value.');
  }
  return (hint === 'string' ? String : Number)(input);
}
import { SettingOutlined } from '@ant-design/icons';
import { Button, Checkbox, Popover, Tooltip } from 'antd';
import React, { useCallback, useMemo } from 'react';
import { DndProvider } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import DndList from './DndList';
import './index.less';
import useColumnConfig from './useColumnConfig';
var ColumnList = function ColumnList(_ref) {
  var fixedType = _ref.fixedType,
    title = _ref.title,
    _ref$showTitle = _ref.showTitle,
    showTitle = _ref$showTitle === void 0 ? true : _ref$showTitle,
    _ref$columnConfigs = _ref.columnConfigs,
    columnConfigs = _ref$columnConfigs === void 0 ? [] : _ref$columnConfigs,
    _ref$columns = _ref.columns,
    columns = _ref$columns === void 0 ? [] : _ref$columns,
    onToggleKeyHide = _ref.onToggleKeyHide,
    setFixedKey = _ref.setFixedKey,
    onKeysOrder = _ref.onKeysOrder;
  var fixedKeys = useMemo(
    function () {
      return columnConfigs
        .filter(function (cfg) {
          return cfg.fixed === fixedType && !!cfg.key;
        })
        .map(function (cfg) {
          return cfg.key;
        });
    },
    [columnConfigs, fixedType],
  );
  if (!fixedKeys.length) return /*#__PURE__*/ React.createElement(React.Fragment, null);
  return /*#__PURE__*/ React.createElement(
    React.Fragment,
    null,
    showTitle &&
      /*#__PURE__*/ React.createElement(
        'span',
        {
          className: 'fixed-title',
        },
        title,
      ),
    /*#__PURE__*/ React.createElement(
      DndProvider,
      {
        backend: HTML5Backend,
      },
      /*#__PURE__*/ React.createElement(DndList, {
        fixedType: fixedType,
        columnConfigs: columnConfigs,
        columns: columns,
        onToggleKeyHide: onToggleKeyHide,
        onColumnFixed: setFixedKey,
        onKeysOrder: onKeysOrder,
      }),
    ),
  );
};
export default (function (props) {
  // 处理props的columns
  var propsColumns = props.columns.filter(function (col) {
    return !!col.key;
  });
  var _useColumnConfig = useColumnConfig({
      columns: propsColumns,
    }),
    columnConfigs = _useColumnConfig.configs,
    setColumnConfigs = _useColumnConfig.setColumnConfigs,
    setFixedKey = _useColumnConfig.setFixedKey,
    toggleHideKey = _useColumnConfig.toggleHideKey,
    batchSetHideKeys = _useColumnConfig.batchSetHideKeys;
  var hiddenKeys = useMemo(
    function () {
      return columnConfigs
        .filter(function (item) {
          return item.hide;
        })
        .map(function (item) {
          return item.key;
        });
    },
    [columnConfigs],
  );
  var getKeysByFixed = useCallback(
    function () {
      var fixed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      return columnConfigs
        .filter(function (item) {
          return item.fixed === fixed;
        })
        .map(function (item) {
          return item.key;
        });
    },
    [columnConfigs],
  );
  var fixedLeftKeys = useMemo(
    function () {
      return getKeysByFixed('left');
    },
    [getKeysByFixed],
  );
  var fixedRightKeys = useMemo(
    function () {
      return getKeysByFixed('right');
    },
    [getKeysByFixed],
  );
  var onKeysOrder = function onKeysOrder(fixed, keysOrdered) {
    var colCfgs = keysOrdered.map(function (key) {
      var orgCfg = columnConfigs.find(function (item) {
        return item.key === key;
      });
      return _objectSpread(
        _objectSpread({}, orgCfg),
        {},
        {
          fixed: fixed,
        },
      );
    });
    setColumnConfigs(
      [].concat(
        _toConsumableArray(
          columnConfigs.filter(function (item) {
            return !keysOrdered.some(function (key) {
              return key === item.key;
            });
          }),
        ),
        _toConsumableArray(colCfgs),
      ),
    );
  };
  var getColumnListProps = function getColumnListProps(title) {
    var fixedType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    return {
      title: title,
      fixedType: fixedType,
      columnConfigs: columnConfigs,
      columns: propsColumns,
      onToggleKeyHide: toggleHideKey,
      setFixedKey: setFixedKey,
      onKeysOrder: onKeysOrder,
    };
  };
  var ColumnSetting = /*#__PURE__*/ React.createElement(
    Popover,
    {
      placement: 'bottomRight',
      trigger: 'click',
      overlayClassName: 'columns-etting-container',
      style: {
        padding: 0,
      },
      title: /*#__PURE__*/ React.createElement(
        'div',
        {
          style: {
            padding: '5px 0px',
          },
        },
        /*#__PURE__*/ React.createElement(
          Checkbox,
          {
            indeterminate: hiddenKeys.length > 0 && hiddenKeys.length < propsColumns.length,
            checked: hiddenKeys.length === 0,
            onChange: function onChange(_ref2) {
              var checked = _ref2.target.checked;
              return batchSetHideKeys(!checked);
            },
          },
          '\u5217\u8BBE\u7F6E',
        ),
      ),
      content: /*#__PURE__*/ React.createElement(
        React.Fragment,
        null,
        /*#__PURE__*/ React.createElement(ColumnList, getColumnListProps('固定在左侧', 'left')),
        /*#__PURE__*/ React.createElement(
          ColumnList,
          _objectSpread(
            _objectSpread({}, getColumnListProps('不固定')),
            {},
            {
              showTitle: fixedLeftKeys.length > 0 || fixedRightKeys.length > 0,
            },
          ),
        ),
        /*#__PURE__*/ React.createElement(ColumnList, getColumnListProps('固定在右侧', 'right')),
      ),
    },
    /*#__PURE__*/ React.createElement(
      Tooltip,
      {
        overlay: '\u5217\u8BBE\u7F6E',
      },
      /*#__PURE__*/ React.createElement(Button, {
        icon: /*#__PURE__*/ React.createElement(SettingOutlined, {
          color: '#666',
          twoToneColor: '#666',
        }),
        style: {
          border: 'none',
        },
      }),
    ),
  );
  return {
    configs: columnConfigs,
    ColumnSetting: ColumnSetting,
  };
});
