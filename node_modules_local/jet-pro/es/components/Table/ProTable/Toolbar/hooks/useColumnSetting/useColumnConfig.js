function _typeof(obj) {
  '@babel/helpers - typeof';
  return (
    (_typeof =
      'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
        ? function (obj) {
            return typeof obj;
          }
        : function (obj) {
            return obj &&
              'function' == typeof Symbol &&
              obj.constructor === Symbol &&
              obj !== Symbol.prototype
              ? 'symbol'
              : typeof obj;
          }),
    _typeof(obj)
  );
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly &&
      (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })),
      keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2
      ? ownKeys(Object(source), !0).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        })
      : Object.getOwnPropertyDescriptors
      ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))
      : ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true,
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, 'string');
  return _typeof(key) === 'symbol' ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== 'object' || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || 'default');
    if (_typeof(res) !== 'object') return res;
    throw new TypeError('@@toPrimitive must return a primitive value.');
  }
  return (hint === 'string' ? String : Number)(input);
}
function _toConsumableArray(arr) {
  return (
    _arrayWithoutHoles(arr) ||
    _iterableToArray(arr) ||
    _unsupportedIterableToArray(arr) ||
    _nonIterableSpread()
  );
}
function _nonIterableSpread() {
  throw new TypeError(
    'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
  );
}
function _iterableToArray(iter) {
  if (
    (typeof Symbol !== 'undefined' && iter[Symbol.iterator] != null) ||
    iter['@@iterator'] != null
  )
    return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _slicedToArray(arr, i) {
  return (
    _arrayWithHoles(arr) ||
    _iterableToArrayLimit(arr, i) ||
    _unsupportedIterableToArray(arr, i) ||
    _nonIterableRest()
  );
}
function _nonIterableRest() {
  throw new TypeError(
    'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
  );
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === 'string') return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === 'Object' && o.constructor) n = o.constructor.name;
  if (n === 'Map' || n === 'Set') return Array.from(o);
  if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  var _i =
    null == arr
      ? null
      : ('undefined' != typeof Symbol && arr[Symbol.iterator]) || arr['@@iterator'];
  if (null != _i) {
    var _s,
      _e,
      _x,
      _r,
      _arr = [],
      _n = !0,
      _d = !1;
    try {
      if (((_x = (_i = _i.call(arr)).next), 0 === i)) {
        if (Object(_i) !== _i) return;
        _n = !1;
      } else
        for (
          ;
          !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i);
          _n = !0
        );
    } catch (err) {
      (_d = !0), (_e = err);
    } finally {
      try {
        if (!_n && null != _i.return && ((_r = _i.return()), Object(_r) !== _r)) return;
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
import { useSafeState } from 'ahooks';
import { useEffect } from 'react';
export default (function (_ref) {
  var columns = _ref.columns;
  var _useSafeState = useSafeState([]),
    _useSafeState2 = _slicedToArray(_useSafeState, 2),
    configs = _useSafeState2[0],
    setConfigs = _useSafeState2[1];

  /**
   * 设置列固定模式
   * @param key column key
   * @param fixed FixedType
   */
  var setFixedKey = function setFixedKey(key, fixed) {
    var cfgItem = configs.find(function (item) {
      return item.key === key;
    });
    if (!cfgItem) return;
    cfgItem.fixed = fixed;
    setConfigs(_toConsumableArray(configs));
  };

  /**
   * 切换列隐藏/取消隐藏
   * @param key
   */
  var toggleHideKey = function toggleHideKey(key) {
    var cfgItem = configs.find(function (item) {
      return item.key === key;
    });
    if (!cfgItem) return;
    cfgItem.hide = !cfgItem.hide;
    setConfigs(_toConsumableArray(configs));
  };

  /**
   * 批量设置隐藏/取消隐藏
   * @param hide 是否隐藏
   * @returns
   */
  var batchSetHideKeys = function batchSetHideKeys(hide) {
    return setConfigs(
      configs.map(function (cfg) {
        return _objectSpread(
          _objectSpread({}, cfg),
          {},
          {
            hide: hide,
          },
        );
      }),
    );
  };
  useEffect(
    function () {
      if (!(columns !== null && columns !== void 0 && columns.length)) return;
      var columnsWithoutConfig = columns.filter(function (col) {
        return !configs.some(function (c) {
          return c.key === col.key;
        });
      });
      if (!columnsWithoutConfig.length) return;
      var configable = false;
      columnsWithoutConfig.forEach(function (col) {
        if (
          !configs.some(function (cfg) {
            return cfg.key === col.key;
          })
        ) {
          configable = true;
          configs.push({
            key: col.key,
            fixed: col.fixed || false,
          });
        }
      });
      if (configable) setConfigs(_toConsumableArray(configs));
    },
    [columns],
  );
  return {
    configs: configs,
    setColumnConfigs: setConfigs,
    setFixedKey: setFixedKey,
    toggleHideKey: toggleHideKey,
    batchSetHideKeys: batchSetHideKeys,
  };
});
