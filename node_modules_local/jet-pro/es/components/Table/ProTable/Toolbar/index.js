var _excluded = ['defaultSize', 'hide', 'extra', 'hideActions'];
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
import { ReloadOutlined } from '@ant-design/icons';
import { Button, Space, Tooltip } from 'antd';
import React from 'react';
import useColumnSetting from './hooks/useColumnSetting';
import useDensity from './hooks/useDensity';
export default (function (_ref) {
  var defaultSize = _ref.defaultSize,
    hide = _ref.hide,
    extra = _ref.extra,
    hideActions = _ref.hideActions,
    props = _objectWithoutProperties(_ref, _excluded);
  var _useDensity = useDensity({
      defaultSize: defaultSize,
    }),
    size = _useDensity.size,
    Density = _useDensity.Density;
  var _useColumnSetting = useColumnSetting({
      columns: props.columns,
    }),
    columnConfigs = _useColumnSetting.configs,
    ColumnSetting = _useColumnSetting.ColumnSetting;
  var Toolbar =
    !hide &&
    /*#__PURE__*/ React.createElement(
      Space,
      null,
      extra,
      !(
        hideActions !== null &&
        hideActions !== void 0 &&
        hideActions.some(function (a) {
          return a === 'reload';
        })
      ) &&
        /*#__PURE__*/ React.createElement(
          Tooltip,
          {
            overlay: '\u5237\u65B0',
          },
          /*#__PURE__*/ React.createElement(Button, {
            loading: props.loading,
            icon: /*#__PURE__*/ React.createElement(ReloadOutlined, null),
            style: {
              border: 'none',
            },
            onClick: props.onLoad,
          }),
        ),
      !(
        hideActions !== null &&
        hideActions !== void 0 &&
        hideActions.some(function (a) {
          return a === 'density';
        })
      ) && Density,
      !(
        hideActions !== null &&
        hideActions !== void 0 &&
        hideActions.some(function (a) {
          return a === 'columnSetting';
        })
      ) && ColumnSetting,
    );
  return {
    size: size,
    columnConfigs: columnConfigs,
    Toolbar: Toolbar,
  };
});
