var _excluded = ['title', 'columns', 'actionColumn', 'toolbarProps', 'sorterResult', 'refAction'];
function _extends() {
  _extends = Object.assign
    ? Object.assign.bind()
    : function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
  return _extends.apply(this, arguments);
}
function _toConsumableArray(arr) {
  return (
    _arrayWithoutHoles(arr) ||
    _iterableToArray(arr) ||
    _unsupportedIterableToArray(arr) ||
    _nonIterableSpread()
  );
}
function _nonIterableSpread() {
  throw new TypeError(
    'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
  );
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === 'string') return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === 'Object' && o.constructor) n = o.constructor.name;
  if (n === 'Map' || n === 'Set') return Array.from(o);
  if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _iterableToArray(iter) {
  if (
    (typeof Symbol !== 'undefined' && iter[Symbol.iterator] != null) ||
    iter['@@iterator'] != null
  )
    return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _typeof(obj) {
  '@babel/helpers - typeof';
  return (
    (_typeof =
      'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
        ? function (obj) {
            return typeof obj;
          }
        : function (obj) {
            return obj &&
              'function' == typeof Symbol &&
              obj.constructor === Symbol &&
              obj !== Symbol.prototype
              ? 'symbol'
              : typeof obj;
          }),
    _typeof(obj)
  );
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly &&
      (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })),
      keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2
      ? ownKeys(Object(source), !0).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        })
      : Object.getOwnPropertyDescriptors
      ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))
      : ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true,
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, 'string');
  return _typeof(key) === 'symbol' ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== 'object' || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || 'default');
    if (_typeof(res) !== 'object') return res;
    throw new TypeError('@@toPrimitive must return a primitive value.');
  }
  return (hint === 'string' ? String : Number)(input);
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
import { useCreation } from 'ahooks';
import { Card, Table } from 'antd';
import React, { useCallback, useEffect, useMemo } from 'react';
import useToolbar from './Toolbar';
import { fixedColumn, genColumnsFromProps, isGroupColumn } from './utils';

/**
 * 高级表格，对Table扩展了一些东西，也是QueryTable和CRUDTable的基础表格
 */
var ProTable = function ProTable(_ref) {
  var title = _ref.title,
    propsColumns = _ref.columns,
    propsActionColumn = _ref.actionColumn,
    toolbarProps = _ref.toolbarProps,
    sorterResult = _ref.sorterResult,
    propsRefAction = _ref.refAction,
    props = _objectWithoutProperties(_ref, _excluded);
  var columns = genColumnsFromProps(propsColumns);
  var _useToolbar = useToolbar(
      _objectSpread(
        _objectSpread({}, toolbarProps),
        {},
        {
          loading: props.loading,
          defaultSize: props.size,
          columns: columns,
        },
      ),
    ),
    size = _useToolbar.size,
    columnConfigs = _useToolbar.columnConfigs,
    Toolbar = _useToolbar.Toolbar;
  var hiddenColumnKeys = useMemo(
    function () {
      return columnConfigs
        .filter(function (cfg) {
          return cfg.hide;
        })
        .map(function (cfg) {
          return cfg.key;
        });
    },
    [columnConfigs],
  );
  var getColumnKeysByFixed = useCallback(
    function () {
      var fixed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      return columnConfigs
        .filter(function (cfg) {
          return cfg.fixed === fixed && !!cfg.key;
        })
        .map(function (cfg) {
          return cfg.key;
        });
    },
    [columnConfigs],
  );
  var getColumnsByFixed = function getColumnsByFixed(cols) {
    var fixed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    return getColumnKeysByFixed(fixed)
      .map(function (key) {
        var col = cols.find(function (item) {
          return item.key === key;
        });
        if (col) return fixedColumn(col, fixed);
        return undefined;
      })
      .filter(function (item) {
        return !!item;
      })
      .map(function (item) {
        return item;
      });
  };
  var genColumnsBySorter = function genColumnsBySorter(cols) {
    if (!(cols !== null && cols !== void 0 && cols.length)) return [];
    return (
      cols
        // 过滤隐藏列
        .filter(function (c) {
          return !hiddenColumnKeys.some(function (key) {
            return key === c.key;
          });
        })
        .map(function (col) {
          if (isGroupColumn(col)) {
            var colGroup = col;
            colGroup.children = genColumnsBySorter(colGroup.children);
            return colGroup;
          }
          var colNormal = col;
          if (colNormal.sorterProps) {
            var _sorter;
            var sorter;
            if (sorterResult instanceof Array)
              sorter =
                sorterResult === null || sorterResult === void 0
                  ? void 0
                  : sorterResult.find(function (cs) {
                      return cs.columnKey === colNormal.key;
                    });
            else sorter = sorterResult;
            var sorterProps = colNormal.sorterProps;
            var colWithSorter = _objectSpread(
              {
                sortOrder:
                  (_sorter = sorter) === null || _sorter === void 0 ? void 0 : _sorter.order,
                sorter: {
                  multiple: 1,
                },
              },
              _typeof(sorterProps) === 'object'
                ? {
                    showSorterTooltip: sorterProps.showTooltip,
                    sortDirections: sorterProps.directions,
                  }
                : {},
            );
            return _objectSpread(_objectSpread({}, col), colWithSorter);
          }
          return colNormal;
        })
    );
  };

  /**
   * 加工渲染的列
   * @returns
   */
  var getColumns4Render = function getColumns4Render() {
    var columns4Render = columns
      // 过滤用户设置的隐藏列
      .filter(function (c) {
        return !c.hide;
      })
      // 过滤列设置的隐藏列
      .filter(function (c) {
        return !hiddenColumnKeys.some(function (key) {
          return key === c.key;
        });
      });
    columns4Render = genColumnsBySorter(columns4Render);
    var actionColumn;
    if (propsActionColumn)
      actionColumn = _objectSpread(
        _objectSpread(
          {
            width: 100,
          },
          propsActionColumn,
        ),
        {},
        {
          fixed: 'right',
          render: function render(_, item, index) {
            var _propsActionColumn$re;
            return propsActionColumn === null || propsActionColumn === void 0
              ? void 0
              : (_propsActionColumn$re = propsActionColumn.render) === null ||
                _propsActionColumn$re === void 0
              ? void 0
              : _propsActionColumn$re.call(propsActionColumn, item, index);
          },
        },
      );
    columns4Render = [].concat(
      _toConsumableArray(getColumnsByFixed(columns4Render, 'left')),
      _toConsumableArray(getColumnsByFixed(columns4Render)),
      _toConsumableArray(getColumnsByFixed(columns4Render, 'right')),
      _toConsumableArray(actionColumn ? [actionColumn] : []),
    );
    return columns4Render;
  };
  var action = useCreation(
    function () {
      if (!(toolbarProps !== null && toolbarProps !== void 0 && toolbarProps.onLoad))
        return undefined;
      return {
        reload: toolbarProps.onLoad,
      };
    },
    [toolbarProps],
  );
  useEffect(
    function () {
      if (!propsRefAction) return;
      if (typeof propsRefAction === 'function') {
        propsRefAction(action);
        return;
      }

      // eslint-disable-next-line no-param-reassign
      propsRefAction.current = action;
    },
    [propsRefAction, action],
  );
  return /*#__PURE__*/ React.createElement(
    Card,
    {
      title: title === null || title === void 0 ? void 0 : title(props.dataSource || []),
      extra: Toolbar,
    },
    /*#__PURE__*/ React.createElement(
      Table,
      _extends(
        {
          rowKey: 'id',
        },
        props,
        {
          scroll: _objectSpread(
            {
              x: '100%',
              y: '100%',
            },
            props.scroll,
          ),
          size: size,
          columns: getColumns4Render(),
          onChange: function onChange(pg, filters, sorter, extra) {
            var _props$onChange;
            (_props$onChange = props.onChange) === null || _props$onChange === void 0
              ? void 0
              : _props$onChange.call(props, pg, filters, sorter, extra);
          },
        },
      ),
    ),
  );
};
export default ProTable;
