function _typeof(obj) {
  '@babel/helpers - typeof';
  return (
    (_typeof =
      'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
        ? function (obj) {
            return typeof obj;
          }
        : function (obj) {
            return obj &&
              'function' == typeof Symbol &&
              obj.constructor === Symbol &&
              obj !== Symbol.prototype
              ? 'symbol'
              : typeof obj;
          }),
    _typeof(obj)
  );
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly &&
      (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })),
      keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2
      ? ownKeys(Object(source), !0).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        })
      : Object.getOwnPropertyDescriptors
      ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))
      : ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true,
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, 'string');
  return _typeof(key) === 'symbol' ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== 'object' || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || 'default');
    if (_typeof(res) !== 'object') return res;
    throw new TypeError('@@toPrimitive must return a primitive value.');
  }
  return (hint === 'string' ? String : Number)(input);
}
import { formatDate, formatDateTime, formatTime } from '../../../utils/dateUtils';
import { hasKey } from '../../../utils/objectUtils';
/**
 * 是否是分组列
 * @param col
 * @returns
 */
export var isGroupColumn = function isGroupColumn(col) {
  return hasKey(col, 'children');
};

/**
 * 生成字段名
 * @param dataIndex
 * @returns
 */
export var genFieldName = function genFieldName(dataIndex) {
  if (!dataIndex) return '';
  if (dataIndex instanceof Array) return dataIndex.join('.');
  return ''.concat(dataIndex);
};
export var genColumnTitle = function genColumnTitle(title) {
  return typeof title === 'function' ? title({}) : title;
};

// export const genColumnKey = <TListView extends TBaseView>(col: TProColumnType<TListView>) => {
//   const { title, dataIndex } = col;
//   const fieldName = genFieldName(dataIndex);
//   return `${title}_${fieldName}`;
// };

/**
 * 生成带key的Columns
 * @param columns
 * @returns colums
 */
export var genColumnsKeyIfy = function genColumnsKeyIfy(columns) {
  return (
    (columns === null || columns === void 0
      ? void 0
      : columns.map(function (col) {
          var key = col.key || genFieldName(col.dataIndex);
          if (isGroupColumn(col)) {
            var colGroup = col;
            colGroup.key = key;
            colGroup.children = genColumnsKeyIfy(colGroup.children);
            return _objectSpread({}, colGroup);
          }
          return _objectSpread(
            _objectSpread({}, col),
            {},
            {
              key: key,
            },
          );
        })) || []
  );
};

/**
 *
 * @param cols
 * @returns
 */
export var genColumnsFromProps = function genColumnsFromProps(cols) {
  if (!(cols !== null && cols !== void 0 && cols.length)) return [];
  var genColumnByProps = function genColumnByProps(col) {
    var key = col.key || genFieldName(col.dataIndex);
    if (isGroupColumn(col)) {
      var _colGroup$children;
      var colGroup = col;
      var children =
        (_colGroup$children = colGroup.children) === null || _colGroup$children === void 0
          ? void 0
          : _colGroup$children.map(function (c) {
              return _objectSpread(
                _objectSpread({}, genColumnByProps(c)),
                {},
                {
                  fixed: colGroup.fixed,
                },
              );
            });
      return _objectSpread(
        _objectSpread({}, colGroup),
        {},
        {
          children: children,
          key: key,
        },
      );
    }
    var colNormal = col;
    var newCol = _objectSpread(
      _objectSpread(
        {
          width: 120,
        },
        colNormal,
      ),
      {},
      {
        key: key,
      },
    );
    if (!newCol.render) {
      var valueType = newCol.valueType;
      switch (valueType) {
        case 'date':
          newCol.render = function (val) {
            return formatDate(val);
          };
          newCol.width = 120;
          break;
        case 'time':
          newCol.render = function (val) {
            return formatTime(val);
          };
          newCol.width = 100;
          break;
        case 'dateTime':
          newCol.render = function (val) {
            return formatDateTime(val);
          };
          newCol.width = 160;
          break;
        case 'enum':
          if (newCol.enumType) {
            newCol.render = function (val) {
              if (typeof val === 'number') return newCol.enumType[val];
              return val;
            };
          }
          break;
        default:
          break;
      }
    }
    return newCol;
  };
  return cols.map(function (col) {
    return genColumnByProps(col);
  });
};

/**
 * 设置column的fixed属性，如果带分组的列，需要对其children列都设置fixed属性
 * @param column
 * @param fixedType
 * @returns
 */
export var fixedColumn = function fixedColumn(column, fixedType) {
  if (isGroupColumn(column)) {
    var _columnGroup$children;
    var columnGroup = column;
    columnGroup.fixed = fixedType;
    columnGroup.children =
      columnGroup === null || columnGroup === void 0
        ? void 0
        : (_columnGroup$children = columnGroup.children) === null ||
          _columnGroup$children === void 0
        ? void 0
        : _columnGroup$children.map(function (col) {
            return fixedColumn(col, fixedType);
          });
    return columnGroup;
  }
  return _objectSpread(
    _objectSpread({}, column),
    {},
    {
      fixed: fixedType,
    },
  );
};

/**
 * 平铺列，将分组列平铺和普通列同层
 * @param columns 列/分组列
 * @returns
 */
export var flatColumns = function flatColumns(columns) {
  var columnsFlattened = [];
  columns === null || columns === void 0
    ? void 0
    : columns.forEach(function (col) {
        if (isGroupColumn(col)) {
          var colGroup = col;
          flatColumns(colGroup.children).forEach(function (c) {
            return columnsFlattened.push(c);
          });
          return;
        }
        columnsFlattened.push(col);
      });
  return columnsFlattened;
};
