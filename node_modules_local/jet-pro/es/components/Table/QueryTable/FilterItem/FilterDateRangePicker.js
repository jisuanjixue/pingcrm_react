function _typeof(obj) {
  '@babel/helpers - typeof';
  return (
    (_typeof =
      'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
        ? function (obj) {
            return typeof obj;
          }
        : function (obj) {
            return obj &&
              'function' == typeof Symbol &&
              obj.constructor === Symbol &&
              obj !== Symbol.prototype
              ? 'symbol'
              : typeof obj;
          }),
    _typeof(obj)
  );
}
function _extends() {
  _extends = Object.assign
    ? Object.assign.bind()
    : function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
  return _extends.apply(this, arguments);
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly &&
      (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })),
      keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2
      ? ownKeys(Object(source), !0).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        })
      : Object.getOwnPropertyDescriptors
      ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))
      : ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true,
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, 'string');
  return _typeof(key) === 'symbol' ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== 'object' || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || 'default');
    if (_typeof(res) !== 'object') return res;
    throw new TypeError('@@toPrimitive must return a primitive value.');
  }
  return (hint === 'string' ? String : Number)(input);
}
function _slicedToArray(arr, i) {
  return (
    _arrayWithHoles(arr) ||
    _iterableToArrayLimit(arr, i) ||
    _unsupportedIterableToArray(arr, i) ||
    _nonIterableRest()
  );
}
function _nonIterableRest() {
  throw new TypeError(
    'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
  );
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === 'string') return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === 'Object' && o.constructor) n = o.constructor.name;
  if (n === 'Map' || n === 'Set') return Array.from(o);
  if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  var _i =
    null == arr
      ? null
      : ('undefined' != typeof Symbol && arr[Symbol.iterator]) || arr['@@iterator'];
  if (null != _i) {
    var _s,
      _e,
      _x,
      _r,
      _arr = [],
      _n = !0,
      _d = !1;
    try {
      if (((_x = (_i = _i.call(arr)).next), 0 === i)) {
        if (Object(_i) !== _i) return;
        _n = !1;
      } else
        for (
          ;
          !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i);
          _n = !0
        );
    } catch (err) {
      (_d = !0), (_e = err);
    } finally {
      try {
        if (!_n && null != _i.return && ((_r = _i.return()), Object(_r) !== _r)) return;
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
import ProForm from '@ant-design/pro-form';
import React from 'react';
import { DatePicker, TimePicker } from '../../../../';
import { FilterType } from '../../../../dataTypes/dynamicQuery/enums';
import { formatDate, formatDateTime, formatTime } from '../../../../utils/dateUtils';
import {
  FilterAndHidden,
  FilterTypeHidden,
  FilterValueHidden,
  FilterValueTypeHidden,
} from './FilterExtras';
export var momentFormat = function momentFormat(val, mode) {
  if (mode === 'dateTime') return formatDateTime(val);
  if (mode === 'time') return formatTime(val);
  return formatDate(val);
};
var getValue = function getValue(fieldValue) {
  var start = fieldValue === null || fieldValue === void 0 ? void 0 : fieldValue.filters[0].value; // convertToMoment(compleFullDateTime(fieldValue?.filters[0].value, mode));
  var end = fieldValue === null || fieldValue === void 0 ? void 0 : fieldValue.filters[1].value; // convertToMoment(compleFullDateTime(fieldValue?.filters[1].value, mode));
  if (!start && !end) return [null, null];
  return [start || null, end || null]; // as [DateValueType, DateValueType];
};

export default (function (_ref) {
  var name = _ref.name,
    label = _ref.label,
    defaultValue = _ref.defaultValue,
    _ref$mode = _ref.mode,
    mode = _ref$mode === void 0 ? 'date' : _ref$mode,
    _ref$and = _ref.and,
    and = _ref$and === void 0 ? true : _ref$and;
  return /*#__PURE__*/ React.createElement(
    React.Fragment,
    null,
    /*#__PURE__*/ React.createElement(
      ProForm.Item,
      {
        name: name,
        label: label,
      },
      /*#__PURE__*/ React.createElement(
        ProForm.Item,
        {
          shouldUpdate: true,
          noStyle: true,
        },
        function (form) {
          var pickerProps = {
            value: getValue(form.getFieldValue(name)),
            onChange: function onChange(value) {
              var fieldValue = form.getFieldValue(name);
              var _ref2 = value || [];
              var _ref3 = _slicedToArray(_ref2, 2);
              fieldValue.filters[0].value = _ref3[0];
              fieldValue.filters[1].value = _ref3[1];
              var obj = {};
              obj[name] = fieldValue;
              form.setFieldsValue(_objectSpread({}, obj));
            },
            showSecond: false,
          };
          if (mode === 'time')
            return /*#__PURE__*/ React.createElement(
              TimePicker.RangePicker,
              _extends({}, pickerProps, {
                showSecond: false,
              }),
            );
          return /*#__PURE__*/ React.createElement(
            DatePicker.RangePicker,
            _extends({}, pickerProps, {
              showTime: mode === 'dateTime',
              showSecond: false,
            }),
          );
        },
      ),
    ),
    /*#__PURE__*/ React.createElement(FilterTypeHidden, {
      name: name,
      type: FilterType.Composite,
    }),
    /*#__PURE__*/ React.createElement(FilterAndHidden, {
      name: name,
      and: and,
    }),
    /*#__PURE__*/ React.createElement(FilterValueTypeHidden, {
      name: name,
      valueType: mode,
    }),
    /*#__PURE__*/ React.createElement(FilterValueHidden, {
      name: [name, 'filters', 0],
      value: (defaultValue || [])[0], // momentFormat(convertToMoment((defaultValue || [])[0]), mode),
    }),
    /*#__PURE__*/ React.createElement(FilterValueHidden, {
      name: [name, 'filters', 1],
      value: (defaultValue || [])[1], // momentFormat(convertToMoment((defaultValue || [])[1]), mode),
    }),
    /*#__PURE__*/ React.createElement(FilterTypeHidden, {
      name: [name, 'filters', 0],
      type: FilterType.GreaterThanOrEqual,
    }),
    /*#__PURE__*/ React.createElement(FilterAndHidden, {
      name: [name, 'filters', 0],
      and: and,
    }),
    /*#__PURE__*/ React.createElement(FilterTypeHidden, {
      name: [name, 'filters', 1],
      type: FilterType.LessThanOrEqual,
    }),
    /*#__PURE__*/ React.createElement(FilterAndHidden, {
      name: [name, 'filters', 1],
      and: and,
    }),
  );
});
