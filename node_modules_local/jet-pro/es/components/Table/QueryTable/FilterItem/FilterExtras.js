function _typeof(obj) {
  '@babel/helpers - typeof';
  return (
    (_typeof =
      'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
        ? function (obj) {
            return typeof obj;
          }
        : function (obj) {
            return obj &&
              'function' == typeof Symbol &&
              obj.constructor === Symbol &&
              obj !== Symbol.prototype
              ? 'symbol'
              : typeof obj;
          }),
    _typeof(obj)
  );
}
var _excluded = ['name', 'defaultType', 'types', 'showFilterType', 'style'];
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly &&
      (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })),
      keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2
      ? ownKeys(Object(source), !0).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        })
      : Object.getOwnPropertyDescriptors
      ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))
      : ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true,
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, 'string');
  return _typeof(key) === 'symbol' ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== 'object' || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || 'default');
    if (_typeof(res) !== 'object') return res;
    throw new TypeError('@@toPrimitive must return a primitive value.');
  }
  return (hint === 'string' ? String : Number)(input);
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
function _toConsumableArray(arr) {
  return (
    _arrayWithoutHoles(arr) ||
    _iterableToArray(arr) ||
    _unsupportedIterableToArray(arr) ||
    _nonIterableSpread()
  );
}
function _nonIterableSpread() {
  throw new TypeError(
    'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
  );
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === 'string') return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === 'Object' && o.constructor) n = o.constructor.name;
  if (n === 'Map' || n === 'Set') return Array.from(o);
  if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _iterableToArray(iter) {
  if (
    (typeof Symbol !== 'undefined' && iter[Symbol.iterator] != null) ||
    iter['@@iterator'] != null
  )
    return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
import ProForm, { ProFormField } from '@ant-design/pro-form';
import { Select } from 'antd';
import React from 'react';
import { FilterType, FilterTypeTip } from '../../../../dataTypes/dynamicQuery/enums';
/**
 * 隐藏的查询项运算符type
 */
export var FilterAndHidden = function FilterAndHidden(_ref) {
  var n = _ref.name,
    _ref$and = _ref.and,
    and = _ref$and === void 0 ? true : _ref$and;
  var name = n instanceof Array ? n : [n];
  return /*#__PURE__*/ React.createElement(ProFormField, {
    hidden: true,
    name: [].concat(_toConsumableArray(name), ['and']),
    initialValue: and,
  });
};
/** 隐藏的查询项操作符and */
export var FilterTypeHidden = function FilterTypeHidden(_ref2) {
  var n = _ref2.name,
    type = _ref2.type;
  var name = n instanceof Array ? n : [n];
  return /*#__PURE__*/ React.createElement(ProFormField, {
    hidden: true,
    name: [].concat(_toConsumableArray(name), ['type']),
    initialValue: type,
  });
};
export var FilterValueTypeHidden = function FilterValueTypeHidden(_ref3) {
  var n = _ref3.name,
    valueType = _ref3.valueType;
  var name = n instanceof Array ? n : [n];
  return /*#__PURE__*/ React.createElement(ProFormField, {
    hidden: true,
    name: [].concat(_toConsumableArray(name), ['valueType']),
    initialValue: valueType,
  });
};
/** 隐藏的查询项value */
export var FilterValueHidden = function FilterValueHidden(_ref4) {
  var n = _ref4.name,
    value = _ref4.value;
  var name = n instanceof Array ? n : [n];
  return /*#__PURE__*/ React.createElement(ProFormField, {
    hidden: true,
    name: [].concat(_toConsumableArray(name), ['value']),
    initialValue: value,
  });
};
/**
 * 查询操作符选择器
 * @param props
 * @returns
 */
export var FilterTypeSelect = function FilterTypeSelect(props) {
  var n = props.name,
    dt = props.defaultType,
    types = props.types,
    _props$showFilterType = props.showFilterType,
    showFilterType = _props$showFilterType === void 0 ? false : _props$showFilterType,
    style = props.style,
    restProps = _objectWithoutProperties(props, _excluded);
  var name = n instanceof Array ? n : [n];
  var defaultType = types.some(function (t) {
    return t === dt;
  })
    ? dt
    : types[0];
  return /*#__PURE__*/ React.createElement(
    ProForm.Item,
    {
      name: [].concat(_toConsumableArray(name), ['type']),
      initialValue: defaultType,
      noStyle: true,
    },
    /*#__PURE__*/ React.createElement(
      Select,
      _objectSpread(
        _objectSpread({}, restProps),
        {},
        {
          style: _objectSpread(
            {
              display: showFilterType ? '' : 'none',
            },
            style,
          ),
        },
      ),
      types.map(function (t) {
        return /*#__PURE__*/ React.createElement(
          Select.Option,
          {
            key: t,
            value: t,
          },
          FilterTypeTip[FilterType[t]],
        );
      }),
    ),
  );
};
var BooleanSelect = function BooleanSelect(_ref5) {
  var value = _ref5.value,
    _onChange = _ref5.onChange;
  return /*#__PURE__*/ React.createElement(
    Select,
    {
      value: value ? 1 : 0,
      onChange: function onChange(val, option) {
        return _onChange === null || _onChange === void 0 ? void 0 : _onChange(val !== 0, option);
      },
      style: {
        width: 70,
      },
    },
    [1, 0].map(function (val) {
      return /*#__PURE__*/ React.createElement(
        Select.Option,
        {
          key: val,
          value: val,
        },
        val === 0 ? '或' : '与',
      );
    }),
  );
};

/** 查询项运算符选择器 */
export var FilterAndSelect = function FilterAndSelect(_ref6) {
  var n = _ref6.name,
    _ref6$and = _ref6.and,
    and = _ref6$and === void 0 ? true : _ref6$and;
  var name = n instanceof Array ? n : [n];
  return /*#__PURE__*/ React.createElement(
    ProForm.Item,
    {
      noStyle: true,
      name: [].concat(_toConsumableArray(name), ['and']),
      initialValue: and,
    },
    /*#__PURE__*/ React.createElement(BooleanSelect, null),
  );
};
