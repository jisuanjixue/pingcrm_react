function _typeof(obj) {
  '@babel/helpers - typeof';
  return (
    (_typeof =
      'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
        ? function (obj) {
            return typeof obj;
          }
        : function (obj) {
            return obj &&
              'function' == typeof Symbol &&
              obj.constructor === Symbol &&
              obj !== Symbol.prototype
              ? 'symbol'
              : typeof obj;
          }),
    _typeof(obj)
  );
}
var _excluded = ['filters'];
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly &&
      (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })),
      keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2
      ? ownKeys(Object(source), !0).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        })
      : Object.getOwnPropertyDescriptors
      ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))
      : ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true,
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, 'string');
  return _typeof(key) === 'symbol' ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== 'object' || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || 'default');
    if (_typeof(res) !== 'object') return res;
    throw new TypeError('@@toPrimitive must return a primitive value.');
  }
  return (hint === 'string' ? String : Number)(input);
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
import { SwapRightOutlined } from '@ant-design/icons';
import ProForm from '@ant-design/pro-form';
import { Input, InputNumber } from 'antd';
import React from 'react';
import { FilterType } from '../../../../dataTypes/dynamicQuery/enums';
import { FilterAndHidden, FilterTypeHidden, FilterValueTypeHidden } from './FilterExtras';
var invalidate = function invalidate(value) {
  return [undefined, null, ''].some(function (val) {
    return val === value;
  });
};

/**
 * 【jet-pro】number类型的范围FilterItem
 * @param param0
 * @returns
 */
var NumberRange = function NumberRange(_ref) {
  var name = _ref.name,
    label = _ref.label,
    defaultValue = _ref.defaultValue,
    and = _ref.and;
  return /*#__PURE__*/ React.createElement(
    React.Fragment,
    null,
    /*#__PURE__*/ React.createElement(
      ProForm.Item,
      {
        shouldUpdate: true,
        noStyle: true,
      },
      function (form) {
        var onBlur = function onBlur() {
          var _ref2 = form.getFieldValue(name),
            filters = _ref2.filters,
            filter = _objectWithoutProperties(_ref2, _excluded);
          var minFilter = filters.find(function (f) {
            return f.type === FilterType.GreaterThanOrEqual;
          });
          var maxFilter = filters.find(function (f) {
            return f.type === FilterType.LessThanOrEqual;
          });
          if (
            !invalidate(minFilter === null || minFilter === void 0 ? void 0 : minFilter.value) &&
            !invalidate(maxFilter === null || maxFilter === void 0 ? void 0 : maxFilter.value)
          ) {
            if (minFilter.value > maxFilter.value) {
              var temp = minFilter.value;
              minFilter.value = maxFilter.value;
              maxFilter.value = temp;
              var obj = {};
              obj[name] = _objectSpread(
                _objectSpread({}, filter),
                {},
                {
                  filters: [minFilter, maxFilter],
                },
              );
              form.setFieldsValue({
                obj: obj,
              });
            }
          }
        };
        return /*#__PURE__*/ React.createElement(
          React.Fragment,
          null,
          /*#__PURE__*/ React.createElement(
            ProForm.Item,
            {
              name: name,
              label: label,
            },
            /*#__PURE__*/ React.createElement(
              Input.Group,
              {
                compact: true,
              },
              /*#__PURE__*/ React.createElement(
                ProForm.Item,
                {
                  noStyle: true,
                  name: [name, 'filters', 0, 'value'],
                  initialValue: (defaultValue || [])[0],
                },
                /*#__PURE__*/ React.createElement(InputNumber, {
                  placeholder: '\u6700\u5C0F\u503C',
                  style: {
                    width: 'calc(50% - 25px)',
                    zIndex: 1,
                  },
                  onBlur: onBlur,
                }),
              ),
              /*#__PURE__*/ React.createElement(
                'span',
                {
                  className: 'ant-input ant-input-disabled',
                  style: {
                    backgroundColor: '#fff',
                    cursor: 'default',
                    width: 50,
                    textAlign: 'center',
                    zIndex: 0,
                  },
                },
                /*#__PURE__*/ React.createElement(SwapRightOutlined, null),
              ),
              /*#__PURE__*/ React.createElement(
                ProForm.Item,
                {
                  noStyle: true,
                  name: [name, 'filters', 1, 'value'],
                  initialValue: (defaultValue || [])[1],
                },
                /*#__PURE__*/ React.createElement(InputNumber, {
                  placeholder: '\u6700\u5927\u503C',
                  style: {
                    width: 'calc(50% - 25px)',
                    zIndex: 1,
                  },
                  onBlur: onBlur,
                }),
              ),
            ),
          ),
          /*#__PURE__*/ React.createElement(FilterTypeHidden, {
            name: name,
            type: FilterType.Composite,
          }),
          /*#__PURE__*/ React.createElement(FilterValueTypeHidden, {
            name: name,
            valueType: 'number',
          }),
          /*#__PURE__*/ React.createElement(FilterAndHidden, {
            name: name,
            and: and,
          }),
          /*#__PURE__*/ React.createElement(FilterTypeHidden, {
            name: [name, 'filters', 0],
            type: FilterType.GreaterThanOrEqual,
          }),
          /*#__PURE__*/ React.createElement(FilterAndHidden, {
            name: [name, 'filters', 0],
            and: and,
          }),
          /*#__PURE__*/ React.createElement(FilterTypeHidden, {
            name: [name, 'filters', 1],
            type: FilterType.LessThanOrEqual,
          }),
          /*#__PURE__*/ React.createElement(FilterAndHidden, {
            name: [name, 'filters', 1],
            and: and,
          }),
        );
      },
    ),
  );
};
export default NumberRange;
