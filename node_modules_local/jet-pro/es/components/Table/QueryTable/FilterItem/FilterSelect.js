function _extends() {
  _extends = Object.assign
    ? Object.assign.bind()
    : function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
  return _extends.apply(this, arguments);
}
import ProForm from '@ant-design/pro-form';
import { Input } from 'antd';
import React, { useMemo } from 'react';
import { Select } from '../../../../';
import { FilterType } from '../../../../dataTypes/dynamicQuery/enums';
import { FilterAndHidden, FilterTypeSelect } from './FilterExtras';
export default (function (_ref) {
  var _componentProps$optio, _componentProps$field;
  var name = _ref.name,
    label = _ref.label,
    _ref$type = _ref.type,
    propsType = _ref$type === void 0 ? FilterType.Equal : _ref$type,
    and = _ref.and,
    defaultValue = _ref.defaultValue,
    showFilterType = _ref.showFilterType,
    _ref$mode = _ref.mode,
    mode = _ref$mode === void 0 ? 'default' : _ref$mode,
    propsOptions = _ref.options,
    propsFieldNames = _ref.fieldNames,
    componentProps = _ref.componentProps;
  var isMutiple = useMemo(
    function () {
      return mode === 'mulitple';
    },
    [mode],
  );
  var defaultType = useMemo(
    function () {
      return propsType !== null && propsType !== void 0
        ? propsType
        : isMutiple
        ? FilterType.In
        : FilterType.Equal;
    },
    [propsType, isMutiple],
  );
  var types = useMemo(
    function () {
      return isMutiple
        ? [FilterType.In, FilterType.NotIn]
        : [FilterType.Equal, FilterType.NotEqual];
    },
    [isMutiple],
  );
  return /*#__PURE__*/ React.createElement(
    React.Fragment,
    null,
    /*#__PURE__*/ React.createElement(
      ProForm.Item,
      {
        name: name,
        label: label,
      },
      /*#__PURE__*/ React.createElement(
        Input.Group,
        {
          compact: true,
        },
        /*#__PURE__*/ React.createElement(FilterTypeSelect, {
          name: name,
          defaultType: defaultType,
          types: types,
          style: {
            width: 100,
          },
          showFilterType: showFilterType,
        }),
        /*#__PURE__*/ React.createElement(
          ProForm.Item,
          {
            name: [name, 'value'],
            noStyle: true,
            initialValue: defaultValue,
          },
          /*#__PURE__*/ React.createElement(
            Select,
            _extends(
              {
                placeholder: '\u8BF7\u9009\u62E9'.concat(label),
                style: {
                  width: ''.concat(showFilterType ? 'calc(100% - 100px)' : '100%'),
                },
              },
              mode === 'mulitple'
                ? {
                    mode: 'multiple',
                  }
                : {},
              {
                allowClear: true,
                options:
                  (_componentProps$optio =
                    componentProps === null || componentProps === void 0
                      ? void 0
                      : componentProps.options) !== null && _componentProps$optio !== void 0
                    ? _componentProps$optio
                    : propsOptions,
                fieldNames:
                  (_componentProps$field =
                    componentProps === null || componentProps === void 0
                      ? void 0
                      : componentProps.fieldNames) !== null && _componentProps$field !== void 0
                    ? _componentProps$field
                    : propsFieldNames,
              },
              componentProps,
            ),
          ),
        ),
      ),
    ),
    /*#__PURE__*/ React.createElement(FilterAndHidden, {
      name: name,
      and: and,
    }),
  );
});
