function _typeof(obj) {
  '@babel/helpers - typeof';
  return (
    (_typeof =
      'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
        ? function (obj) {
            return typeof obj;
          }
        : function (obj) {
            return obj &&
              'function' == typeof Symbol &&
              obj.constructor === Symbol &&
              obj !== Symbol.prototype
              ? 'symbol'
              : typeof obj;
          }),
    _typeof(obj)
  );
}
function _toConsumableArray(arr) {
  return (
    _arrayWithoutHoles(arr) ||
    _iterableToArray(arr) ||
    _unsupportedIterableToArray(arr) ||
    _nonIterableSpread()
  );
}
function _nonIterableSpread() {
  throw new TypeError(
    'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
  );
}
function _iterableToArray(iter) {
  if (
    (typeof Symbol !== 'undefined' && iter[Symbol.iterator] != null) ||
    iter['@@iterator'] != null
  )
    return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly &&
      (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })),
      keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2
      ? ownKeys(Object(source), !0).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        })
      : Object.getOwnPropertyDescriptors
      ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))
      : ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true,
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, 'string');
  return _typeof(key) === 'symbol' ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== 'object' || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || 'default');
    if (_typeof(res) !== 'object') return res;
    throw new TypeError('@@toPrimitive must return a primitive value.');
  }
  return (hint === 'string' ? String : Number)(input);
}
function _slicedToArray(arr, i) {
  return (
    _arrayWithHoles(arr) ||
    _iterableToArrayLimit(arr, i) ||
    _unsupportedIterableToArray(arr, i) ||
    _nonIterableRest()
  );
}
function _nonIterableRest() {
  throw new TypeError(
    'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
  );
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === 'string') return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === 'Object' && o.constructor) n = o.constructor.name;
  if (n === 'Map' || n === 'Set') return Array.from(o);
  if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  var _i =
    null == arr
      ? null
      : ('undefined' != typeof Symbol && arr[Symbol.iterator]) || arr['@@iterator'];
  if (null != _i) {
    var _s,
      _e,
      _x,
      _r,
      _arr = [],
      _n = !0,
      _d = !1;
    try {
      if (((_x = (_i = _i.call(arr)).next), 0 === i)) {
        if (Object(_i) !== _i) return;
        _n = !1;
      } else
        for (
          ;
          !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i);
          _n = !0
        );
    } catch (err) {
      (_d = !0), (_e = err);
    } finally {
      try {
        if (!_n && null != _i.return && ((_r = _i.return()), Object(_r) !== _r)) return;
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
import { FilterType } from '../../../../dataTypes/dynamicQuery/enums';
import {
  convertToMoment,
  formatDate,
  formatDateTime,
  formatTime,
} from '../../../../utils/dateUtils';
import { hasKey } from '../../../../utils/objectUtils';
var invalidValue = function invalidValue(val) {
  return [undefined, null, ''].some(function (v) {
    return v === val;
  });
};

/**
 * form data转换为filters
 * @param values form data
 * @returns filters
 */
export var convertToFilters = function convertToFilters(values) {
  var filters = [];
  Object.entries(values).forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
      path = _ref2[0],
      item = _ref2[1];
    // SimpleFilter
    if (hasKey(item, 'value')) {
      var valueItem = item;
      var value = valueItem.value;
      if (!invalidValue(value)) {
        var _valueItem$and;
        var type = valueItem.type,
          valueType = valueItem.valueType;
        if (
          ['date', 'dateTime', 'time'].some(function (vt) {
            return vt === valueItem.valueType;
          })
        ) {
          var valueMoment = convertToMoment(value);
          if (valueType === 'date') value = formatDate(valueMoment);
          else if (valueType === 'time') value = formatTime(valueMoment);
          else if (valueType === 'dateTime') value = formatDateTime(valueMoment);
        }
        filters.push({
          path: path,
          type: type,
          value: value,
          and:
            (_valueItem$and = valueItem.and) !== null && _valueItem$and !== void 0
              ? _valueItem$and
              : true,
        });
      }
    }
    // CompositFilter
    else if (hasKey(item, 'filters')) {
      var _valueItem$and2, _valueItem$filters, _filter$filters;
      var _valueItem = item;
      var filter = {
        type: FilterType.Composite,
        filters: [],
        and:
          (_valueItem$and2 = _valueItem.and) !== null && _valueItem$and2 !== void 0
            ? _valueItem$and2
            : true,
      };
      var simpleFilterItem = {};
      (_valueItem$filters = _valueItem.filters) === null || _valueItem$filters === void 0
        ? void 0
        : _valueItem$filters.forEach(function (f) {
            // 组装成一个SimpleFilterItem递归调用
            simpleFilterItem[path] = _objectSpread(
              _objectSpread({}, f),
              {},
              {
                valueType: _valueItem.valueType,
              },
            );
            convertToFilters(simpleFilterItem).forEach(function (a) {
              return filter.filters.push(a);
            });
          });
      if (
        (_filter$filters = filter.filters) !== null &&
        _filter$filters !== void 0 &&
        _filter$filters.length
      )
        filters.push.apply(filters, _toConsumableArray(filter.filters));
    }
  });
  return filters;
};

/**
 * filters转换为form data
 * @param formData form data
 * @param filters filters
 * @returns form data
 */
export var convertToFilterFormData = function convertToFilterFormData(formData, filters) {
  var data = _objectSpread({}, formData);
  var simpleFilters =
    filters === null || filters === void 0
      ? void 0
      : filters.filter(function (f) {
          return !hasKey(f, 'filters');
        });
  Object.keys(data).forEach(function (key) {
    var formItem = formData[key];

    // 复杂查询条件
    if (formItem.type === FilterType.Composite) {
      var formItemComposite = formItem;
      var fs =
        simpleFilters === null || simpleFilters === void 0
          ? void 0
          : simpleFilters.filter(function (f) {
              return f.path === key;
            });
      if (fs !== null && fs !== void 0 && fs.length) {
        formItemComposite.filters = formItemComposite.filters.map(function (f) {
          var _fs$find;
          return _objectSpread(
            _objectSpread({}, f),
            {},
            {
              value:
                (_fs$find = fs.find(function (f1) {
                  return f1.path === key && f1.type === f.type;
                })) === null || _fs$find === void 0
                  ? void 0
                  : _fs$find.value,
            },
          );
        });
      }
    }
    // 普通查询条件
    else {
      var filter =
        simpleFilters === null || simpleFilters === void 0
          ? void 0
          : simpleFilters.find(function (f) {
              return f.path === key;
            });
      var formItemSimple = formData[key];
      if (filter) {
        var _filter$and;
        formItemSimple.and =
          (_filter$and = filter.and) !== null && _filter$and !== void 0 ? _filter$and : true;
        formItemSimple.type = filter.type;
        formItemSimple.value = filter.value;
      }
    }
  });
  return data;
};
