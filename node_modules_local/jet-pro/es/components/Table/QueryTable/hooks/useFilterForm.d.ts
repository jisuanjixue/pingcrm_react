import React from 'react';
import type { IFilter } from '../../../../dataTypes/dynamicQuery';
import type { TBaseView } from '../../ProTable/interface';
import type { IQueryColumnType, IQueryTableFilterProps } from '../interface';
interface IProps<TListView extends TBaseView> {
  /**
   * 平铺的columns（上移children columns）
   */
  columnsFlattened: IQueryColumnType<TListView>[];
  filterProps?: IQueryTableFilterProps;
  loading?: boolean;
  onSearch: (filters: IFilter[]) => Promise<void>;
}
declare const _default: <TListView extends TBaseView>({
  columnsFlattened,
  filterProps,
  loading,
  onSearch,
}: IProps<TListView>) =>
  | {
      FilterForm: React.JSX.Element;
      render?: undefined;
      getFilters?: undefined;
      setFilter?: undefined;
      resetFilters?: undefined;
    }
  | {
      render: () => React.JSX.Element;
      getFilters: () => IFilter[];
      setFilter: (values: {
        [x: string]:
          | {
              filters?:
                | {
                    value?: any;
                    type?:
                      | import('../../../../dataTypes/dynamicQuery/enums').FilterType
                      | undefined;
                    and?: boolean | undefined;
                    valueType?:
                      | 'string'
                      | 'number'
                      | 'boolean'
                      | 'time'
                      | 'date'
                      | 'dateTime'
                      | 'enum'
                      | undefined;
                  }[]
                | undefined;
              type?: import('../../../../dataTypes/dynamicQuery/enums').FilterType | undefined;
              and?: boolean | undefined;
              valueType?:
                | 'string'
                | 'number'
                | 'boolean'
                | 'time'
                | 'date'
                | 'dateTime'
                | 'enum'
                | undefined;
            }
          | {
              value?: any;
              type?: import('../../../../dataTypes/dynamicQuery/enums').FilterType | undefined;
              and?: boolean | undefined;
              valueType?:
                | 'string'
                | 'number'
                | 'boolean'
                | 'time'
                | 'date'
                | 'dateTime'
                | 'enum'
                | undefined;
            }
          | undefined;
      }) => void;
      resetFilters: (filters?: IFilter[]) => void;
      FilterForm?: undefined;
    };
export default _default;
