function _typeof(obj) {
  '@babel/helpers - typeof';
  return (
    (_typeof =
      'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
        ? function (obj) {
            return typeof obj;
          }
        : function (obj) {
            return obj &&
              'function' == typeof Symbol &&
              obj.constructor === Symbol &&
              obj !== Symbol.prototype
              ? 'symbol'
              : typeof obj;
          }),
    _typeof(obj)
  );
}
var _excluded = ['hideInFilter'];
function _extends() {
  _extends = Object.assign
    ? Object.assign.bind()
    : function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
  return _extends.apply(this, arguments);
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly &&
      (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })),
      keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2
      ? ownKeys(Object(source), !0).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        })
      : Object.getOwnPropertyDescriptors
      ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))
      : ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true,
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, 'string');
  return _typeof(key) === 'symbol' ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== 'object' || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || 'default');
    if (_typeof(res) !== 'object') return res;
    throw new TypeError('@@toPrimitive must return a primitive value.');
  }
  return (hint === 'string' ? String : Number)(input);
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
function _slicedToArray(arr, i) {
  return (
    _arrayWithHoles(arr) ||
    _iterableToArrayLimit(arr, i) ||
    _unsupportedIterableToArray(arr, i) ||
    _nonIterableRest()
  );
}
function _nonIterableRest() {
  throw new TypeError(
    'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
  );
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === 'string') return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === 'Object' && o.constructor) n = o.constructor.name;
  if (n === 'Map' || n === 'Set') return Array.from(o);
  if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  var _i =
    null == arr
      ? null
      : ('undefined' != typeof Symbol && arr[Symbol.iterator]) || arr['@@iterator'];
  if (null != _i) {
    var _s,
      _e,
      _x,
      _r,
      _arr = [],
      _n = !0,
      _d = !1;
    try {
      if (((_x = (_i = _i.call(arr)).next), 0 === i)) {
        if (Object(_i) !== _i) return;
        _n = !1;
      } else
        for (
          ;
          !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i);
          _n = !0
        );
    } catch (err) {
      (_d = !0), (_e = err);
    } finally {
      try {
        if (!_n && null != _i.return && ((_r = _i.return()), Object(_r) !== _r)) return;
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
import ProForm, { ProFormField } from '@ant-design/pro-form';
import { Card } from 'antd';
import { useForm } from 'antd/es/form/Form';
import Form from 'antd/lib/form/Form';
import React from 'react';
import { enumToListItem } from '../../../../utils/objectUtils';
import { genColumnTitle, genFieldName } from '../../ProTable/utils';
import FilterDatePicker from '../FilterItem/FilterDatePicker';
import FilterDateRangePicker from '../FilterItem/FilterDateRangePicker';
import FilterForm from '../FilterItem/FilterForm';
import FilterHidden from '../FilterItem/FilterHidden';
import FilterNumber from '../FilterItem/FilterNumber';
import FilterNumberRange from '../FilterItem/FilterNumberRange';
import FilterSelect from '../FilterItem/FilterSelect';
import FilterText from '../FilterItem/FilterText';
import { convertToFilterFormData, convertToFilters } from '../FilterItem/utils';
export default (function (_ref) {
  var columnsFlattened = _ref.columnsFlattened,
    filterProps = _ref.filterProps,
    loading = _ref.loading,
    _onSearch = _ref.onSearch;
  if (filterProps !== null && filterProps !== void 0 && filterProps.disabled)
    return {
      FilterForm: /*#__PURE__*/ React.createElement(React.Fragment, null),
    };
  var _useForm = useForm(),
    _useForm2 = _slicedToArray(_useForm, 1),
    form = _useForm2[0];
  var columns = columnsFlattened
    .map(function (_ref2) {
      var _ref2$hideInFilter = _ref2.hideInFilter,
        hideInFilter =
          _ref2$hideInFilter === void 0
            ? filterProps === null || filterProps === void 0
              ? void 0
              : filterProps.defaultHideInFilter
            : _ref2$hideInFilter,
        col = _objectWithoutProperties(_ref2, _excluded);
      return _objectSpread(
        {
          hideInFilter: hideInFilter,
        },
        col,
      );
    })
    .filter(function (col) {
      return !col.hideInFilter;
    });
  var filterColumns = columns
    .filter(function (col) {
      var _col$filterProps;
      return !(
        (_col$filterProps = col.filterProps) !== null &&
        _col$filterProps !== void 0 &&
        _col$filterProps.renderInHidden
      );
    })
    .sort(function (x, y) {
      var _x$filterProps$order, _x$filterProps, _y$filterProps$order, _y$filterProps;
      return (
        ((_x$filterProps$order =
          (_x$filterProps = x.filterProps) === null || _x$filterProps === void 0
            ? void 0
            : _x$filterProps.order) !== null && _x$filterProps$order !== void 0
          ? _x$filterProps$order
          : 0) -
        ((_y$filterProps$order =
          (_y$filterProps = y.filterProps) === null || _y$filterProps === void 0
            ? void 0
            : _y$filterProps.order) !== null && _y$filterProps$order !== void 0
          ? _y$filterProps$order
          : 0)
      );
    });
  var hiddenFilters = columns.filter(function (col) {
    var _col$filterProps2;
    return (_col$filterProps2 = col.filterProps) === null || _col$filterProps2 === void 0
      ? void 0
      : _col$filterProps2.renderInHidden;
  });
  var getFilterItemProps = function getFilterItemProps(col) {
    var _col$filterProps3, _col$filterProps4, _col$filterProps5, _col$filterProps6;
    var name =
      (col === null || col === void 0
        ? void 0
        : (_col$filterProps3 = col.filterProps) === null || _col$filterProps3 === void 0
        ? void 0
        : _col$filterProps3.path) || genFieldName(col.dataIndex);
    var showFilterType =
      (_col$filterProps4 = col.filterProps) === null || _col$filterProps4 === void 0
        ? void 0
        : _col$filterProps4.showFilterType;
    return {
      name: name,
      showFilterType: showFilterType,
      type:
        (_col$filterProps5 = col.filterProps) === null || _col$filterProps5 === void 0
          ? void 0
          : _col$filterProps5.defaultType,
      defaultValue:
        (_col$filterProps6 = col.filterProps) === null || _col$filterProps6 === void 0
          ? void 0
          : _col$filterProps6.defaultValue,
    };
  };
  var getFilters = function getFilters() {
    return convertToFilters(form.getFieldsValue());
  };
  var resetFilters = function resetFilters(filters) {
    return form.setFieldsValue(
      _objectSpread({}, convertToFilterFormData(form.getFieldsValue(), filters)),
    );
  };
  var renderItems = function renderItems() {
    return filterProps !== null && filterProps !== void 0 && filterProps.render
      ? filterProps.render().props.children
      : filterColumns.map(function (col) {
          var _col$filterProps7,
            _col$filterProps9,
            _col$filterProps10,
            _col$filterProps11,
            _col$filterProps12;
          var _col$key = col.key,
            key = _col$key === void 0 ? '' : _col$key;
          var filterItemProps = _objectSpread(
            _objectSpread({}, getFilterItemProps(col)),
            {},
            {
              label: genColumnTitle(col.title),
            },
          );
          if (
            (_col$filterProps7 = col.filterProps) !== null &&
            _col$filterProps7 !== void 0 &&
            _col$filterProps7.render
          ) {
            var _col$filterProps$colS, _col$filterProps8, _col$filterProps8$ren;
            if (
              ((_col$filterProps$colS = col.filterProps.colSize) !== null &&
              _col$filterProps$colS !== void 0
                ? _col$filterProps$colS
                : 1) > 1
            )
              return /*#__PURE__*/ React.createElement(
                ProFormField,
                {
                  noStyle: true,
                  key: key,
                  colSize: col.filterProps.colSize,
                },
                col.filterProps.render(
                  _objectSpread(
                    _objectSpread({}, filterItemProps),
                    {},
                    {
                      label: genColumnTitle(filterItemProps.label),
                      key: key,
                    },
                  ),
                ),
              );
            return /*#__PURE__*/ React.createElement(
              ProForm.Item,
              {
                noStyle: true,
                key: key,
              },
              (_col$filterProps8 = col.filterProps) === null || _col$filterProps8 === void 0
                ? void 0
                : (_col$filterProps8$ren = _col$filterProps8.render) === null ||
                  _col$filterProps8$ren === void 0
                ? void 0
                : _col$filterProps8$ren.call(
                    _col$filterProps8,
                    _objectSpread(
                      _objectSpread({}, filterItemProps),
                      {},
                      {
                        key: key,
                      },
                    ),
                  ),
            );
          }
          switch (col.valueType) {
            case 'number':
              return /*#__PURE__*/ React.createElement(
                ProForm.Item,
                {
                  noStyle: true,
                  key: key,
                },
                (_col$filterProps9 = col.filterProps) !== null &&
                  _col$filterProps9 !== void 0 &&
                  _col$filterProps9.isComposite
                  ? /*#__PURE__*/ React.createElement(
                      FilterNumberRange,
                      _objectSpread({}, filterItemProps),
                    )
                  : /*#__PURE__*/ React.createElement(
                      FilterNumber,
                      _objectSpread({}, filterItemProps),
                    ),
              );
            case 'date':
              return /*#__PURE__*/ React.createElement(
                ProForm.Item,
                {
                  noStyle: true,
                  key: key,
                },
                (_col$filterProps10 = col.filterProps) !== null &&
                  _col$filterProps10 !== void 0 &&
                  _col$filterProps10.isComposite
                  ? /*#__PURE__*/ React.createElement(
                      FilterDateRangePicker,
                      _objectSpread(
                        _objectSpread({}, filterItemProps),
                        {},
                        {
                          mode: 'date',
                        },
                      ),
                    )
                  : /*#__PURE__*/ React.createElement(
                      FilterDatePicker,
                      _objectSpread(
                        _objectSpread({}, filterItemProps),
                        {},
                        {
                          mode: 'date',
                        },
                      ),
                    ),
              );
            case 'time':
              return /*#__PURE__*/ React.createElement(
                ProForm.Item,
                {
                  noStyle: true,
                  key: key,
                },
                (_col$filterProps11 = col.filterProps) !== null &&
                  _col$filterProps11 !== void 0 &&
                  _col$filterProps11.isComposite
                  ? /*#__PURE__*/ React.createElement(
                      FilterDateRangePicker,
                      _objectSpread(
                        _objectSpread({}, filterItemProps),
                        {},
                        {
                          mode: 'time',
                        },
                      ),
                    )
                  : /*#__PURE__*/ React.createElement(
                      FilterDatePicker,
                      _objectSpread(
                        _objectSpread({}, filterItemProps),
                        {},
                        {
                          mode: 'time',
                        },
                      ),
                    ),
              );
            case 'dateTime':
              return /*#__PURE__*/ React.createElement(
                ProForm.Item,
                {
                  noStyle: true,
                  key: key,
                },
                (_col$filterProps12 = col.filterProps) !== null &&
                  _col$filterProps12 !== void 0 &&
                  _col$filterProps12.isComposite
                  ? /*#__PURE__*/ React.createElement(
                      FilterDateRangePicker,
                      _objectSpread(
                        _objectSpread({}, filterItemProps),
                        {},
                        {
                          mode: 'dateTime',
                        },
                      ),
                    )
                  : /*#__PURE__*/ React.createElement(
                      FilterDatePicker,
                      _objectSpread(
                        _objectSpread({}, filterItemProps),
                        {},
                        {
                          mode: 'dateTime',
                        },
                      ),
                    ),
              );
            case 'enum':
              return /*#__PURE__*/ React.createElement(
                ProForm.Item,
                {
                  noStyle: true,
                  key: key,
                },
                /*#__PURE__*/ React.createElement(
                  FilterSelect,
                  _objectSpread(
                    _objectSpread({}, filterItemProps),
                    {},
                    {
                      options: enumToListItem(col.enumType),
                    },
                  ),
                ),
              );
            case 'boolean':
              return /*#__PURE__*/ React.createElement(
                ProForm.Item,
                {
                  noStyle: true,
                  key: key,
                },
                /*#__PURE__*/ React.createElement(
                  FilterSelect,
                  _objectSpread(
                    _objectSpread({}, filterItemProps),
                    {},
                    {
                      options: [
                        {
                          text: '是',
                          value: 'true',
                        },
                        {
                          text: '否',
                          value: 'false',
                        },
                      ],
                    },
                  ),
                ),
              );
            default:
              return /*#__PURE__*/ React.createElement(
                ProForm.Item,
                {
                  noStyle: true,
                  key: key,
                },
                /*#__PURE__*/ React.createElement(FilterText, filterItemProps),
              );
          }
        });
  };
  var render = function render() {
    var _filterProps$renderHi, _filterProps$extraRen;
    return /*#__PURE__*/ React.createElement(
      Card,
      {
        style: _objectSpread(
          _objectSpread(
            {},
            filterProps !== null && filterProps !== void 0 && filterProps.hide
              ? {
                  display: 'none',
                }
              : {},
          ),
          {},
          {
            marginBottom: 10,
          },
        ),
      },
      (hiddenFilters.length ||
        (filterProps === null || filterProps === void 0 ? void 0 : filterProps.renderHidden)) &&
        /*#__PURE__*/ React.createElement(
          Form,
          {
            form: form,
            style: {
              display: 'none',
            },
          },
          hiddenFilters.map(function (col) {
            return /*#__PURE__*/ React.createElement(
              FilterHidden,
              _extends({}, getFilterItemProps(col), {
                key: col.key,
              }),
            );
          }),
          filterProps === null || filterProps === void 0
            ? void 0
            : (_filterProps$renderHi = filterProps.renderHidden) === null ||
              _filterProps$renderHi === void 0
            ? void 0
            : _filterProps$renderHi.call(filterProps),
        ),
      /*#__PURE__*/ React.createElement(
        FilterForm,
        {
          form: form,
          loading: loading,
          onSearch: function onSearch(fs, isReset) {
            var _filterProps$onReset, _filterProps$onSearch;
            if (isReset)
              filterProps === null || filterProps === void 0
                ? void 0
                : (_filterProps$onReset = filterProps.onReset) === null ||
                  _filterProps$onReset === void 0
                ? void 0
                : _filterProps$onReset.call(filterProps);
            else
              filterProps === null || filterProps === void 0
                ? void 0
                : (_filterProps$onSearch = filterProps.onSearch) === null ||
                  _filterProps$onSearch === void 0
                ? void 0
                : _filterProps$onSearch.call(filterProps);
            return _onSearch(fs);
          },
        },
        renderItems(),
        filterProps === null || filterProps === void 0
          ? void 0
          : (_filterProps$extraRen = filterProps.extraRender) === null ||
            _filterProps$extraRen === void 0
          ? void 0
          : _filterProps$extraRen.call(filterProps),
      ),
    );
  };
  return {
    render: render,
    getFilters: getFilters,
    setFilter: form.setFieldsValue,
    resetFilters: resetFilters,
  };
});
