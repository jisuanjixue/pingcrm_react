function _typeof(obj) {
  '@babel/helpers - typeof';
  return (
    (_typeof =
      'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
        ? function (obj) {
            return typeof obj;
          }
        : function (obj) {
            return obj &&
              'function' == typeof Symbol &&
              obj.constructor === Symbol &&
              obj !== Symbol.prototype
              ? 'symbol'
              : typeof obj;
          }),
    _typeof(obj)
  );
}
function _slicedToArray(arr, i) {
  return (
    _arrayWithHoles(arr) ||
    _iterableToArrayLimit(arr, i) ||
    _unsupportedIterableToArray(arr, i) ||
    _nonIterableRest()
  );
}
function _nonIterableRest() {
  throw new TypeError(
    'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
  );
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === 'string') return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === 'Object' && o.constructor) n = o.constructor.name;
  if (n === 'Map' || n === 'Set') return Array.from(o);
  if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  var _i =
    null == arr
      ? null
      : ('undefined' != typeof Symbol && arr[Symbol.iterator]) || arr['@@iterator'];
  if (null != _i) {
    var _s,
      _e,
      _x,
      _r,
      _arr = [],
      _n = !0,
      _d = !1;
    try {
      if (((_x = (_i = _i.call(arr)).next), 0 === i)) {
        if (Object(_i) !== _i) return;
        _n = !1;
      } else
        for (
          ;
          !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i);
          _n = !0
        );
    } catch (err) {
      (_d = !0), (_e = err);
    } finally {
      try {
        if (!_n && null != _i.return && ((_r = _i.return()), Object(_r) !== _r)) return;
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
import { useSafeState } from 'ahooks';
import { hasKey } from '../../../../utils/objectUtils';
import { genFieldName } from '../../ProTable/utils';
export default (function (_ref) {
  var columnsFlattened = _ref.columnsFlattened;
  var _useSafeState = useSafeState(
      columnsFlattened
        .filter(function (col) {
          if (_typeof(col.sorterProps) === 'object') {
            return hasKey(col.sorterProps, 'defaultValue');
          }
          return false;
        })
        .map(function (col) {
          return {
            columnKey: col.key,
            column: col,
            order: col.sorterProps.defaultValue,
          };
        }),
    ),
    _useSafeState2 = _slicedToArray(_useSafeState, 2),
    result = _useSafeState2[0],
    setResult = _useSafeState2[1];
  var convertToSorter = function convertToSorter(sorter) {
    var _sorterProps$name;
    if (!sorter.order) return undefined;
    var column = sorter.column;
    if (!column) return undefined;
    var path = genFieldName(column.dataIndex);
    var sorterProps = column.sorterProps;
    if (_typeof(sorterProps) === 'object')
      path =
        (_sorterProps$name = sorterProps.name) !== null && _sorterProps$name !== void 0
          ? _sorterProps$name
          : path;
    return {
      path: path,
      ascending: sorter.order === 'ascend',
    };
  };
  var getSorters = function getSorters(value) {
    if (!value) return [];
    var values = value instanceof Array ? value : [value];
    return values
      .map(function (item) {
        return convertToSorter(item);
      })
      .filter(function (s) {
        return !!s;
      })
      .map(function (s) {
        return s;
      });
  };
  var setSorters = function setSorters(sorter) {
    if (sorter instanceof Array) {
      setResult(sorter);
    } else if (sorter !== null && sorter !== void 0 && sorter.column) {
      setResult([sorter]);
    } else {
      setResult(undefined);
    }
  };
  return {
    sorterResult: result,
    getSorters: getSorters,
    setSorters: setSorters,
  };
});
