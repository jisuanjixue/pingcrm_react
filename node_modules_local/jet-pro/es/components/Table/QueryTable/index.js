function _regeneratorRuntime() {
  'use strict';
  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime =
    function _regeneratorRuntime() {
      return exports;
    };
  var exports = {},
    Op = Object.prototype,
    hasOwn = Op.hasOwnProperty,
    defineProperty =
      Object.defineProperty ||
      function (obj, key, desc) {
        obj[key] = desc.value;
      },
    $Symbol = 'function' == typeof Symbol ? Symbol : {},
    iteratorSymbol = $Symbol.iterator || '@@iterator',
    asyncIteratorSymbol = $Symbol.asyncIterator || '@@asyncIterator',
    toStringTagSymbol = $Symbol.toStringTag || '@@toStringTag';
  function define(obj, key, value) {
    return (
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: !0,
        configurable: !0,
        writable: !0,
      }),
      obj[key]
    );
  }
  try {
    define({}, '');
  } catch (err) {
    define = function define(obj, key, value) {
      return (obj[key] = value);
    };
  }
  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
      generator = Object.create(protoGenerator.prototype),
      context = new Context(tryLocsList || []);
    return (
      defineProperty(generator, '_invoke', { value: makeInvokeMethod(innerFn, self, context) }),
      generator
    );
  }
  function tryCatch(fn, obj, arg) {
    try {
      return { type: 'normal', arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: 'throw', arg: err };
    }
  }
  exports.wrap = wrap;
  var ContinueSentinel = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
    NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype &&
    NativeIteratorPrototype !== Op &&
    hasOwn.call(NativeIteratorPrototype, iteratorSymbol) &&
    (IteratorPrototype = NativeIteratorPrototype);
  var Gp =
    (GeneratorFunctionPrototype.prototype =
    Generator.prototype =
      Object.create(IteratorPrototype));
  function defineIteratorMethods(prototype) {
    ['next', 'throw', 'return'].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }
  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if ('throw' !== record.type) {
        var result = record.arg,
          value = result.value;
        return value && 'object' == _typeof(value) && hasOwn.call(value, '__await')
          ? PromiseImpl.resolve(value.__await).then(
              function (value) {
                invoke('next', value, resolve, reject);
              },
              function (err) {
                invoke('throw', err, resolve, reject);
              },
            )
          : PromiseImpl.resolve(value).then(
              function (unwrapped) {
                (result.value = unwrapped), resolve(result);
              },
              function (error) {
                return invoke('throw', error, resolve, reject);
              },
            );
      }
      reject(record.arg);
    }
    var previousPromise;
    defineProperty(this, '_invoke', {
      value: function value(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
        return (previousPromise = previousPromise
          ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg)
          : callInvokeWithMethodAndArg());
      },
    });
  }
  function makeInvokeMethod(innerFn, self, context) {
    var state = 'suspendedStart';
    return function (method, arg) {
      if ('executing' === state) throw new Error('Generator is already running');
      if ('completed' === state) {
        if ('throw' === method) throw arg;
        return doneResult();
      }
      for (context.method = method, context.arg = arg; ; ) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }
        if ('next' === context.method) context.sent = context._sent = context.arg;
        else if ('throw' === context.method) {
          if ('suspendedStart' === state) throw ((state = 'completed'), context.arg);
          context.dispatchException(context.arg);
        } else 'return' === context.method && context.abrupt('return', context.arg);
        state = 'executing';
        var record = tryCatch(innerFn, self, context);
        if ('normal' === record.type) {
          if (
            ((state = context.done ? 'completed' : 'suspendedYield'),
            record.arg === ContinueSentinel)
          )
            continue;
          return { value: record.arg, done: context.done };
        }
        'throw' === record.type &&
          ((state = 'completed'), (context.method = 'throw'), (context.arg = record.arg));
      }
    };
  }
  function maybeInvokeDelegate(delegate, context) {
    var methodName = context.method,
      method = delegate.iterator[methodName];
    if (undefined === method)
      return (
        (context.delegate = null),
        ('throw' === methodName &&
          delegate.iterator.return &&
          ((context.method = 'return'),
          (context.arg = undefined),
          maybeInvokeDelegate(delegate, context),
          'throw' === context.method)) ||
          ('return' !== methodName &&
            ((context.method = 'throw'),
            (context.arg = new TypeError(
              "The iterator does not provide a '" + methodName + "' method",
            )))),
        ContinueSentinel
      );
    var record = tryCatch(method, delegate.iterator, context.arg);
    if ('throw' === record.type)
      return (
        (context.method = 'throw'),
        (context.arg = record.arg),
        (context.delegate = null),
        ContinueSentinel
      );
    var info = record.arg;
    return info
      ? info.done
        ? ((context[delegate.resultName] = info.value),
          (context.next = delegate.nextLoc),
          'return' !== context.method && ((context.method = 'next'), (context.arg = undefined)),
          (context.delegate = null),
          ContinueSentinel)
        : info
      : ((context.method = 'throw'),
        (context.arg = new TypeError('iterator result is not an object')),
        (context.delegate = null),
        ContinueSentinel);
  }
  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };
    1 in locs && (entry.catchLoc = locs[1]),
      2 in locs && ((entry.finallyLoc = locs[2]), (entry.afterLoc = locs[3])),
      this.tryEntries.push(entry);
  }
  function resetTryEntry(entry) {
    var record = entry.completion || {};
    (record.type = 'normal'), delete record.arg, (entry.completion = record);
  }
  function Context(tryLocsList) {
    (this.tryEntries = [{ tryLoc: 'root' }]),
      tryLocsList.forEach(pushTryEntry, this),
      this.reset(!0);
  }
  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ('function' == typeof iterable.next) return iterable;
      if (!isNaN(iterable.length)) {
        var i = -1,
          next = function next() {
            for (; ++i < iterable.length; )
              if (hasOwn.call(iterable, i))
                return (next.value = iterable[i]), (next.done = !1), next;
            return (next.value = undefined), (next.done = !0), next;
          };
        return (next.next = next);
      }
    }
    return { next: doneResult };
  }
  function doneResult() {
    return { value: undefined, done: !0 };
  }
  return (
    (GeneratorFunction.prototype = GeneratorFunctionPrototype),
    defineProperty(Gp, 'constructor', { value: GeneratorFunctionPrototype, configurable: !0 }),
    defineProperty(GeneratorFunctionPrototype, 'constructor', {
      value: GeneratorFunction,
      configurable: !0,
    }),
    (GeneratorFunction.displayName = define(
      GeneratorFunctionPrototype,
      toStringTagSymbol,
      'GeneratorFunction',
    )),
    (exports.isGeneratorFunction = function (genFun) {
      var ctor = 'function' == typeof genFun && genFun.constructor;
      return (
        !!ctor &&
        (ctor === GeneratorFunction || 'GeneratorFunction' === (ctor.displayName || ctor.name))
      );
    }),
    (exports.mark = function (genFun) {
      return (
        Object.setPrototypeOf
          ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype)
          : ((genFun.__proto__ = GeneratorFunctionPrototype),
            define(genFun, toStringTagSymbol, 'GeneratorFunction')),
        (genFun.prototype = Object.create(Gp)),
        genFun
      );
    }),
    (exports.awrap = function (arg) {
      return { __await: arg };
    }),
    defineIteratorMethods(AsyncIterator.prototype),
    define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
      return this;
    }),
    (exports.AsyncIterator = AsyncIterator),
    (exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      void 0 === PromiseImpl && (PromiseImpl = Promise);
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn)
        ? iter
        : iter.next().then(function (result) {
            return result.done ? result.value : iter.next();
          });
    }),
    defineIteratorMethods(Gp),
    define(Gp, toStringTagSymbol, 'Generator'),
    define(Gp, iteratorSymbol, function () {
      return this;
    }),
    define(Gp, 'toString', function () {
      return '[object Generator]';
    }),
    (exports.keys = function (val) {
      var object = Object(val),
        keys = [];
      for (var key in object) keys.push(key);
      return (
        keys.reverse(),
        function next() {
          for (; keys.length; ) {
            var key = keys.pop();
            if (key in object) return (next.value = key), (next.done = !1), next;
          }
          return (next.done = !0), next;
        }
      );
    }),
    (exports.values = values),
    (Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        if (
          ((this.prev = 0),
          (this.next = 0),
          (this.sent = this._sent = undefined),
          (this.done = !1),
          (this.delegate = null),
          (this.method = 'next'),
          (this.arg = undefined),
          this.tryEntries.forEach(resetTryEntry),
          !skipTempReset)
        )
          for (var name in this)
            't' === name.charAt(0) &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1)) &&
              (this[name] = undefined);
      },
      stop: function stop() {
        this.done = !0;
        var rootRecord = this.tryEntries[0].completion;
        if ('throw' === rootRecord.type) throw rootRecord.arg;
        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) throw exception;
        var context = this;
        function handle(loc, caught) {
          return (
            (record.type = 'throw'),
            (record.arg = exception),
            (context.next = loc),
            caught && ((context.method = 'next'), (context.arg = undefined)),
            !!caught
          );
        }
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i],
            record = entry.completion;
          if ('root' === entry.tryLoc) return handle('end');
          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, 'catchLoc'),
              hasFinally = hasOwn.call(entry, 'finallyLoc');
            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            } else {
              if (!hasFinally) throw new Error('try statement without catch or finally');
              if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (
            entry.tryLoc <= this.prev &&
            hasOwn.call(entry, 'finallyLoc') &&
            this.prev < entry.finallyLoc
          ) {
            var finallyEntry = entry;
            break;
          }
        }
        finallyEntry &&
          ('break' === type || 'continue' === type) &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc &&
          (finallyEntry = null);
        var record = finallyEntry ? finallyEntry.completion : {};
        return (
          (record.type = type),
          (record.arg = arg),
          finallyEntry
            ? ((this.method = 'next'), (this.next = finallyEntry.finallyLoc), ContinueSentinel)
            : this.complete(record)
        );
      },
      complete: function complete(record, afterLoc) {
        if ('throw' === record.type) throw record.arg;
        return (
          'break' === record.type || 'continue' === record.type
            ? (this.next = record.arg)
            : 'return' === record.type
            ? ((this.rval = this.arg = record.arg), (this.method = 'return'), (this.next = 'end'))
            : 'normal' === record.type && afterLoc && (this.next = afterLoc),
          ContinueSentinel
        );
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc)
            return (
              this.complete(entry.completion, entry.afterLoc),
              resetTryEntry(entry),
              ContinueSentinel
            );
        }
      },
      catch: function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if ('throw' === record.type) {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }
        throw new Error('illegal catch attempt');
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        return (
          (this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc,
          }),
          'next' === this.method && (this.arg = undefined),
          ContinueSentinel
        );
      },
    }),
    exports
  );
}
function _typeof(obj) {
  '@babel/helpers - typeof';
  return (
    (_typeof =
      'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
        ? function (obj) {
            return typeof obj;
          }
        : function (obj) {
            return obj &&
              'function' == typeof Symbol &&
              obj.constructor === Symbol &&
              obj !== Symbol.prototype
              ? 'symbol'
              : typeof obj;
          }),
    _typeof(obj)
  );
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err);
      }
      _next(undefined);
    });
  };
}
function _slicedToArray(arr, i) {
  return (
    _arrayWithHoles(arr) ||
    _iterableToArrayLimit(arr, i) ||
    _unsupportedIterableToArray(arr, i) ||
    _nonIterableRest()
  );
}
function _nonIterableRest() {
  throw new TypeError(
    'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
  );
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === 'string') return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === 'Object' && o.constructor) n = o.constructor.name;
  if (n === 'Map' || n === 'Set') return Array.from(o);
  if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  var _i =
    null == arr
      ? null
      : ('undefined' != typeof Symbol && arr[Symbol.iterator]) || arr['@@iterator'];
  if (null != _i) {
    var _s,
      _e,
      _x,
      _r,
      _arr = [],
      _n = !0,
      _d = !1;
    try {
      if (((_x = (_i = _i.call(arr)).next), 0 === i)) {
        if (Object(_i) !== _i) return;
        _n = !1;
      } else
        for (
          ;
          !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i);
          _n = !0
        );
    } catch (err) {
      (_d = !0), (_e = err);
    } finally {
      try {
        if (!_n && null != _i.return && ((_r = _i.return()), Object(_r) !== _r)) return;
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly &&
      (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })),
      keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2
      ? ownKeys(Object(source), !0).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        })
      : Object.getOwnPropertyDescriptors
      ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))
      : ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
  }
  return target;
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ('value' in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, 'prototype', { writable: false });
  return Constructor;
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError('Cannot call a class as a function');
  }
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true,
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, 'string');
  return _typeof(key) === 'symbol' ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== 'object' || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || 'default');
    if (_typeof(res) !== 'object') return res;
    throw new TypeError('@@toPrimitive must return a primitive value.');
  }
  return (hint === 'string' ? String : Number)(input);
}
import { useMount, useSafeState, useUpdateEffect } from 'ahooks';
import { Divider, message, Space } from 'antd';
import React, { useCallback, useRef } from 'react';
import ProTable from '../ProTable';
import { flatColumns, genColumnsKeyIfy, isGroupColumn } from '../ProTable/utils';
import DeleteButton from './DeleteButton';
import useFilterForm from './hooks/useFilterForm';
import useHistory from './hooks/useHistory';
import useSorterResult from './hooks/useSorterResult';
import { convertToSorterResult, getQueryFromLocation, getSearchFromQuery } from './utils';
var QueryData = /*#__PURE__*/ _createClass(function QueryData() {
  _classCallCheck(this, QueryData);
  _defineProperty(this, 'loading', false);
  _defineProperty(this, 'dataSource', []);
  _defineProperty(this, 'pagination', {
    current: 1,
    pageSize: 20,
    total: 0,
    showQuickJumper: true,
    showSizeChanger: true,
    showTitle: true,
    showLessItems: true,
    showTotal: function showTotal(total) {
      return '\u5171'.concat(total, '\u6761');
    },
  });
});
var resetColumns = function resetColumns(columns) {
  return columns.map(function (column) {
    if (isGroupColumn(column)) {
      var colGroup = column;
      colGroup.children = resetColumns(colGroup.children || []);
      return colGroup;
    }
    var columnNormal = column;
    var sorterProps = columnNormal.sorterProps;
    return _objectSpread(
      _objectSpread(
        {
          hide: columnNormal.isKey,
          hideInFilter: columnNormal.isKey,
        },
        column,
      ),
      sorterProps
        ? {
            sorter: {
              multiple: 1,
            },
          }
        : {},
    );
  });
};

/**
 * Query表格，只支持动态查询和排序api，基于ProTable扩展
 * @param props
 * @returns
 */
var QueryTable = function QueryTable(props) {
  var _filterForm$render,
    _props$toolbarProps,
    _props$toolbarProps2,
    _props$toolbarProps3,
    _props$toolbarProps4,
    _props$toolbarProps4$;
  var propsRefAction = props.refAction,
    propsActionColumns = props.actionColumn,
    propsPagination = props.pagination,
    queryRequest = props.queryRequest,
    _props$queryEffectUrl = props.queryEffectUrl,
    queryEffectUrl = _props$queryEffectUrl === void 0 ? true : _props$queryEffectUrl,
    deleteRequest = props.deleteRequest;
  var history = useHistory(props.history);
  var location = history.location;
  var _useSafeState = useSafeState(new QueryData()),
    _useSafeState2 = _slicedToArray(_useSafeState, 2),
    queryData = _useSafeState2[0],
    setQueryData = _useSafeState2[1];
  var propsColumns = resetColumns(genColumnsKeyIfy(props.columns));
  var columnsFlattened = flatColumns(propsColumns);
  var fetchQuery = /*#__PURE__*/ (function () {
    var _ref = _asyncToGenerator(
      /*#__PURE__*/ _regeneratorRuntime().mark(function _callee() {
        var _ref2,
          _ref2$page,
          page,
          _ref2$pageSize,
          pageSize,
          _ref2$filters,
          filters,
          _ref2$sorts,
          sorts,
          result,
          pagination,
          _args = arguments;
        return _regeneratorRuntime().wrap(
          function _callee$(_context) {
            while (1)
              switch ((_context.prev = _context.next)) {
                case 0:
                  (_ref2 = _args.length > 0 && _args[0] !== undefined ? _args[0] : {}),
                    (_ref2$page = _ref2.page),
                    (page = _ref2$page === void 0 ? 1 : _ref2$page),
                    (_ref2$pageSize = _ref2.pageSize),
                    (pageSize = _ref2$pageSize === void 0 ? 20 : _ref2$pageSize),
                    (_ref2$filters = _ref2.filters),
                    (filters = _ref2$filters === void 0 ? [] : _ref2$filters),
                    (_ref2$sorts = _ref2.sorts),
                    (sorts = _ref2$sorts === void 0 ? [] : _ref2$sorts);
                  setQueryData(
                    _objectSpread(
                      _objectSpread({}, queryData),
                      {},
                      {
                        loading: true,
                      },
                    ),
                  );
                  _context.prev = 2;
                  _context.next = 5;
                  return queryRequest({
                    page: page,
                    pageSize: pageSize,
                    filters: filters,
                    sorts: sorts,
                  });
                case 5:
                  result = _context.sent;
                  setQueryData(
                    _objectSpread(
                      _objectSpread({}, queryData),
                      {},
                      {
                        loading: false,
                      },
                    ),
                  );
                  if (result.success) {
                    _context.next = 10;
                    break;
                  }
                  message.error(result.errorMessage);
                  return _context.abrupt('return');
                case 10:
                  queryData.loading = false;
                  queryData.dataSource = result.data;
                  pagination = _objectSpread(
                    _objectSpread(
                      _objectSpread({}, queryData.pagination),
                      _typeof(propsPagination) === 'object' ? propsPagination : {},
                    ),
                    {},
                    {
                      current: page,
                      pageSize: pageSize,
                      total: result.total,
                    },
                  );
                  setQueryData(
                    _objectSpread(
                      _objectSpread({}, queryData),
                      {},
                      {
                        pagination: pagination,
                      },
                    ),
                  );
                  if (queryEffectUrl)
                    history.replace(
                      _objectSpread(
                        _objectSpread({}, location),
                        {},
                        {
                          search: getSearchFromQuery(location, {
                            page: page,
                            pageSize: pageSize,
                            filters: filters,
                            sorts: sorts,
                          }),
                        },
                      ),
                    );
                  _context.next = 21;
                  break;
                case 17:
                  _context.prev = 17;
                  _context.t0 = _context['catch'](2);
                  setQueryData(
                    _objectSpread(
                      _objectSpread({}, queryData),
                      {},
                      {
                        loading: false,
                      },
                    ),
                  );
                  message.error('出错了');
                case 21:
                case 'end':
                  return _context.stop();
              }
          },
          _callee,
          null,
          [[2, 17]],
        );
      }),
    );
    return function fetchQuery() {
      return _ref.apply(this, arguments);
    };
  })();
  var _useSorterResult = useSorterResult({
      columnsFlattened: columnsFlattened,
    }),
    sorterResult = _useSorterResult.sorterResult,
    getSorters = _useSorterResult.getSorters,
    setSorters = _useSorterResult.setSorters;
  var filterForm = useFilterForm({
    columnsFlattened: columnsFlattened,
    loading: queryData.loading,
    filterProps: props.filterProps,
    onSearch: function onSearch(filters) {
      return fetchQuery({
        page: 1,
        filters: filters,
        sorts: getSorters(sorterResult),
      });
    },
  });
  var fetchQueryWithDefault = function fetchQueryWithDefault(_ref3) {
    var _filterForm$getFilter;
    var _ref3$page = _ref3.page,
      page = _ref3$page === void 0 ? queryData.pagination.current || 1 : _ref3$page,
      _ref3$pageSize = _ref3.pageSize,
      pageSize = _ref3$pageSize === void 0 ? queryData.pagination.pageSize || 20 : _ref3$pageSize,
      _ref3$filters = _ref3.filters,
      filters =
        _ref3$filters === void 0
          ? (_filterForm$getFilter = filterForm.getFilters) === null ||
            _filterForm$getFilter === void 0
            ? void 0
            : _filterForm$getFilter.call(filterForm)
          : _ref3$filters,
      _ref3$sorts = _ref3.sorts,
      sorts = _ref3$sorts === void 0 ? getSorters(sorterResult) : _ref3$sorts;
    return fetchQuery({
      page: page,
      pageSize: pageSize,
      filters: filters,
      sorts: sorts,
    });
  };
  var reload = function reload() {
    fetchQueryWithDefault({
      page: queryData.pagination.current,
      pageSize: queryData.pagination.pageSize,
    });
  };
  var genActionColumn = useCallback(
    function () {
      if (!propsActionColumns && !deleteRequest) return undefined;
      var actionColumn = propsActionColumns || {};
      if (actionColumn.render) return actionColumn;
      actionColumn.render = function (item, index) {
        var _actionColumn$hideDel, _actionColumn$preRend, _actionColumn$postRen;
        var hideDelete =
          typeof actionColumn.hideDelete === 'function'
            ? (_actionColumn$hideDel = actionColumn.hideDelete) === null ||
              _actionColumn$hideDel === void 0
              ? void 0
              : _actionColumn$hideDel.call(actionColumn, item, index)
            : actionColumn.hideDelete;
        return /*#__PURE__*/ React.createElement(
          Space,
          null,
          (_actionColumn$preRend = actionColumn.preRender) === null ||
            _actionColumn$preRend === void 0
            ? void 0
            : _actionColumn$preRend.call(actionColumn, item, index),
          !hideDelete &&
            deleteRequest &&
            /*#__PURE__*/ React.createElement(DeleteButton, {
              deleteRequest: deleteRequest,
              id: item.id,
              onResult: function onResult(res) {
                return res.success && reload();
              },
            }),
          (_actionColumn$postRen = actionColumn.postRender) === null ||
            _actionColumn$postRen === void 0
            ? void 0
            : _actionColumn$postRen.call(actionColumn, item, index),
        );
      };
      return actionColumn;
    },
    [deleteRequest, propsActionColumns],
  );
  useMount(function () {
    var _filterForm$getFilter2, _filterForm$resetFilt;
    var defaultQueryParams = queryEffectUrl ? getQueryFromLocation(location) : {};
    if (_typeof(propsPagination) === 'object') {
      if (propsPagination.defaultCurrent) defaultQueryParams.page = propsPagination.defaultCurrent;
      if (propsPagination.defaultPageSize)
        defaultQueryParams.pageSize = propsPagination.defaultPageSize;
    }
    if (!defaultQueryParams.filters)
      defaultQueryParams.filters =
        (_filterForm$getFilter2 = filterForm.getFilters) === null ||
        _filterForm$getFilter2 === void 0
          ? void 0
          : _filterForm$getFilter2.call(filterForm);
    if (!defaultQueryParams.sorts) defaultQueryParams.sorts = getSorters(sorterResult);
    fetchQueryWithDefault(defaultQueryParams);
    (_filterForm$resetFilt = filterForm.resetFilters) === null || _filterForm$resetFilt === void 0
      ? void 0
      : _filterForm$resetFilt.call(filterForm, defaultQueryParams.filters);
    setSorters(convertToSorterResult(defaultQueryParams.sorts, columnsFlattened));
  });
  var refAction = useRef();
  useUpdateEffect(
    function () {
      if (!propsRefAction) return;
      var action;
      if (refAction.current)
        action = _objectSpread(
          _objectSpread({}, refAction.current),
          {},
          {
            search: function search() {
              return fetchQueryWithDefault({
                page: 1,
              });
            },
            getFilters: filterForm.getFilters,
            setFilter: filterForm.setFilter,
            setFilterAndSearch: function setFilterAndSearch(data) {
              var _filterForm$setFilter;
              (_filterForm$setFilter = filterForm.setFilter) === null ||
              _filterForm$setFilter === void 0
                ? void 0
                : _filterForm$setFilter.call(filterForm, data);
              fetchQueryWithDefault({
                page: 1,
              });
            },
          },
        );
      if (typeof propsRefAction === 'function') propsRefAction(action);
      else propsRefAction.current = action;
    },
    [propsRefAction, refAction.current],
  );
  return /*#__PURE__*/ React.createElement(
    React.Fragment,
    null,
    (_filterForm$render = filterForm.render) === null || _filterForm$render === void 0
      ? void 0
      : _filterForm$render.call(filterForm),
    /*#__PURE__*/ React.createElement(
      ProTable,
      _objectSpread(
        _objectSpread(
          _objectSpread(
            _objectSpread({}, props),
            {},
            {
              refAction: refAction,
              columns: propsColumns,
              actionColumn: genActionColumn(),
              sorterResult: sorterResult,
            },
            queryData,
          ),
          typeof propsPagination === 'boolean'
            ? {
                pagination: false,
              }
            : {},
        ),
        {},
        {
          onChange: function onChange(_ref4, _, sorter) {
            var current = _ref4.current,
              pageSize = _ref4.pageSize;
            setSorters(sorter);
            fetchQueryWithDefault({
              page: current,
              pageSize: pageSize,
              sorts: getSorters(sorter),
            });
          },
          toolbarProps: _objectSpread(
            _objectSpread({}, props.toolbarProps),
            {},
            {
              hideActions:
                (_props$toolbarProps = props.toolbarProps) === null ||
                _props$toolbarProps === void 0
                  ? void 0
                  : _props$toolbarProps.hideActions,
              loading: queryData.loading,
              onLoad: reload,
              extra: /*#__PURE__*/ React.createElement(
                React.Fragment,
                null,
                (_props$toolbarProps2 = props.toolbarProps) === null ||
                  _props$toolbarProps2 === void 0
                  ? void 0
                  : _props$toolbarProps2.extra,
                ((_props$toolbarProps3 = props.toolbarProps) === null ||
                _props$toolbarProps3 === void 0
                  ? void 0
                  : _props$toolbarProps3.extra) &&
                  ((_props$toolbarProps4 = props.toolbarProps) === null ||
                  _props$toolbarProps4 === void 0
                    ? void 0
                    : (_props$toolbarProps4$ = _props$toolbarProps4.hideActions) === null ||
                      _props$toolbarProps4$ === void 0
                    ? void 0
                    : _props$toolbarProps4$.length) !== 3 &&
                  /*#__PURE__*/ React.createElement(Divider, {
                    type: 'vertical',
                  }),
              ),
            },
          ),
        },
      ),
    ),
  );
};
export default QueryTable;
