function _typeof(obj) {
  '@babel/helpers - typeof';
  return (
    (_typeof =
      'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
        ? function (obj) {
            return typeof obj;
          }
        : function (obj) {
            return obj &&
              'function' == typeof Symbol &&
              obj.constructor === Symbol &&
              obj !== Symbol.prototype
              ? 'symbol'
              : typeof obj;
          }),
    _typeof(obj)
  );
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly &&
      (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })),
      keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2
      ? ownKeys(Object(source), !0).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        })
      : Object.getOwnPropertyDescriptors
      ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))
      : ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true,
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, 'string');
  return _typeof(key) === 'symbol' ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== 'object' || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || 'default');
    if (_typeof(res) !== 'object') return res;
    throw new TypeError('@@toPrimitive must return a primitive value.');
  }
  return (hint === 'string' ? String : Number)(input);
}
import qs from 'qs';
import { tryParseInt } from '../../../utils/numberUtils';
import { genFieldName } from '../ProTable/utils';
var queryParamsMap = {
  page: 'p',
  pageSize: 'ps',
  filters: 'fs',
  sorts: 'ss',
};
var parseQueryFromLocation = function parseQueryFromLocation(location) {
  var search = '';
  if (location !== null && location !== void 0 && location.search.startsWith('?'))
    search = location.search.substr(1);
  return qs.parse(search);
};
export var getQueryFromLocation = function getQueryFromLocation(location) {
  var query = parseQueryFromLocation(location);
  var page = tryParseInt(
    query === null || query === void 0 ? void 0 : query[queryParamsMap.page],
    1,
  );
  var pageSize = tryParseInt(
    query === null || query === void 0 ? void 0 : query[queryParamsMap.pageSize],
    20,
  );
  var filters;
  var sorts;
  try {
    filters = JSON.parse(
      query === null || query === void 0 ? void 0 : query[queryParamsMap.filters],
    );
  } catch (e) {
    //
  }
  try {
    sorts = JSON.parse(query === null || query === void 0 ? void 0 : query[queryParamsMap.sorts]);
  } catch (e) {
    //
  }
  return _objectSpread(
    _objectSpread({}, query),
    {},
    {
      page: page,
      pageSize: pageSize,
      filters: filters,
      sorts: sorts,
    },
  );
};
export var getSearchFromQuery = function getSearchFromQuery(location, queryParams) {
  var query = getQueryFromLocation(location);
  query[queryParamsMap.page] =
    queryParams === null || queryParams === void 0 ? void 0 : queryParams.page;
  query[queryParamsMap.pageSize] =
    queryParams === null || queryParams === void 0 ? void 0 : queryParams.pageSize;
  try {
    query[queryParamsMap.filters] = JSON.stringify(
      queryParams === null || queryParams === void 0 ? void 0 : queryParams.filters,
    );
  } catch (e) {
    //
  }
  try {
    query[queryParamsMap.sorts] = JSON.stringify(
      queryParams === null || queryParams === void 0 ? void 0 : queryParams.sorts,
    );
  } catch (e) {
    //
  }
  return qs.stringify(query);
};
export var convertToSorterResult = function convertToSorterResult(sorts, columnsFlattened) {
  var culumnsSortable =
    columnsFlattened === null || columnsFlattened === void 0
      ? void 0
      : columnsFlattened.filter(function (c) {
          return c.sorterProps;
        });
  var results = [];
  sorts === null || sorts === void 0
    ? void 0
    : sorts.forEach(function (s) {
        var col =
          culumnsSortable === null || culumnsSortable === void 0
            ? void 0
            : culumnsSortable.find(function (c) {
                var path = genFieldName(c.dataIndex);
                if (_typeof(c.sorterProps) === 'object') {
                  if (c.sorterProps.name) path = c.sorterProps.name;
                }
                return s.path === path;
              });
        if (col) {
          var order;
          if (s.ascending !== undefined) order = s.ascending ? 'ascend' : 'descend';
          results.push({
            columnKey: col.key,
            column: col,
            order: order,
          });
        }
      });
  return results;
};
