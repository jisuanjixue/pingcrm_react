import type { DefaultOptionType } from 'antd/lib/cascader';
import type { ISelectListItem } from '../dataTypes/selectListItem';
import type { ISimpleTreeNode } from '../dataTypes/treeNode';
/**
 * 【jet-pro】对象是否包含指定key
 * @param obj
 * @param key
 * @returns
 */
export declare const hasKey: (obj: any, key: string) => boolean;
/**
 * 【jet-pro】递归获取任意对象的值
 * @param obj
 * @param key key路径，字符串或数组类型。
 *            字符串类型：key用'.'连接，示例：name1.name2.index.name3
 *            数组类型：支持key和索引，示例：['name1','name2',2,'name3']
 * @returns key对应的值
 */
export declare const getObjValue: <TRes = any>(
  obj?: any,
  key?: string | (string | number)[],
) => TRes | undefined;
/**
 * 【jet-pro】任意树形结构转换成CascaderOptionType
 * @param labelField
 * @param valueField
 * @param childrenField
 * @param items
 * @returns
 */
export declare const convert2CascaderOptions: <T = any>(
  labelField: string,
  valueField: string,
  childrenField: string,
  items: T[] | undefined,
) => DefaultOptionType[];
/**
 * 【jet-pro】SimpleTreeNodes2CascaderOptions
 * @param nodes
 * @returns
 */
export declare const convertSimpleTreeNodes2CascaderOptions: (
  nodes: ISimpleTreeNode[],
) => DefaultOptionType[];
/**
 * 【jet-pro】enum转ISelectListItem
 * @param data
 * @returns
 */
export declare const enumToListItem: (data: any) => ISelectListItem[];
/**
 * 【jet-pro】拆分字符串
 * @param value 字符串
 * @param splitter 拆分符
 * @returns
 */
export declare const splitToArray: (value: string | undefined, splitter?: string) => string[];
/**
 * 判断一个对象是否是Promise
 * @param obj
 * @returns
 */
export declare const isPromise: (obj: any | undefined) => boolean;
