function _typeof(obj) {
  '@babel/helpers - typeof';
  return (
    (_typeof =
      'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
        ? function (obj) {
            return typeof obj;
          }
        : function (obj) {
            return obj &&
              'function' == typeof Symbol &&
              obj.constructor === Symbol &&
              obj !== Symbol.prototype
              ? 'symbol'
              : typeof obj;
          }),
    _typeof(obj)
  );
}
function _slicedToArray(arr, i) {
  return (
    _arrayWithHoles(arr) ||
    _iterableToArrayLimit(arr, i) ||
    _unsupportedIterableToArray(arr, i) ||
    _nonIterableRest()
  );
}
function _nonIterableRest() {
  throw new TypeError(
    'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
  );
}
function _iterableToArrayLimit(arr, i) {
  var _i =
    null == arr
      ? null
      : ('undefined' != typeof Symbol && arr[Symbol.iterator]) || arr['@@iterator'];
  if (null != _i) {
    var _s,
      _e,
      _x,
      _r,
      _arr = [],
      _n = !0,
      _d = !1;
    try {
      if (((_x = (_i = _i.call(arr)).next), 0 === i)) {
        if (Object(_i) !== _i) return;
        _n = !1;
      } else
        for (
          ;
          !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i);
          _n = !0
        );
    } catch (err) {
      (_d = !0), (_e = err);
    } finally {
      try {
        if (!_n && null != _i.return && ((_r = _i.return()), Object(_r) !== _r)) return;
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly &&
      (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })),
      keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2
      ? ownKeys(Object(source), !0).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        })
      : Object.getOwnPropertyDescriptors
      ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))
      : ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true,
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, 'string');
  return _typeof(key) === 'symbol' ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== 'object' || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || 'default');
    if (_typeof(res) !== 'object') return res;
    throw new TypeError('@@toPrimitive must return a primitive value.');
  }
  return (hint === 'string' ? String : Number)(input);
}
function _toConsumableArray(arr) {
  return (
    _arrayWithoutHoles(arr) ||
    _iterableToArray(arr) ||
    _unsupportedIterableToArray(arr) ||
    _nonIterableSpread()
  );
}
function _nonIterableSpread() {
  throw new TypeError(
    'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
  );
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === 'string') return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === 'Object' && o.constructor) n = o.constructor.name;
  if (n === 'Map' || n === 'Set') return Array.from(o);
  if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _iterableToArray(iter) {
  if (
    (typeof Symbol !== 'undefined' && iter[Symbol.iterator] != null) ||
    iter['@@iterator'] != null
  )
    return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
import { isNumber } from './numberUtils';
import { isNullOrEmpty } from './stringUtils';

/**
 * 【jet-pro】对象是否包含指定key
 * @param obj
 * @param key
 * @returns
 */
export var hasKey = function hasKey(obj, key) {
  return Object.keys(obj).some(function (k) {
    return k === key;
  });
};

/**
 * 【jet-pro】递归获取任意对象的值
 * @param obj
 * @param key key路径，字符串或数组类型。
 *            字符串类型：key用'.'连接，示例：name1.name2.index.name3
 *            数组类型：支持key和索引，示例：['name1','name2',2,'name3']
 * @returns key对应的值
 */
export var getObjValue = function getObjValue(obj, key) {
  if (!obj || !key) return undefined;
  var keys = [];
  if (key instanceof Array) keys.push.apply(keys, _toConsumableArray(key));
  else if (typeof key === 'string') keys.push.apply(keys, _toConsumableArray(key.split('.')));
  var nextObj = obj === null || obj === void 0 ? void 0 : obj[keys[0]];
  var nextKeys = keys.splice(1);
  // 最后一个key则返回值了
  if (!nextKeys.length) return nextObj;
  return getObjValue(nextObj, nextKeys);
};

/**
 * 【jet-pro】任意树形结构转换成CascaderOptionType
 * @param labelField
 * @param valueField
 * @param childrenField
 * @param items
 * @returns
 */
export var convert2CascaderOptions = function convert2CascaderOptions(
  labelField,
  valueField,
  childrenField,
  items,
) {
  if (!items || !items.length) return [];
  return items.map(function (item) {
    var children = getObjValue(item, childrenField);
    var obj = {
      value: getObjValue(item, valueField),
      label: getObjValue(item, labelField),
      data: item,
    };
    if (children !== null && children !== void 0 && children.length)
      return _objectSpread(
        _objectSpread({}, obj),
        {},
        {
          children: convert2CascaderOptions(labelField, valueField, childrenField, children),
        },
      );
    return obj;
  });
};

/**
 * 【jet-pro】SimpleTreeNodes2CascaderOptions
 * @param nodes
 * @returns
 */
export var convertSimpleTreeNodes2CascaderOptions = function convertSimpleTreeNodes2CascaderOptions(
  nodes,
) {
  return convert2CascaderOptions('text', 'value', 'children', nodes);
};

/**
 * 【jet-pro】enum转ISelectListItem
 * @param data
 * @returns
 */
export var enumToListItem = function enumToListItem(data) {
  return Object.entries(data)
    .filter(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
        value = _ref2[1];
      return isNumber(value);
    })
    .map(function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
        text = _ref4[0],
        value = _ref4[1];
      return {
        text: text,
        value: value,
      };
    });
};

/**
 * 【jet-pro】拆分字符串
 * @param value 字符串
 * @param splitter 拆分符
 * @returns
 */
export var splitToArray = function splitToArray(value) {
  var splitter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';
  if (isNullOrEmpty(value)) return [];
  return (value === null || value === void 0 ? void 0 : value.split(splitter)) || [];
};

/**
 * 判断一个对象是否是Promise
 * @param obj
 * @returns
 */
export var isPromise = function isPromise(obj) {
  return (
    !!obj &&
    ((_typeof(obj) === 'object' && typeof obj.then === 'function') || typeof obj === 'function')
  );
};
