function _toConsumableArray(arr) {
  return (
    _arrayWithoutHoles(arr) ||
    _iterableToArray(arr) ||
    _unsupportedIterableToArray(arr) ||
    _nonIterableSpread()
  );
}
function _nonIterableSpread() {
  throw new TypeError(
    'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
  );
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === 'string') return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === 'Object' && o.constructor) n = o.constructor.name;
  if (n === 'Map' || n === 'Set') return Array.from(o);
  if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _iterableToArray(iter) {
  if (
    (typeof Symbol !== 'undefined' && iter[Symbol.iterator] != null) ||
    iter['@@iterator'] != null
  )
    return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
export var idcardValidator = function idcardValidator() {
  return {
    validator: function validator(rule, value) {
      if (!value) {
        return Promise.resolve();
      }
      var errorMessage = '身份证号不合法';
      if (value.length !== 18) {
        return Promise.reject(errorMessage);
      }
      var reg =
        /^(^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$)|(^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])((\d{4})|\d{3}[Xx])$)$/;
      if (!reg.test(value)) {
        return Promise.reject(errorMessage);
      }

      // 将前17位加权因子保存在数组里
      // new Array()
      var idCardWi = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];

      // 这是除以11后，可能产生的11位余数、验证码，也保存成数组
      var idCardY = [1, 0, 10, 9, 8, 7, 6, 5, 4, 3, 2];
      // 用来保存前17位各自乖以加权因子后的总和
      var idCardWiSum = 0;
      for (var i = 0; i < 17; i += 1) {
        idCardWiSum += value.substring(i, i + 1) * idCardWi[i];
      }
      // 计算出校验码所在数组的位置
      var idCardMod = idCardWiSum % 11;
      // 得到最后一位身份证号码
      var idCardLast = value.substring(17);

      // 如果等于2，则说明校验码是10，身份证号码最后一位应该是X
      if (idCardMod === 2) {
        if (idCardLast === 'X' || idCardLast === 'x') {
          return Promise.resolve();
        }
        return Promise.reject(errorMessage);
      }

      // 用计算出的验证码与最后一位身份证号码匹配，如果一致，说明通过，否则是无效的身份证号码
      if (idCardLast === idCardY[idCardMod].toString()) {
        return Promise.resolve();
      }
      return Promise.reject(errorMessage);
    },
  };
};
export var requriedRule = function requriedRule(required) {
  var defaultMessage =
    arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '不能为空';
  var requriedMessage;
  if (required) {
    requriedMessage = defaultMessage;
    if (typeof required === 'string') requriedMessage = required;
  }
  return {
    required: !!requriedMessage,
    message: requriedMessage,
  };
};
export var genFormItemRules = function genFormItemRules(required) {
  var defaultMessage =
    arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '不能为空';
  var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  return [requriedRule(required, defaultMessage)].concat(_toConsumableArray(rules));
};
