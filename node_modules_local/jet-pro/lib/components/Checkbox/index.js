var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (
  (target = mod != null ? __create(__getProtoOf(mod)) : {}),
  __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule
      ? __defProp(target, 'default', { value: mod, enumerable: true })
      : target,
    mod,
  )
);
var __toCommonJS = (mod) => __copyProps(__defProp({}, '__esModule', { value: true }), mod);

// src/components/Checkbox/index.tsx
var Checkbox_exports = {};
__export(Checkbox_exports, {
  default: () => Checkbox_default,
});
module.exports = __toCommonJS(Checkbox_exports);
var import_react = __toESM(require('react'));
var import_antd = require('antd');
var import_ahooks = require('ahooks');
var Checkbox_default = ({ options, fieldNams = { label: 'text', value: 'value' }, ...props }) => {
  const mode = (0, import_react.useMemo)(() => props.mode, [props.mode]);
  const [value, setValue] = (0, import_ahooks.useControllableValue)(props);
  const checkedValue = (0, import_react.useMemo)(() => {
    let checkValue;
    if (mode === 'single') {
      checkValue = [];
      if (![void 0, null].some((val) => val === value)) {
        checkValue.push(value);
      }
    } else {
      checkValue = value;
    }
    return checkValue;
  }, [mode, value]);
  const onChange = (values) => {
    let val;
    if (mode === 'single') {
      [val] =
        values.filter(
          (v) => !(checkedValue == null ? void 0 : checkedValue.some((v1) => v1 === v)),
        ) || [];
    } else {
      val = values;
    }
    setValue(val);
  };
  return /* @__PURE__ */ import_react.default.createElement(import_antd.Checkbox.Group, {
    options:
      options == null
        ? void 0
        : options.map((item) => ({
            label: item[fieldNams.label],
            value: item[fieldNams.value],
          })),
    value: checkedValue,
    onChange,
  });
};
