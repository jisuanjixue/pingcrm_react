var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, '__esModule', { value: true }), mod);

// src/components/DebounceInput/useInputValue.ts
var useInputValue_exports = {};
__export(useInputValue_exports, {
  default: () => useInputValue_default,
});
module.exports = __toCommonJS(useInputValue_exports);
var import_ahooks = require('ahooks');
var import_react = require('react');
var useInputValue = (props) => {
  const [value, setInputValue] = (0, import_ahooks.useSafeState)();
  const [propsValue, propsOnChange] = (0, import_ahooks.useControllableValue)(props);
  const { run: onChangeDebounce } = (0, import_ahooks.useDebounceFn)(propsOnChange, { wait: 500 });
  const onChange = (e) => {
    e.persist();
    setInputValue(e.target.value);
    onChangeDebounce(e);
  };
  (0, import_react.useEffect)(() => {
    let val = propsValue;
    if (val && typeof val !== 'string') val = propsValue.target.value;
    setInputValue(val);
  }, [propsValue]);
  return { value, onChange };
};
var useInputValue_default = useInputValue;
