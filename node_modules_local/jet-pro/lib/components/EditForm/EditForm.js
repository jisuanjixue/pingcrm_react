var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (
  (target = mod != null ? __create(__getProtoOf(mod)) : {}),
  __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule
      ? __defProp(target, 'default', { value: mod, enumerable: true })
      : target,
    mod,
  )
);
var __toCommonJS = (mod) => __copyProps(__defProp({}, '__esModule', { value: true }), mod);

// src/components/EditForm/EditForm.tsx
var EditForm_exports = {};
__export(EditForm_exports, {
  default: () => EditForm_default,
});
module.exports = __toCommonJS(EditForm_exports);
var import_pro_layout = require('@ant-design/pro-layout');
var import_ahooks = require('ahooks');
var import_antd = require('antd');
var import_react = __toESM(require('react'));
var import_hooks = require('../../hooks');
var import_asyncUtils = require('../../utils/asyncUtils');
var import_index = require('./index.less');
var EditForm_default = ({
  encType,
  children,
  footerProps,
  footer = true,
  footerExtra,
  refForm,
  ...props
}) => {
  var _a, _b, _c;
  const form = import_antd.Form.useForm()[0];
  const [detail, setDetail] = (0, import_ahooks.useSafeState)();
  const [loadingDetail, setLoadingDetail] = (0, import_ahooks.useSafeState)();
  const [loadingSubmit, setLoadingSubmit] = (0, import_ahooks.useSafeState)();
  const onSubmit = async () => {
    var _a2;
    setLoadingSubmit(true);
    let values;
    try {
      values = await form.validateFields();
    } catch (e) {
      setLoadingSubmit(false);
      import_antd.message.error('表单校验失败，请检查');
      return;
    }
    await ((_a2 = props.onSubmit) == null ? void 0 : _a2.call(props, values));
    await (0, import_asyncUtils.delay)(500);
    setLoadingSubmit(false);
  };
  const initDetail = async () => {
    var _a2;
    setLoadingDetail(true);
    await (0, import_asyncUtils.delay)(500);
    setDetail(await ((_a2 = props.initDetail) == null ? void 0 : _a2.call(props)));
    setLoadingDetail(false);
  };
  (0, import_hooks.useMountUnmount)({
    mount: () => {
      if (refForm) refForm.current = form;
      initDetail();
    },
    unmount: () => {
      if (refForm) refForm.current = void 0;
    },
  });
  return /* @__PURE__ */ import_react.default.createElement(
    import_antd.Card,
    { loading: loadingDetail, size: 'small', bordered: false },
    /* @__PURE__ */ import_react.default.createElement(
      import_antd.Form,
      {
        ...props,
        layout: 'horizontal',
        ...{ form, initialValues: detail, encType },
        className: 'form-container',
      },
      children,
    ),
    footer && typeof footer === 'object' && footer,
    footer &&
      typeof footer === 'boolean' &&
      /* @__PURE__ */ import_react.default.createElement(
        import_pro_layout.FooterToolbar,
        null,
        /* @__PURE__ */ import_react.default.createElement(
          import_antd.Space,
          null,
          footerExtra,
          /* @__PURE__ */ import_react.default.createElement(
            import_antd.Button,
            { onClick: props.onCancel, loading: loadingSubmit },
            ((_a = footerProps == null ? void 0 : footerProps.cancelProps) == null
              ? void 0
              : _a.text) || '取消',
          ),
          /* @__PURE__ */ import_react.default.createElement(import_antd.Divider, {
            type: 'vertical',
          }),
          /* @__PURE__ */ import_react.default.createElement(
            import_antd.Button,
            { onClick: () => form.resetFields(), loading: loadingSubmit },
            ((_b = footerProps == null ? void 0 : footerProps.resetProps) == null
              ? void 0
              : _b.text) || '重置',
          ),
          /* @__PURE__ */ import_react.default.createElement(
            import_antd.Button,
            { type: 'primary', onClick: onSubmit, loading: loadingSubmit },
            ((_c = footerProps == null ? void 0 : footerProps.submitProps) == null
              ? void 0
              : _c.text) || '提交',
          ),
        ),
      ),
  );
};
