import type { ReactNode } from 'react';
import type { IEditFormItemProps } from './interface';
export declare const getFormItemRequired: (
  required: boolean | string | undefined,
  tip: string,
) => string | false | undefined;
export declare const getLabelText: (label: ReactNode) => string | undefined;
export declare const genFormItemProps: ({ required, rules, ...props }: IEditFormItemProps<any>) => {
  rules: import('antd').FormRule[];
  label?: ReactNode;
  style?: import('react').CSSProperties | undefined;
  hidden?: boolean | undefined;
  status?: '' | 'error' | 'warning' | 'success' | 'validating' | undefined;
  tooltip?: import('antd/es/form/FormItemLabel').LabelTooltipType;
  id?: string | undefined;
  normalize?:
    | ((value: any, prevValue: any, allValues: import('rc-field-form/lib/interface').Store) => any)
    | undefined;
  children?: ReactNode | ((form: import('antd').FormInstance<any>) => ReactNode);
  className?: string | undefined;
  dependencies?: any[] | undefined;
  name?: any;
  onReset?: (() => void) | undefined;
  prefixCls?: string | undefined;
  rootClassName?: string | undefined;
  help?: ReactNode;
  htmlFor?: string | undefined;
  validateTrigger?: string | false | string[] | undefined;
  preserve?: boolean | undefined;
  colon?: boolean | undefined;
  labelAlign?: import('antd/es/form/interface').FormLabelAlign | undefined;
  labelCol?: import('antd').ColProps | undefined;
  wrapperCol?: import('antd').ColProps | undefined;
  extra?: ReactNode;
  getValueFromEvent?:
    | ((...args: import('rc-field-form/lib/interface').EventArgs) => any)
    | undefined;
  trigger?: string | undefined;
  validateDebounce?: number | undefined;
  validateFirst?: boolean | 'parallel' | undefined;
  valuePropName?: string | undefined;
  getValueProps?: ((value: any) => Record<string, unknown>) | undefined;
  messageVariables?: Record<string, string> | undefined;
  initialValue?: any;
  onMetaChange?: ((meta: import('rc-field-form/lib/Field').MetaEvent) => void) | undefined;
  isListField?: boolean | undefined;
  isList?: boolean | undefined;
  noStyle?: boolean | undefined;
  hasFeedback?:
    | boolean
    | {
        icons: import('antd/es/form/FormItem').FeedbackIcons;
      }
    | undefined;
  validateStatus?: '' | 'error' | 'warning' | 'success' | 'validating' | undefined;
  fieldKey?: import('react').Key | import('react').Key[] | undefined;
  fieldId?: string | undefined;
};
