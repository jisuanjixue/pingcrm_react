import type { SelectProps, SelectValue } from 'antd/lib/select';
import type { ReactNode } from 'react';
import React from 'react';
import type { IBaseSave, IBaseSaveSuccess, ISelectListItem } from '../../dataTypes/selectListItem';
export interface ISelectProps<
  TDataItem extends any = ISelectListItem,
  TV extends SelectValue = SelectValue,
  TSaveView extends any = IBaseSave,
> extends Omit<SelectProps<TV>, 'options' | 'filterOption' | 'onSearch' | 'onChange'> {
  onChange?: (value: SelectValue, option: TDataItem | undefined) => void;
  /** 【jet-pro】选项列表 */
  options?: TDataItem[];
  /** 【jet-pro】本地数据搜索表达式，默认和text做模糊匹配 */
  filterPredicate?: (search: string, data: TDataItem) => boolean;
  /** 【jet-pro】异步获取选项列表，可用于远程请求 */
  request?: (search?: string) => Promise<TDataItem[] | undefined>;
  /** 【jet-pro】绑定数据字段，如果非ISelectListItem约束类型，需指定对应字段名 */
  fieldNames?: {
    label: string;
    value: string;
  };
  /** 【jet-pro】自定义渲染Option内容 */
  renderItem?: (data: TDataItem) => ReactNode;
  /** 【jet-pro】自定义渲染添加按钮及 form Modal */
  isAdd?: boolean;
  /** 【jet-pro】异步获取选项列表，可用于远程请求 */
  requestAdd?: (data?: TSaveView) => Promise<IBaseSaveSuccess | undefined>;
  /** 【jet-pro】自定义渲染添加按钮及 form Modal */
  formItems?: () => ReactNode;
}
/**
 * 选择器
 * @param props
 * @returns
 */
declare const Select: <
  TDataItem extends unknown = ISelectListItem,
  TV extends SelectValue = SelectValue,
>(
  props: ISelectProps<TDataItem, TV, IBaseSave>,
) => React.JSX.Element;
export default Select;
