var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (
  (target = mod != null ? __create(__getProtoOf(mod)) : {}),
  __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule
      ? __defProp(target, 'default', { value: mod, enumerable: true })
      : target,
    mod,
  )
);
var __toCommonJS = (mod) => __copyProps(__defProp({}, '__esModule', { value: true }), mod);

// src/components/Select/index.tsx
var Select_exports = {};
__export(Select_exports, {
  default: () => Select_default,
});
module.exports = __toCommonJS(Select_exports);
var import_icons = require('@ant-design/icons');
var import_ahooks = require('ahooks');
var import_antd = require('antd');
var import_react = __toESM(require('react'));
var import_asyncUtils = require('../../utils/asyncUtils');
var import_objectUtils = require('../../utils/objectUtils');
var import_EditForm = __toESM(require('../EditForm/index'));
var Select = (props) => {
  const {
    options: propsOptions,
    loading: propsLoading,
    request,
    fieldNames = { label: 'text', value: 'value' },
    filterPredicate: propsFilterPredicate,
    onChange: propsOnChange,
    renderItem,
    isAdd,
    requestAdd,
    formItems: propsFormItems,
    ...resetProps
  } = props;
  const requestAble = (0, import_objectUtils.isPromise)(request);
  const refFetchId = (0, import_react.useRef)(0);
  const genFetchId = () => {
    const id = refFetchId.current + 1;
    if (id > 100) return 0;
    return id;
  };
  const [options, setOptions] = (0, import_ahooks.useSafeState)(propsOptions);
  const [showAdd, setShowAdd] = (0, import_ahooks.useSafeState)();
  const [optionItem, setOptionItem] = (0, import_ahooks.useSafeState)();
  let [loading, setLoading] = (0, import_ahooks.useSafeState)();
  if ((0, import_objectUtils.hasKey)(props, 'loading')) {
    loading = propsLoading;
    setLoading = () => {};
  }
  const filterPredicate = (search, value) => {
    if (requestAble) return true;
    if (!search) return true;
    const item = options == null ? void 0 : options.find((opt) => opt[fieldNames.value] === value);
    if (!item) return false;
    if (propsFilterPredicate) return propsFilterPredicate(search, item);
    const label = item[fieldNames.label];
    return (label || '').indexOf(search) > -1;
  };
  const { run: debounceFetch } = (0, import_ahooks.useDebounceFn)(
    async (search) => {
      if (!requestAble) return;
      const fetchId = genFetchId();
      refFetchId.current = fetchId;
      setLoading(true);
      await (0, import_asyncUtils.delay)(100);
      try {
        const data = await (request == null ? void 0 : request(search));
        if (fetchId !== refFetchId.current) return;
        setOptions(data);
      } catch (e) {}
      setLoading(false);
    },
    { wait: 500 },
  );
  const onChangeOptions = (value) => {
    setOptionItem(value);
    propsOnChange == null
      ? void 0
      : propsOnChange(
          value,
          options == null ? void 0 : options.find((item) => item[fieldNames.value] === value),
        );
  };
  const onRenderAdd = () =>
    /* @__PURE__ */ import_react.default.createElement(import_antd.Button, {
      type: 'primary',
      icon: /* @__PURE__ */ import_react.default.createElement(import_icons.PlusCircleTwoTone, {
        onClick: () => setShowAdd(true),
      }),
    });
  (0, import_ahooks.useMount)(() => {
    debounceFetch();
  });
  (0, import_react.useEffect)(() => {
    setOptions(propsOptions);
  }, [propsOptions]);
  const renderFormItems = () => (propsFormItems == null ? void 0 : propsFormItems());
  return /* @__PURE__ */ import_react.default.createElement(
    import_react.default.Fragment,
    null,
    /* @__PURE__ */ import_react.default.createElement(
      import_antd.Space,
      { size: 0 },
      /* @__PURE__ */ import_react.default.createElement(
        import_antd.Select,
        {
          allowClear: true,
          loading,
          onSearch: requestAble
            ? (search) => {
                setOptions([]);
                debounceFetch(search);
              }
            : void 0,
          filterOption: (search, option) =>
            filterPredicate(search, option == null ? void 0 : option.value),
          placeholder: '请选择',
          notFoundContent: loading
            ? /* @__PURE__ */ import_react.default.createElement(import_antd.Spin, {
                size: 'small',
              })
            : '未找到记录',
          style: { minWidth: 150 },
          value:
            options == null
              ? void 0
              : options.find((item) => item[fieldNames.value] === optionItem),
          ...resetProps,
          onChange: (value) => onChangeOptions(value),
        },
        options == null
          ? void 0
          : options.map((item) => {
              const value = item[fieldNames.value];
              const label = item[fieldNames.label];
              return /* @__PURE__ */ import_react.default.createElement(
                import_antd.Select.Option,
                { key: value, ...{ value } },
                renderItem ? renderItem(item) : label,
              );
            }),
      ),
      isAdd ? onRenderAdd() : void 0,
    ),
    showAdd &&
      /* @__PURE__ */ import_react.default.createElement(
        import_EditForm.default.Modal,
        {
          ...{
            visible: showAdd,
            title: '添加',
            onClose: () => setShowAdd(false),
            initDetail: async () => ({ name: '' }),
            onSubmit: async (data) => {
              var _a, _b;
              await (0, import_asyncUtils.delay)(1e3);
              const res = await (requestAdd == null ? void 0 : requestAdd(data));
              if (res == null ? void 0 : res.success) {
                debounceFetch(data.name);
                onChangeOptions((_a = res == null ? void 0 : res.data) == null ? void 0 : _a.id);
                setOptionItem((_b = res == null ? void 0 : res.data) == null ? void 0 : _b.id);
                return true;
              }
              return false;
            },
          },
        },
        renderFormItems(),
      ),
  );
};
var Select_default = Select;
