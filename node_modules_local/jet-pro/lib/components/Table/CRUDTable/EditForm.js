var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (
  (target = mod != null ? __create(__getProtoOf(mod)) : {}),
  __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule
      ? __defProp(target, 'default', { value: mod, enumerable: true })
      : target,
    mod,
  )
);
var __toCommonJS = (mod) => __copyProps(__defProp({}, '__esModule', { value: true }), mod);

// src/components/Table/CRUDTable/EditForm.tsx
var EditForm_exports = {};
__export(EditForm_exports, {
  default: () => EditForm_default,
});
module.exports = __toCommonJS(EditForm_exports);
var import_antd = require('antd');
var import_react = __toESM(require('react'));
var import_objectUtils = require('../../../utils/objectUtils');
var import_FormItem = __toESM(require('../../EditForm/FormItem'));
var import_EditForm = __toESM(require('../../EditForm/index'));
var import_utils = require('../ProTable/utils');
var EditForm_default = ({
  columns,
  detailRequest,
  saveRequest,
  editProps,
  visible,
  detail,
  onSuccess,
  onClose,
}) => {
  const editMode = (editProps == null ? void 0 : editProps.mode) || 'drawer';
  const isUpdate = !!(detail == null ? void 0 : detail.id);
  const onSubmit = async (data) => {
    let submitData = data;
    if (editProps == null ? void 0 : editProps.transFormDataBeforeSubmit)
      submitData = await (editProps == null ? void 0 : editProps.transFormDataBeforeSubmit(data));
    try {
      const res = await (saveRequest == null ? void 0 : saveRequest(submitData));
      if (!(res == null ? void 0 : res.success)) {
        import_antd.message.error(res == null ? void 0 : res.errorMessage);
      } else {
        import_antd.message.success('保存成功');
        onSuccess();
      }
      return (res == null ? void 0 : res.success) ?? false;
    } catch (e) {
      import_antd.message.error(e.message || '出错了');
    }
    return false;
  };
  const initDetail = async () => {
    let initData;
    if (isUpdate) {
      try {
        const res = await (detailRequest == null
          ? void 0
          : detailRequest(detail == null ? void 0 : detail.id));
        if (!(res == null ? void 0 : res.success)) {
          import_antd.message.error(res == null ? void 0 : res.errorMessage);
          return initData;
        }
        initData = res.data;
      } catch (e) {
        import_antd.message.error(e.message);
      }
    } else initData = detail;
    if (editProps == null ? void 0 : editProps.transFormDataBeforeRender)
      initData = await editProps.transFormDataBeforeRender(initData);
    return initData;
  };
  const renderFormItems = () => {
    var _a;
    if (editProps == null ? void 0 : editProps.render)
      return editProps == null ? void 0 : editProps.render(detail);
    const columnsFlattened = (0, import_utils.flatColumns)(columns);
    return /* @__PURE__ */ import_react.default.createElement(
      import_react.default.Fragment,
      null,
      columnsFlattened.map((col) => {
        if (col.hideInEdit)
          return /* @__PURE__ */ import_react.default.createElement(
            import_react.default.Fragment,
            null,
          );
        const { dataIndex, key } = col;
        const { editProps: colEditProps } = col;
        const label = typeof col.title === 'function' ? col.title({}) : col.title;
        const name =
          (colEditProps == null ? void 0 : colEditProps.name) ||
          (0, import_utils.genFieldName)(col.dataIndex);
        if (colEditProps == null ? void 0 : colEditProps.render)
          return /* @__PURE__ */ import_react.default.createElement(
            import_react.Fragment,
            { key: dataIndex || key },
            colEditProps.render({ name, label, ...colEditProps }, detail),
          );
        const formItemProps = {
          key,
          name,
          label,
          required: colEditProps == null ? void 0 : colEditProps.required,
          rules: colEditProps == null ? void 0 : colEditProps.rules,
        };
        if (col.isKey)
          return /* @__PURE__ */ import_react.default.createElement(
            import_FormItem.default.Hidden,
            { ...formItemProps },
          );
        switch (col.valueType) {
          case 'number':
            return /* @__PURE__ */ import_react.default.createElement(
              import_FormItem.default.Number,
              { ...formItemProps },
            );
          case 'boolean':
            return /* @__PURE__ */ import_react.default.createElement(
              import_FormItem.default.Switch,
              { ...formItemProps },
            );
          case 'date':
          case 'dateTime':
            return /* @__PURE__ */ import_react.default.createElement(
              import_FormItem.default.DatePicker,
              {
                ...{
                  ...formItemProps,
                  componentProps: { showTime: col.valueType === 'dateTime' },
                },
              },
            );
          case 'time':
            return /* @__PURE__ */ import_react.default.createElement(
              import_FormItem.default.TimePicker,
              { ...{ ...formItemProps } },
            );
          case 'enum':
            return /* @__PURE__ */ import_react.default.createElement(
              import_FormItem.default.Select,
              {
                ...formItemProps,
                componentProps: { options: (0, import_objectUtils.enumToListItem)(col.enumType) },
              },
            );
          default:
            return /* @__PURE__ */ import_react.default.createElement(
              import_FormItem.default.Text,
              { ...formItemProps },
            );
        }
      }),
      (_a = editProps == null ? void 0 : editProps.renderExtra) == null
        ? void 0
        : _a.call(editProps),
    );
  };
  const editContainerProps = {
    ...editProps,
    title: `${(detail == null ? void 0 : detail.id) ? '编辑' : '新增'}`,
    visible,
    onClose,
    onSubmit,
    initDetail,
  };
  if (editMode === 'drawer')
    return /* @__PURE__ */ import_react.default.createElement(
      import_EditForm.default.Drawer,
      { ...editContainerProps },
      renderFormItems(),
    );
  return /* @__PURE__ */ import_react.default.createElement(
    import_EditForm.default.Modal,
    { ...editContainerProps },
    renderFormItems(),
  );
};
