var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (
  (target = mod != null ? __create(__getProtoOf(mod)) : {}),
  __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule
      ? __defProp(target, 'default', { value: mod, enumerable: true })
      : target,
    mod,
  )
);
var __toCommonJS = (mod) => __copyProps(__defProp({}, '__esModule', { value: true }), mod);

// src/components/Table/CRUDTable/index.tsx
var CRUDTable_exports = {};
__export(CRUDTable_exports, {
  default: () => CRUDTable_default,
});
module.exports = __toCommonJS(CRUDTable_exports);
var import_react = __toESM(require('react'));
var import_ahooks = require('ahooks');
var import_antd = require('antd');
var import_icons = require('@ant-design/icons');
var import_utils = require('../ProTable/utils');
var import_QueryTable = __toESM(require('../QueryTable'));
var import_EditForm = __toESM(require('./EditForm'));
var CRUDTable = ({ refAction: propsRefAction, ...props }) => {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  const propsColumns = (0, import_utils.genColumnsKeyIfy)(props.columns);
  const [editState, setEditState] = (0, import_ahooks.useSafeState)();
  const showEdit = (data) => setEditState({ visible: true, detail: data });
  const hideEdit = () => setEditState({ visible: false });
  const refAction = (0, import_react.useRef)();
  return /* @__PURE__ */ import_react.default.createElement(
    import_react.default.Fragment,
    null,
    /* @__PURE__ */ import_react.default.createElement(import_QueryTable.default, {
      ...{
        ...props,
        refAction: (prevAction) => {
          refAction.current = prevAction;
          if (!propsRefAction) return;
          let action;
          if (refAction.current)
            action = {
              ...refAction.current,
              showEdit,
              hideEdit,
            };
          if (typeof propsRefAction === 'function') propsRefAction(action);
          else propsRefAction.current = action;
        },
        columns: [...propsColumns],
        actionColumn: {
          ...props.actionColumn,
          preRender: (item, index) => {
            var _a2, _b2;
            return /* @__PURE__ */ import_react.default.createElement(
              import_react.default.Fragment,
              null,
              (_b2 = (_a2 = props.actionColumn) == null ? void 0 : _a2.preRender) == null
                ? void 0
                : _b2.call(_a2, item, index),
              /* @__PURE__ */ import_react.default.createElement(
                import_antd.Button,
                {
                  size: 'small',
                  type: 'link',
                  onClick: () =>
                    setEditState({
                      visible: true,
                      detail: item,
                    }),
                },
                '编辑',
              ),
            );
          },
        },
        toolbarProps: {
          ...props.toolbarProps,
          hideActions: (_a = props.toolbarProps) == null ? void 0 : _a.hideActions,
          extra: /* @__PURE__ */ import_react.default.createElement(
            import_antd.Space,
            null,
            !((_c = (_b = props.toolbarProps) == null ? void 0 : _b.hideActions) == null
              ? void 0
              : _c.some((a) => a === 'add')) &&
              /* @__PURE__ */ import_react.default.createElement(
                import_antd.Button,
                {
                  icon: /* @__PURE__ */ import_react.default.createElement(
                    import_icons.PlusOutlined,
                    null,
                  ),
                  type: 'primary',
                  ...((_d = props.toolbarProps) == null ? void 0 : _d.createButtonProps),
                  onClick: () => setEditState({ visible: true }),
                },
                ((_f = (_e = props.toolbarProps) == null ? void 0 : _e.createButtonProps) == null
                  ? void 0
                  : _f.children) || '新建',
              ),
            (_g = props.toolbarProps) == null ? void 0 : _g.extra,
          ),
        },
      },
    }),
    !((_h = props.editProps) == null ? void 0 : _h.disabled) &&
      /* @__PURE__ */ import_react.default.createElement(import_EditForm.default, {
        ...{
          ...props,
          columns: propsColumns,
          visible: editState == null ? void 0 : editState.visible,
          detail: editState == null ? void 0 : editState.detail,
          onSuccess: () => {
            var _a2, _b2;
            (_b2 = (_a2 = refAction.current) == null ? void 0 : _a2.reload) == null
              ? void 0
              : _b2.call(_a2);
          },
          onClose: () => setEditState(void 0),
        },
      }),
  );
};
var CRUDTable_default = CRUDTable;
