var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (
  (target = mod != null ? __create(__getProtoOf(mod)) : {}),
  __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule
      ? __defProp(target, 'default', { value: mod, enumerable: true })
      : target,
    mod,
  )
);
var __toCommonJS = (mod) => __copyProps(__defProp({}, '__esModule', { value: true }), mod);

// src/components/Table/ProTable/Toolbar/hooks/useColumnSetting/DndItem.tsx
var DndItem_exports = {};
__export(DndItem_exports, {
  default: () => DndItem_default,
});
module.exports = __toCommonJS(DndItem_exports);
var import_icons = require('@ant-design/icons');
var import_antd = require('antd');
var import_Checkbox = __toESM(require('antd/lib/checkbox/Checkbox'));
var import_react = __toESM(require('react'));
var import_react_dnd = require('react-dnd');
var import_utils = require('../../../utils');
var DndItem_default = ({
  type,
  hiddenKeys,
  currentHoverIndex,
  index,
  column,
  onDrop,
  setCurrentHoverIndex,
  toggleKeyHide,
  onColumnFixed,
}) => {
  const ref = (0, import_react.useRef)(null);
  const refDirection = (0, import_react.useRef)();
  const [{ handlerId }, drop] = (0, import_react_dnd.useDrop)(
    () => ({
      accept: type,
      collect: (monitor) => ({ handlerId: monitor.getHandlerId() }),
      hover: (item, monitor) => {
        var _a;
        if (!ref.current) return;
        const dragIndex = item.index;
        const hoverIndex = index;
        const hoverBoundingRect = (_a = ref.current) == null ? void 0 : _a.getBoundingClientRect();
        const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;
        const clientOffset = monitor.getClientOffset();
        const hoverClientY = clientOffset.y - hoverBoundingRect.top;
        if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {
          refDirection.current = 'down';
        } else if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {
          refDirection.current = 'up';
        }
        setCurrentHoverIndex(hoverIndex);
      },
      drop: (item) => {
        onDrop(item.index, index);
      },
    }),
    [onDrop],
  );
  const [{ isDragging }, drag] = (0, import_react_dnd.useDrag)(
    () => ({
      type,
      item: { type, index, column },
      collect: (monitor) => ({
        isDragging: monitor.isDragging(),
      }),
      end: (_, monitor) => {
        if (!monitor.didDrop()) setCurrentHoverIndex(void 0);
      },
    }),
    [column.key, index],
  );
  const opacity = isDragging ? 0.5 : 1;
  drag(drop(ref));
  const Indicator = ({ direction, itemIndex }) =>
    /* @__PURE__ */ import_react.default.createElement('div', {
      className: 'hover-indicator',
      style: {
        backgroundColor: import_antd.theme.defaultConfig.token['colorPrimary'],
        // 'rgb(22, 119, 255)', //antdToken.colorPrimary,
        opacity: currentHoverIndex === itemIndex && refDirection.current === direction ? 1 : 0,
      },
    });
  return /* @__PURE__ */ import_react.default.createElement(
    'li',
    {
      key: column.key,
      ref,
      style: {
        cursor: 'move',
        opacity,
      },
      'data-handler-id': handlerId,
    },
    /* @__PURE__ */ import_react.default.createElement(Indicator, {
      ...{ direction: 'up', itemIndex: index },
    }),
    /* @__PURE__ */ import_react.default.createElement(
      'div',
      { style: { display: 'flex' } },
      /* @__PURE__ */ import_react.default.createElement(
        'div',
        { style: { flexDirection: 'column' } },
        /* @__PURE__ */ import_react.default.createElement(import_icons.MenuOutlined, null),
      ),
      /* @__PURE__ */ import_react.default.createElement(
        'div',
        { style: { flexDirection: 'column', width: '100%' } },
        /* @__PURE__ */ import_react.default.createElement(
          import_Checkbox.default,
          {
            style: { width: '100%', marginLeft: 5 },
            value: column.key,
            checked: !hiddenKeys.some((k) => k === column.key),
            onChange: () => toggleKeyHide(column.key),
          },
          (0, import_utils.genColumnTitle)(column.title),
          /* @__PURE__ */ import_react.default.createElement(
            'span',
            { className: 'col-actions' },
            column.fixed &&
              /* @__PURE__ */ import_react.default.createElement(
                import_antd.Tooltip,
                { title: '不固定' },
                /* @__PURE__ */ import_react.default.createElement(import_antd.Button, {
                  size: 'small',
                  type: 'link',
                  icon: /* @__PURE__ */ import_react.default.createElement(
                    import_icons.VerticalAlignMiddleOutlined,
                    null,
                  ),
                  onClick: () => onColumnFixed(column.key, false),
                }),
              ),
            (!column.fixed || column.fixed === 'right') &&
              /* @__PURE__ */ import_react.default.createElement(
                import_antd.Tooltip,
                { title: '固定在左侧' },
                /* @__PURE__ */ import_react.default.createElement(import_antd.Button, {
                  size: 'small',
                  type: 'link',
                  icon: /* @__PURE__ */ import_react.default.createElement(
                    import_icons.VerticalAlignTopOutlined,
                    null,
                  ),
                  onClick: () => onColumnFixed(column.key, 'left'),
                }),
              ),
            (!column.fixed || column.fixed === 'left') &&
              /* @__PURE__ */ import_react.default.createElement(
                import_antd.Tooltip,
                { title: '固定在右侧' },
                /* @__PURE__ */ import_react.default.createElement(import_antd.Button, {
                  size: 'small',
                  type: 'link',
                  icon: /* @__PURE__ */ import_react.default.createElement(
                    import_icons.VerticalAlignBottomOutlined,
                    null,
                  ),
                  onClick: () => onColumnFixed(column.key, 'right'),
                }),
              ),
          ),
        ),
      ),
    ),
    /* @__PURE__ */ import_react.default.createElement(Indicator, {
      ...{ direction: 'down', itemIndex: index },
    }),
  );
};
