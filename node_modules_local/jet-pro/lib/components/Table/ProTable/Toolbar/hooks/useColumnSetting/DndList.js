var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (
  (target = mod != null ? __create(__getProtoOf(mod)) : {}),
  __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule
      ? __defProp(target, 'default', { value: mod, enumerable: true })
      : target,
    mod,
  )
);
var __toCommonJS = (mod) => __copyProps(__defProp({}, '__esModule', { value: true }), mod);

// src/components/Table/ProTable/Toolbar/hooks/useColumnSetting/DndList.tsx
var DndList_exports = {};
__export(DndList_exports, {
  default: () => DndList_default,
});
module.exports = __toCommonJS(DndList_exports);
var import_react = __toESM(require('react'));
var import_ahooks = require('ahooks');
var import_immutability_helper = __toESM(require('immutability-helper'));
var import_DndItem = __toESM(require('./DndItem'));
var DndList_default = ({
  fixedType,
  columnConfigs,
  columns = [],
  onToggleKeyHide,
  onColumnFixed,
  onKeysOrder,
}) => {
  const [currentHoverIndex, setCurrentHoverIndex] = (0, import_ahooks.useSafeState)();
  const hiddenKeys = (0, import_react.useMemo)(
    () => columnConfigs.filter((cfg) => cfg.hide && !!cfg.key).map((cfg) => cfg.key),
    [columnConfigs],
  );
  const keysFixed = (0, import_react.useMemo)(
    () => columnConfigs.filter((cfg) => cfg.fixed === fixedType && cfg.key).map((cfg) => cfg.key),
    [columnConfigs, fixedType],
  );
  const columnsFixed = (0, import_react.useMemo)(
    () =>
      keysFixed
        .map((key) => {
          const column = columns.find((col) => col.key === key);
          if (column) return { ...column, fixed: fixedType };
          return void 0;
        })
        .filter((col) => !!col)
        .map((col) => col),
    [keysFixed, columns, fixedType],
  );
  const onDrop = (0, import_react.useCallback)(
    (dragIndex, hoverIndex) => {
      setCurrentHoverIndex(void 0);
      if (dragIndex === hoverIndex) return;
      const dragItem = keysFixed[dragIndex];
      onKeysOrder(
        fixedType,
        (0, import_immutability_helper.default)(keysFixed, {
          $splice: [
            [dragIndex, 1],
            [hoverIndex, 0, dragItem],
          ],
        }),
      );
    },
    [columnsFixed],
  );
  return /* @__PURE__ */ import_react.default.createElement(
    'ul',
    { style: { maxHeight: 200, overflow: 'auto' } },
    columnsFixed.map((column, index) =>
      /* @__PURE__ */ import_react.default.createElement(import_DndItem.default, {
        key: column.key,
        ...{
          type: `dnd_item_${fixedType || 'no'}_fixed`,
          hiddenKeys,
          column,
          index,
          onDrop,
          currentHoverIndex,
          setCurrentHoverIndex,
          toggleKeyHide: onToggleKeyHide,
          onColumnFixed,
        },
      }),
    ),
  );
};
