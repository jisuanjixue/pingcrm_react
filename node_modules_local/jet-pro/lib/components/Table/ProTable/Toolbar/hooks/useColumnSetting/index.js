var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (
  (target = mod != null ? __create(__getProtoOf(mod)) : {}),
  __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule
      ? __defProp(target, 'default', { value: mod, enumerable: true })
      : target,
    mod,
  )
);
var __toCommonJS = (mod) => __copyProps(__defProp({}, '__esModule', { value: true }), mod);

// src/components/Table/ProTable/Toolbar/hooks/useColumnSetting/index.tsx
var useColumnSetting_exports = {};
__export(useColumnSetting_exports, {
  default: () => useColumnSetting_default,
});
module.exports = __toCommonJS(useColumnSetting_exports);
var import_icons = require('@ant-design/icons');
var import_antd = require('antd');
var import_react = __toESM(require('react'));
var import_react_dnd = require('react-dnd');
var import_react_dnd_html5_backend = require('react-dnd-html5-backend');
var import_DndList = __toESM(require('./DndList'));
var import_useColumnConfig = __toESM(require('./useColumnConfig'));
var import_index = require('./index.less');
var ColumnList = ({
  fixedType,
  title,
  showTitle = true,
  columnConfigs = [],
  columns = [],
  onToggleKeyHide,
  setFixedKey,
  onKeysOrder,
}) => {
  const fixedKeys = (0, import_react.useMemo)(
    () => columnConfigs.filter((cfg) => cfg.fixed === fixedType && !!cfg.key).map((cfg) => cfg.key),
    [columnConfigs, fixedType],
  );
  if (!fixedKeys.length)
    return /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null);
  return /* @__PURE__ */ import_react.default.createElement(
    import_react.default.Fragment,
    null,
    showTitle &&
      /* @__PURE__ */ import_react.default.createElement(
        'span',
        { className: 'fixed-title' },
        title,
      ),
    /* @__PURE__ */ import_react.default.createElement(
      import_react_dnd.DndProvider,
      { backend: import_react_dnd_html5_backend.HTML5Backend },
      /* @__PURE__ */ import_react.default.createElement(import_DndList.default, {
        ...{
          fixedType,
          columnConfigs,
          columns,
          onToggleKeyHide,
          onColumnFixed: setFixedKey,
          onKeysOrder,
        },
      }),
    ),
  );
};
var useColumnSetting_default = (props) => {
  const propsColumns = props.columns.filter((col) => !!col.key);
  const {
    configs: columnConfigs,
    setColumnConfigs,
    setFixedKey,
    toggleHideKey,
    batchSetHideKeys,
  } = (0, import_useColumnConfig.default)({
    columns: propsColumns,
  });
  const hiddenKeys = (0, import_react.useMemo)(
    () => columnConfigs.filter((item) => item.hide).map((item) => item.key),
    [columnConfigs],
  );
  const getKeysByFixed = (0, import_react.useCallback)(
    (fixed = false) => columnConfigs.filter((item) => item.fixed === fixed).map((item) => item.key),
    [columnConfigs],
  );
  const fixedLeftKeys = (0, import_react.useMemo)(() => getKeysByFixed('left'), [getKeysByFixed]);
  const fixedRightKeys = (0, import_react.useMemo)(() => getKeysByFixed('right'), [getKeysByFixed]);
  const onKeysOrder = (fixed, keysOrdered) => {
    const colCfgs = keysOrdered.map((key) => {
      const orgCfg = columnConfigs.find((item) => item.key === key);
      return { ...orgCfg, fixed };
    });
    setColumnConfigs([
      ...columnConfigs.filter((item) => !keysOrdered.some((key) => key === item.key)),
      ...colCfgs,
    ]);
  };
  const getColumnListProps = (title, fixedType = false) => ({
    title,
    fixedType,
    columnConfigs,
    columns: propsColumns,
    onToggleKeyHide: toggleHideKey,
    setFixedKey,
    onKeysOrder,
  });
  const ColumnSetting = /* @__PURE__ */ import_react.default.createElement(
    import_antd.Popover,
    {
      placement: 'bottomRight',
      trigger: 'click',
      overlayClassName: 'columns-etting-container',
      style: { padding: 0 },
      title: /* @__PURE__ */ import_react.default.createElement(
        'div',
        { style: { padding: '5px 0px' } },
        /* @__PURE__ */ import_react.default.createElement(
          import_antd.Checkbox,
          {
            indeterminate: hiddenKeys.length > 0 && hiddenKeys.length < propsColumns.length,
            checked: hiddenKeys.length === 0,
            onChange: ({ target: { checked } }) => batchSetHideKeys(!checked),
          },
          '列设置',
        ),
      ),
      content: /* @__PURE__ */ import_react.default.createElement(
        import_react.default.Fragment,
        null,
        /* @__PURE__ */ import_react.default.createElement(ColumnList, {
          ...getColumnListProps('固定在左侧', 'left'),
        }),
        /* @__PURE__ */ import_react.default.createElement(ColumnList, {
          ...{
            ...getColumnListProps('不固定'),
            showTitle: fixedLeftKeys.length > 0 || fixedRightKeys.length > 0,
          },
        }),
        /* @__PURE__ */ import_react.default.createElement(ColumnList, {
          ...getColumnListProps('固定在右侧', 'right'),
        }),
      ),
    },
    /* @__PURE__ */ import_react.default.createElement(
      import_antd.Tooltip,
      { overlay: '列设置' },
      /* @__PURE__ */ import_react.default.createElement(import_antd.Button, {
        icon: /* @__PURE__ */ import_react.default.createElement(import_icons.SettingOutlined, {
          color: '#666',
          twoToneColor: '#666',
        }),
        style: { border: 'none' },
      }),
    ),
  );
  return {
    configs: columnConfigs,
    ColumnSetting,
  };
};
