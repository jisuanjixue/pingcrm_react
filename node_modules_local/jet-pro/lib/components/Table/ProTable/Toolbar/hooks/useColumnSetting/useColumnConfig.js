var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, '__esModule', { value: true }), mod);

// src/components/Table/ProTable/Toolbar/hooks/useColumnSetting/useColumnConfig.ts
var useColumnConfig_exports = {};
__export(useColumnConfig_exports, {
  default: () => useColumnConfig_default,
});
module.exports = __toCommonJS(useColumnConfig_exports);
var import_react = require('react');
var import_ahooks = require('ahooks');
var useColumnConfig_default = ({ columns }) => {
  const [configs, setConfigs] = (0, import_ahooks.useSafeState)([]);
  const setFixedKey = (key, fixed) => {
    const cfgItem = configs.find((item) => item.key === key);
    if (!cfgItem) return;
    cfgItem.fixed = fixed;
    setConfigs([...configs]);
  };
  const toggleHideKey = (key) => {
    const cfgItem = configs.find((item) => item.key === key);
    if (!cfgItem) return;
    cfgItem.hide = !cfgItem.hide;
    setConfigs([...configs]);
  };
  const batchSetHideKeys = (hide) => setConfigs(configs.map((cfg) => ({ ...cfg, hide })));
  (0, import_react.useEffect)(() => {
    if (!(columns == null ? void 0 : columns.length)) return;
    const columnsWithoutConfig = columns.filter((col) => !configs.some((c) => c.key === col.key));
    if (!columnsWithoutConfig.length) return;
    let configable = false;
    columnsWithoutConfig.forEach((col) => {
      if (!configs.some((cfg) => cfg.key === col.key)) {
        configable = true;
        configs.push({ key: col.key, fixed: col.fixed || false });
      }
    });
    if (configable) setConfigs([...configs]);
  }, [columns]);
  return {
    configs,
    setColumnConfigs: setConfigs,
    setFixedKey,
    toggleHideKey,
    batchSetHideKeys,
  };
};
