var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (
  (target = mod != null ? __create(__getProtoOf(mod)) : {}),
  __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule
      ? __defProp(target, 'default', { value: mod, enumerable: true })
      : target,
    mod,
  )
);
var __toCommonJS = (mod) => __copyProps(__defProp({}, '__esModule', { value: true }), mod);

// src/components/Table/ProTable/Toolbar/index.tsx
var Toolbar_exports = {};
__export(Toolbar_exports, {
  default: () => Toolbar_default,
});
module.exports = __toCommonJS(Toolbar_exports);
var import_icons = require('@ant-design/icons');
var import_antd = require('antd');
var import_react = __toESM(require('react'));
var import_useColumnSetting = __toESM(require('./hooks/useColumnSetting'));
var import_useDensity = __toESM(require('./hooks/useDensity'));
var Toolbar_default = ({ defaultSize, hide, extra, hideActions, ...props }) => {
  const { size, Density } = (0, import_useDensity.default)({ defaultSize });
  const { configs: columnConfigs, ColumnSetting } = (0, import_useColumnSetting.default)({
    columns: props.columns,
  });
  const Toolbar =
    !hide &&
    /* @__PURE__ */ import_react.default.createElement(
      import_antd.Space,
      null,
      extra,
      !(hideActions == null ? void 0 : hideActions.some((a) => a === 'reload')) &&
        /* @__PURE__ */ import_react.default.createElement(
          import_antd.Tooltip,
          { overlay: '刷新' },
          /* @__PURE__ */ import_react.default.createElement(import_antd.Button, {
            loading: props.loading,
            icon: /* @__PURE__ */ import_react.default.createElement(
              import_icons.ReloadOutlined,
              null,
            ),
            style: { border: 'none' },
            onClick: props.onLoad,
          }),
        ),
      !(hideActions == null ? void 0 : hideActions.some((a) => a === 'density')) && Density,
      !(hideActions == null ? void 0 : hideActions.some((a) => a === 'columnSetting')) &&
        ColumnSetting,
    );
  return { size, columnConfigs, Toolbar };
};
