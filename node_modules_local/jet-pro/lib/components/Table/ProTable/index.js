var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (
  (target = mod != null ? __create(__getProtoOf(mod)) : {}),
  __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule
      ? __defProp(target, 'default', { value: mod, enumerable: true })
      : target,
    mod,
  )
);
var __toCommonJS = (mod) => __copyProps(__defProp({}, '__esModule', { value: true }), mod);

// src/components/Table/ProTable/index.tsx
var ProTable_exports = {};
__export(ProTable_exports, {
  default: () => ProTable_default,
});
module.exports = __toCommonJS(ProTable_exports);
var import_ahooks = require('ahooks');
var import_antd = require('antd');
var import_react = __toESM(require('react'));
var import_Toolbar = __toESM(require('./Toolbar'));
var import_utils = require('./utils');
var ProTable = ({
  title,
  columns: propsColumns,
  actionColumn: propsActionColumn,
  toolbarProps,
  sorterResult,
  refAction: propsRefAction,
  ...props
}) => {
  const columns = (0, import_utils.genColumnsFromProps)(propsColumns);
  const { size, columnConfigs, Toolbar } = (0, import_Toolbar.default)({
    ...toolbarProps,
    loading: props.loading,
    defaultSize: props.size,
    columns,
  });
  const hiddenColumnKeys = (0, import_react.useMemo)(
    () => columnConfigs.filter((cfg) => cfg.hide).map((cfg) => cfg.key),
    [columnConfigs],
  );
  const getColumnKeysByFixed = (0, import_react.useCallback)(
    (fixed = false) =>
      columnConfigs.filter((cfg) => cfg.fixed === fixed && !!cfg.key).map((cfg) => cfg.key),
    [columnConfigs],
  );
  const getColumnsByFixed = (cols, fixed = false) =>
    getColumnKeysByFixed(fixed)
      .map((key) => {
        const col = cols.find((item) => item.key === key);
        if (col) return (0, import_utils.fixedColumn)(col, fixed);
        return void 0;
      })
      .filter((item) => !!item)
      .map((item) => item);
  const genColumnsBySorter = (cols) => {
    if (!(cols == null ? void 0 : cols.length)) return [];
    return cols
      .filter((c) => !hiddenColumnKeys.some((key) => key === c.key))
      .map((col) => {
        if ((0, import_utils.isGroupColumn)(col)) {
          const colGroup = col;
          colGroup.children = genColumnsBySorter(colGroup.children);
          return colGroup;
        }
        const colNormal = col;
        if (colNormal.sorterProps) {
          let sorter;
          if (sorterResult instanceof Array)
            sorter =
              sorterResult == null
                ? void 0
                : sorterResult.find((cs) => cs.columnKey === colNormal.key);
          else sorter = sorterResult;
          const { sorterProps } = colNormal;
          const colWithSorter = {
            sortOrder: sorter == null ? void 0 : sorter.order,
            sorter: { multiple: 1 },
            ...(typeof sorterProps === 'object'
              ? {
                  showSorterTooltip: sorterProps.showTooltip,
                  sortDirections: sorterProps.directions,
                }
              : {}),
          };
          return { ...col, ...colWithSorter };
        }
        return colNormal;
      });
  };
  const getColumns4Render = () => {
    let columns4Render = columns
      .filter((c) => !c.hide)
      .filter((c) => !hiddenColumnKeys.some((key) => key === c.key));
    columns4Render = genColumnsBySorter(columns4Render);
    let actionColumn;
    if (propsActionColumn)
      actionColumn = {
        width: 100,
        ...propsActionColumn,
        fixed: 'right',
        render: (_, item, index) => {
          var _a;
          return (_a = propsActionColumn == null ? void 0 : propsActionColumn.render) == null
            ? void 0
            : _a.call(propsActionColumn, item, index);
        },
      };
    columns4Render = [
      ...getColumnsByFixed(columns4Render, 'left'),
      ...getColumnsByFixed(columns4Render),
      ...getColumnsByFixed(columns4Render, 'right'),
      ...(actionColumn ? [actionColumn] : []),
    ];
    return columns4Render;
  };
  const action = (0, import_ahooks.useCreation)(() => {
    if (!(toolbarProps == null ? void 0 : toolbarProps.onLoad)) return void 0;
    return { reload: toolbarProps.onLoad };
  }, [toolbarProps]);
  (0, import_react.useEffect)(() => {
    if (!propsRefAction) return;
    if (typeof propsRefAction === 'function') {
      propsRefAction(action);
      return;
    }
    propsRefAction.current = action;
  }, [propsRefAction, action]);
  return /* @__PURE__ */ import_react.default.createElement(
    import_antd.Card,
    { title: title == null ? void 0 : title(props.dataSource || []), extra: Toolbar },
    /* @__PURE__ */ import_react.default.createElement(import_antd.Table, {
      rowKey: 'id',
      ...props,
      scroll: { x: '100%', y: '100%', ...props.scroll },
      size,
      columns: getColumns4Render(),
      onChange: (pg, filters, sorter, extra) => {
        var _a;
        (_a = props.onChange) == null ? void 0 : _a.call(props, pg, filters, sorter, extra);
      },
    }),
  );
};
var ProTable_default = ProTable;
