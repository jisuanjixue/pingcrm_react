/// <reference types="react" />
import { ColumnTitle } from 'antd/es/table/interface';
import type { DataIndex, FixedType } from 'rc-table/lib/interface';
import type {
  IProColumnGroupType,
  IProColumnType,
  TBaseView,
  TProColumnsType,
  TProColumnType,
} from './interface';
/**
 * 是否是分组列
 * @param col
 * @returns
 */
export declare const isGroupColumn: <TListView extends TBaseView>(
  col: TProColumnType<TListView>,
) => boolean;
/**
 * 生成字段名
 * @param dataIndex
 * @returns
 */
export declare const genFieldName: (dataIndex?: DataIndex) => string;
export declare const genColumnTitle: <T>(title: ColumnTitle<T>) => import('react').ReactNode;
/**
 * 生成带key的Columns
 * @param columns
 * @returns colums
 */
export declare const genColumnsKeyIfy: <
  TLisView extends TBaseView,
  TColumns extends TProColumnsType<TLisView>,
  IColumn extends IProColumnType<TLisView>,
  IColumnGroup extends IProColumnGroupType<TLisView>,
>(
  columns?: TColumns | undefined,
) => (
  | IColumnGroup
  | {
      key: string;
      children?: TProColumnType<TLisView>[] | undefined;
      dataIndex?: any;
      valueType?:
        | 'string'
        | 'number'
        | 'boolean'
        | 'time'
        | 'date'
        | 'dateTime'
        | 'enum'
        | undefined;
      enumType?: any;
      hide?: boolean | undefined;
      sorterProps?: boolean | import('./interface').IColumnSorterProps | undefined;
      render?:
        | ((
            value: any,
            record: TLisView,
            index: number,
          ) => import('react').ReactNode | import('rc-table/lib/interface').RenderedCell<TLisView>)
        | undefined;
      title?: import('antd/lib/table/interface').ColumnTitle<TLisView>;
      fixed?: FixedType | undefined;
      className?: string | undefined;
      responsive?: import('antd/lib').Breakpoint[] | undefined;
      ellipsis?: import('rc-table/lib/interface').CellEllipsisType | undefined;
      width?: string | number | undefined;
      colSpan?: number | undefined;
      rowSpan?: number | undefined;
      align?: import('rc-table/lib/interface').AlignType | undefined;
      shouldCellUpdate?: ((record: TLisView, prevRecord: TLisView) => boolean) | undefined;
      onCell?: import('rc-table/lib/interface').GetComponentProps<TLisView> | undefined;
      onCellClick?:
        | ((record: TLisView, e: import('react').MouseEvent<HTMLElement, MouseEvent>) => void)
        | undefined;
      onHeaderCell?:
        | import('rc-table/lib/interface').GetComponentProps<
            | import('rc-table/lib/interface').ColumnType<TLisView>
            | import('rc-table/lib/interface').ColumnGroupType<TLisView>
          >
        | undefined;
      rowScope?: import('rc-table/lib/interface').RowScopeType | undefined;
      sortIcon?:
        | ((props: {
            sortOrder: import('antd/lib/table/interface').SortOrder;
          }) => import('react').ReactNode)
        | undefined;
      filtered?: boolean | undefined;
      filters?: import('antd/lib/table/interface').ColumnFilterItem[] | undefined;
      filterDropdown?:
        | import('react').ReactNode
        | ((
            props: import('antd/lib/table/interface').FilterDropdownProps,
          ) => import('react').ReactNode);
      filterMultiple?: boolean | undefined;
      filteredValue?: import('antd/lib/table/interface').FilterValue | null | undefined;
      defaultFilteredValue?: import('antd/lib/table/interface').FilterValue | null | undefined;
      filterIcon?: import('react').ReactNode | ((filtered: boolean) => import('react').ReactNode);
      filterMode?: 'menu' | 'tree' | undefined;
      filterSearch?:
        | import('antd/lib/table/interface').FilterSearchType<
            import('antd/lib/table/interface').ColumnFilterItem
          >
        | undefined;
      onFilter?: ((value: string | number | boolean, record: TLisView) => boolean) | undefined;
      filterDropdownOpen?: boolean | undefined;
      onFilterDropdownOpenChange?: ((visible: boolean) => void) | undefined;
      filterResetToDefaultFilteredValue?: boolean | undefined;
      filterDropdownVisible?: boolean | undefined;
      onFilterDropdownVisibleChange?: ((visible: boolean) => void) | undefined;
    }
)[];
/**
 *
 * @param cols
 * @returns
 */
export declare const genColumnsFromProps: <TListView extends TBaseView>(
  cols?: TProColumnType<TListView>[] | undefined,
) => TProColumnType<TListView>[];
/**
 * 设置column的fixed属性，如果带分组的列，需要对其children列都设置fixed属性
 * @param column
 * @param fixedType
 * @returns
 */
export declare const fixedColumn: <TListView extends TBaseView>(
  column: TProColumnType<TListView>,
  fixedType?: FixedType,
) => IProColumnGroupType<TListView>;
/**
 * 平铺列，将分组列平铺和普通列同层
 * @param columns 列/分组列
 * @returns
 */
export declare const flatColumns: <
  TLisView extends TBaseView,
  TColumns extends (IColumn | IColumnGroup)[],
  IColumn extends IProColumnType<TLisView>,
  IColumnGroup extends IProColumnGroupType<TLisView>,
>(
  columns?: TColumns | undefined,
) => IColumn[];
