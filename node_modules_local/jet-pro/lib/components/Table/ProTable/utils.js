var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, '__esModule', { value: true }), mod);

// src/components/Table/ProTable/utils.ts
var utils_exports = {};
__export(utils_exports, {
  fixedColumn: () => fixedColumn,
  flatColumns: () => flatColumns,
  genColumnTitle: () => genColumnTitle,
  genColumnsFromProps: () => genColumnsFromProps,
  genColumnsKeyIfy: () => genColumnsKeyIfy,
  genFieldName: () => genFieldName,
  isGroupColumn: () => isGroupColumn,
});
module.exports = __toCommonJS(utils_exports);
var import_dateUtils = require('../../../utils/dateUtils');
var import_objectUtils = require('../../../utils/objectUtils');
var isGroupColumn = (col) => (0, import_objectUtils.hasKey)(col, 'children');
var genFieldName = (dataIndex) => {
  if (!dataIndex) return '';
  if (dataIndex instanceof Array) return dataIndex.join('.');
  return `${dataIndex}`;
};
var genColumnTitle = (title) => (typeof title === 'function' ? title({}) : title);
var genColumnsKeyIfy = (columns) =>
  (columns == null
    ? void 0
    : columns.map((col) => {
        const key = col.key || genFieldName(col.dataIndex);
        if (isGroupColumn(col)) {
          const colGroup = col;
          colGroup.key = key;
          colGroup.children = genColumnsKeyIfy(colGroup.children);
          return { ...colGroup };
        }
        return { ...col, key };
      })) || [];
var genColumnsFromProps = (cols) => {
  if (!(cols == null ? void 0 : cols.length)) return [];
  const genColumnByProps = (col) => {
    var _a;
    const key = col.key || genFieldName(col.dataIndex);
    if (isGroupColumn(col)) {
      const colGroup = col;
      const children =
        (_a = colGroup.children) == null
          ? void 0
          : _a.map((c) => ({
              ...genColumnByProps(c),
              fixed: colGroup.fixed,
            }));
      return { ...colGroup, children, key };
    }
    const colNormal = col;
    const newCol = { width: 120, ...colNormal, key };
    if (!newCol.render) {
      const { valueType } = newCol;
      switch (valueType) {
        case 'date':
          newCol.render = (val) => (0, import_dateUtils.formatDate)(val);
          newCol.width = 120;
          break;
        case 'time':
          newCol.render = (val) => (0, import_dateUtils.formatTime)(val);
          newCol.width = 100;
          break;
        case 'dateTime':
          newCol.render = (val) => (0, import_dateUtils.formatDateTime)(val);
          newCol.width = 160;
          break;
        case 'enum':
          if (newCol.enumType) {
            newCol.render = (val) => {
              if (typeof val === 'number') return newCol.enumType[val];
              return val;
            };
          }
          break;
        default:
          break;
      }
    }
    return newCol;
  };
  return cols.map((col) => genColumnByProps(col));
};
var fixedColumn = (column, fixedType) => {
  var _a;
  if (isGroupColumn(column)) {
    const columnGroup = column;
    columnGroup.fixed = fixedType;
    columnGroup.children =
      (_a = columnGroup == null ? void 0 : columnGroup.children) == null
        ? void 0
        : _a.map((col) => fixedColumn(col, fixedType));
    return columnGroup;
  }
  return { ...column, fixed: fixedType };
};
var flatColumns = (columns) => {
  const columnsFlattened = [];
  columns == null
    ? void 0
    : columns.forEach((col) => {
        if (isGroupColumn(col)) {
          const colGroup = col;
          flatColumns(colGroup.children).forEach((c) => columnsFlattened.push(c));
          return;
        }
        columnsFlattened.push(col);
      });
  return columnsFlattened;
};
// Annotate the CommonJS export names for ESM import in node:
0 &&
  (module.exports = {
    fixedColumn,
    flatColumns,
    genColumnTitle,
    genColumnsFromProps,
    genColumnsKeyIfy,
    genFieldName,
    isGroupColumn,
  });
