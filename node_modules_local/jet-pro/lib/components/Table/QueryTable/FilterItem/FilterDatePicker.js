var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (
  (target = mod != null ? __create(__getProtoOf(mod)) : {}),
  __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule
      ? __defProp(target, 'default', { value: mod, enumerable: true })
      : target,
    mod,
  )
);
var __toCommonJS = (mod) => __copyProps(__defProp({}, '__esModule', { value: true }), mod);

// src/components/Table/QueryTable/FilterItem/FilterDatePicker.tsx
var FilterDatePicker_exports = {};
__export(FilterDatePicker_exports, {
  default: () => FilterDatePicker_default,
});
module.exports = __toCommonJS(FilterDatePicker_exports);
var import_pro_form = __toESM(require('@ant-design/pro-form'));
var import_antd = require('antd');
var import_react = __toESM(require('react'));
var import__ = require('../../../../');
var import_enums = require('../../../../dataTypes/dynamicQuery/enums');
var import_FilterExtras = require('./FilterExtras');
var FilterDatePicker_default = ({
  name,
  label,
  type = import_enums.FilterType.Equal,
  defaultValue,
  and,
  showFilterType = true,
  mode = 'date',
}) => {
  const style = { width: 'calc(100% - 100px)' };
  return /* @__PURE__ */ import_react.default.createElement(
    import_react.default.Fragment,
    null,
    /* @__PURE__ */ import_react.default.createElement(
      import_pro_form.default.Item,
      { ...{ name, label } },
      /* @__PURE__ */ import_react.default.createElement(
        import_antd.Input.Group,
        { compact: true },
        /* @__PURE__ */ import_react.default.createElement(import_FilterExtras.FilterTypeSelect, {
          ...{
            name,
            defaultType: type,
            showFilterType,
            types: [
              import_enums.FilterType.Equal,
              import_enums.FilterType.NotEqual,
              import_enums.FilterType.GreaterThan,
              import_enums.FilterType.GreaterThanOrEqual,
              import_enums.FilterType.LessThan,
              import_enums.FilterType.LessThanOrEqual,
            ],
            style: { width: 100 },
          },
        }),
        /* @__PURE__ */ import_react.default.createElement(
          import_pro_form.default.Item,
          {
            noStyle: true,
            ...{
              name: [name, 'value'],
              initialValue: defaultValue,
            },
          },
          mode === 'time'
            ? /* @__PURE__ */ import_react.default.createElement(import__.TimePicker, {
                ...{ style },
                showSecond: false,
              })
            : /* @__PURE__ */ import_react.default.createElement(import__.DatePicker, {
                ...{ style },
                showTime: mode === 'dateTime',
                showSecond: false,
              }),
        ),
      ),
    ),
    /* @__PURE__ */ import_react.default.createElement(import_FilterExtras.FilterValueTypeHidden, {
      ...{ name, valueType: mode },
    }),
    /* @__PURE__ */ import_react.default.createElement(import_FilterExtras.FilterAndHidden, {
      ...{ name, and },
    }),
  );
};
