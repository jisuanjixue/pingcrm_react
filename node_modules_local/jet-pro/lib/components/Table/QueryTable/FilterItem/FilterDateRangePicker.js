var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (
  (target = mod != null ? __create(__getProtoOf(mod)) : {}),
  __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule
      ? __defProp(target, 'default', { value: mod, enumerable: true })
      : target,
    mod,
  )
);
var __toCommonJS = (mod) => __copyProps(__defProp({}, '__esModule', { value: true }), mod);

// src/components/Table/QueryTable/FilterItem/FilterDateRangePicker.tsx
var FilterDateRangePicker_exports = {};
__export(FilterDateRangePicker_exports, {
  default: () => FilterDateRangePicker_default,
  momentFormat: () => momentFormat,
});
module.exports = __toCommonJS(FilterDateRangePicker_exports);
var import_pro_form = __toESM(require('@ant-design/pro-form'));
var import_react = __toESM(require('react'));
var import__ = require('../../../../');
var import_enums = require('../../../../dataTypes/dynamicQuery/enums');
var import_dateUtils = require('../../../../utils/dateUtils');
var import_FilterExtras = require('./FilterExtras');
var momentFormat = (val, mode) => {
  if (mode === 'dateTime') return (0, import_dateUtils.formatDateTime)(val);
  if (mode === 'time') return (0, import_dateUtils.formatTime)(val);
  return (0, import_dateUtils.formatDate)(val);
};
var getValue = (fieldValue) => {
  const start = fieldValue == null ? void 0 : fieldValue.filters[0].value;
  const end = fieldValue == null ? void 0 : fieldValue.filters[1].value;
  if (!start && !end) return [null, null];
  return [start || null, end || null];
};
var FilterDateRangePicker_default = ({ name, label, defaultValue, mode = 'date', and = true }) => {
  return /* @__PURE__ */ import_react.default.createElement(
    import_react.default.Fragment,
    null,
    /* @__PURE__ */ import_react.default.createElement(
      import_pro_form.default.Item,
      { ...{ name, label } },
      /* @__PURE__ */ import_react.default.createElement(
        import_pro_form.default.Item,
        { shouldUpdate: true, noStyle: true },
        (form) => {
          const pickerProps = {
            value: getValue(form.getFieldValue(name)),
            onChange: (value) => {
              const fieldValue = form.getFieldValue(name);
              [fieldValue.filters[0].value, fieldValue.filters[1].value] = value || [];
              const obj = {};
              obj[name] = fieldValue;
              form.setFieldsValue({ ...obj });
            },
            showSecond: false,
          };
          if (mode === 'time')
            return /* @__PURE__ */ import_react.default.createElement(
              import__.TimePicker.RangePicker,
              { ...pickerProps, showSecond: false },
            );
          return /* @__PURE__ */ import_react.default.createElement(
            import__.DatePicker.RangePicker,
            {
              ...pickerProps,
              showTime: mode === 'dateTime',
              showSecond: false,
            },
          );
        },
      ),
    ),
    /* @__PURE__ */ import_react.default.createElement(import_FilterExtras.FilterTypeHidden, {
      ...{ name, type: import_enums.FilterType.Composite },
    }),
    /* @__PURE__ */ import_react.default.createElement(import_FilterExtras.FilterAndHidden, {
      ...{ name, and },
    }),
    /* @__PURE__ */ import_react.default.createElement(import_FilterExtras.FilterValueTypeHidden, {
      ...{ name, valueType: mode },
    }),
    /* @__PURE__ */ import_react.default.createElement(import_FilterExtras.FilterValueHidden, {
      ...{
        name: [name, 'filters', 0],
        value: (defaultValue || [])[0],
        // momentFormat(convertToMoment((defaultValue || [])[0]), mode),
      },
    }),
    /* @__PURE__ */ import_react.default.createElement(import_FilterExtras.FilterValueHidden, {
      ...{
        name: [name, 'filters', 1],
        value: (defaultValue || [])[1],
        // momentFormat(convertToMoment((defaultValue || [])[1]), mode),
      },
    }),
    /* @__PURE__ */ import_react.default.createElement(import_FilterExtras.FilterTypeHidden, {
      ...{ name: [name, 'filters', 0], type: import_enums.FilterType.GreaterThanOrEqual },
    }),
    /* @__PURE__ */ import_react.default.createElement(import_FilterExtras.FilterAndHidden, {
      ...{ name: [name, 'filters', 0], and },
    }),
    /* @__PURE__ */ import_react.default.createElement(import_FilterExtras.FilterTypeHidden, {
      ...{ name: [name, 'filters', 1], type: import_enums.FilterType.LessThanOrEqual },
    }),
    /* @__PURE__ */ import_react.default.createElement(import_FilterExtras.FilterAndHidden, {
      ...{ name: [name, 'filters', 1], and },
    }),
  );
};
// Annotate the CommonJS export names for ESM import in node:
0 &&
  (module.exports = {
    momentFormat,
  });
