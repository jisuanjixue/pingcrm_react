var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (
  (target = mod != null ? __create(__getProtoOf(mod)) : {}),
  __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule
      ? __defProp(target, 'default', { value: mod, enumerable: true })
      : target,
    mod,
  )
);
var __toCommonJS = (mod) => __copyProps(__defProp({}, '__esModule', { value: true }), mod);

// src/components/Table/QueryTable/FilterItem/FilterForm.tsx
var FilterForm_exports = {};
__export(FilterForm_exports, {
  default: () => FilterForm_default,
});
module.exports = __toCommonJS(FilterForm_exports);
var import_react = __toESM(require('react'));
var import_pro_form = __toESM(require('@ant-design/pro-form'));
var import_utils = require('./utils');
var FilterForm_default = ({ loading, form, children, onSearch }) => {
  const fm = form || import_pro_form.default.useForm()[0];
  const searchHandler = (formValue, isReset = false) =>
    (onSearch == null
      ? void 0
      : onSearch((0, import_utils.convertToFilters)(formValue), isReset)) || Promise.resolve();
  return /* @__PURE__ */ import_react.default.createElement(
    import_pro_form.QueryFilter,
    {
      form: fm,
      onReset: () => {
        fm.resetFields();
        searchHandler(fm.getFieldsValue(), true);
      },
      submitter: {
        resetButtonProps: { loading },
        submitButtonProps: { loading },
      },
      onKeyPress: ({ key }) => {
        if (key !== 'Enter' || loading) return;
        searchHandler(fm.getFieldsValue());
      },
      onFinish: searchHandler,
    },
    children,
  );
};
