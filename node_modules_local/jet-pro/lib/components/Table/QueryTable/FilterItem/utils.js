var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, '__esModule', { value: true }), mod);

// src/components/Table/QueryTable/FilterItem/utils.ts
var utils_exports = {};
__export(utils_exports, {
  convertToFilterFormData: () => convertToFilterFormData,
  convertToFilters: () => convertToFilters,
});
module.exports = __toCommonJS(utils_exports);
var import_enums = require('../../../../dataTypes/dynamicQuery/enums');
var import_dateUtils = require('../../../../utils/dateUtils');
var import_objectUtils = require('../../../../utils/objectUtils');
var invalidValue = (val) => [void 0, null, ''].some((v) => v === val);
var convertToFilters = (values) => {
  const filters = [];
  Object.entries(values).forEach(([path, item]) => {
    var _a, _b;
    if ((0, import_objectUtils.hasKey)(item, 'value')) {
      const valueItem = item;
      let { value } = valueItem;
      if (!invalidValue(value)) {
        const { type, valueType } = valueItem;
        if (['date', 'dateTime', 'time'].some((vt) => vt === valueItem.valueType)) {
          const valueMoment = (0, import_dateUtils.convertToMoment)(value);
          if (valueType === 'date') value = (0, import_dateUtils.formatDate)(valueMoment);
          else if (valueType === 'time') value = (0, import_dateUtils.formatTime)(valueMoment);
          else if (valueType === 'dateTime')
            value = (0, import_dateUtils.formatDateTime)(valueMoment);
        }
        filters.push({
          path,
          type,
          value,
          and: valueItem.and ?? true,
        });
      }
    } else if ((0, import_objectUtils.hasKey)(item, 'filters')) {
      const valueItem = item;
      const filter = {
        type: import_enums.FilterType.Composite,
        filters: [],
        and: valueItem.and ?? true,
      };
      const simpleFilterItem = {};
      (_a = valueItem.filters) == null
        ? void 0
        : _a.forEach((f) => {
            simpleFilterItem[path] = { ...f, valueType: valueItem.valueType };
            convertToFilters(simpleFilterItem).forEach((a) => filter.filters.push(a));
          });
      if ((_b = filter.filters) == null ? void 0 : _b.length) filters.push(...filter.filters);
    }
  });
  return filters;
};
var convertToFilterFormData = (formData, filters) => {
  const data = { ...formData };
  const simpleFilters =
    filters == null ? void 0 : filters.filter((f) => !(0, import_objectUtils.hasKey)(f, 'filters'));
  Object.keys(data).forEach((key) => {
    const formItem = formData[key];
    if (formItem.type === import_enums.FilterType.Composite) {
      const formItemComposite = formItem;
      const fs = simpleFilters == null ? void 0 : simpleFilters.filter((f) => f.path === key);
      if (fs == null ? void 0 : fs.length) {
        formItemComposite.filters = formItemComposite.filters.map((f) => {
          var _a;
          return {
            ...f,
            value:
              (_a = fs.find((f1) => f1.path === key && f1.type === f.type)) == null
                ? void 0
                : _a.value,
          };
        });
      }
    } else {
      const filter = simpleFilters == null ? void 0 : simpleFilters.find((f) => f.path === key);
      const formItemSimple = formData[key];
      if (filter) {
        formItemSimple.and = filter.and ?? true;
        formItemSimple.type = filter.type;
        formItemSimple.value = filter.value;
      }
    }
  });
  return data;
};
// Annotate the CommonJS export names for ESM import in node:
0 &&
  (module.exports = {
    convertToFilterFormData,
    convertToFilters,
  });
