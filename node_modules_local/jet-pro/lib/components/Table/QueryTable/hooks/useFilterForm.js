var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (
  (target = mod != null ? __create(__getProtoOf(mod)) : {}),
  __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule
      ? __defProp(target, 'default', { value: mod, enumerable: true })
      : target,
    mod,
  )
);
var __toCommonJS = (mod) => __copyProps(__defProp({}, '__esModule', { value: true }), mod);

// src/components/Table/QueryTable/hooks/useFilterForm.tsx
var useFilterForm_exports = {};
__export(useFilterForm_exports, {
  default: () => useFilterForm_default,
});
module.exports = __toCommonJS(useFilterForm_exports);
var import_pro_form = __toESM(require('@ant-design/pro-form'));
var import_antd = require('antd');
var import_Form = require('antd/es/form/Form');
var import_Form2 = __toESM(require('antd/lib/form/Form'));
var import_react = __toESM(require('react'));
var import_objectUtils = require('../../../../utils/objectUtils');
var import_utils = require('../../ProTable/utils');
var import_FilterDatePicker = __toESM(require('../FilterItem/FilterDatePicker'));
var import_FilterDateRangePicker = __toESM(require('../FilterItem/FilterDateRangePicker'));
var import_FilterForm = __toESM(require('../FilterItem/FilterForm'));
var import_FilterHidden = __toESM(require('../FilterItem/FilterHidden'));
var import_FilterNumber = __toESM(require('../FilterItem/FilterNumber'));
var import_FilterNumberRange = __toESM(require('../FilterItem/FilterNumberRange'));
var import_FilterSelect = __toESM(require('../FilterItem/FilterSelect'));
var import_FilterText = __toESM(require('../FilterItem/FilterText'));
var import_utils2 = require('../FilterItem/utils');
var useFilterForm_default = ({ columnsFlattened, filterProps, loading, onSearch }) => {
  if (filterProps == null ? void 0 : filterProps.disabled)
    return {
      FilterForm: /* @__PURE__ */ import_react.default.createElement(
        import_react.default.Fragment,
        null,
      ),
    };
  const [form] = (0, import_Form.useForm)();
  const columns = columnsFlattened
    .map(
      ({
        hideInFilter = filterProps == null ? void 0 : filterProps.defaultHideInFilter,
        ...col
      }) => ({
        hideInFilter,
        ...col,
      }),
    )
    .filter((col) => !col.hideInFilter);
  const filterColumns = columns
    .filter((col) => {
      var _a;
      return !((_a = col.filterProps) == null ? void 0 : _a.renderInHidden);
    })
    .sort((x, y) => {
      var _a, _b;
      return (
        (((_a = x.filterProps) == null ? void 0 : _a.order) ?? 0) -
        (((_b = y.filterProps) == null ? void 0 : _b.order) ?? 0)
      );
    });
  const hiddenFilters = columns.filter((col) => {
    var _a;
    return (_a = col.filterProps) == null ? void 0 : _a.renderInHidden;
  });
  const getFilterItemProps = (col) => {
    var _a, _b, _c, _d;
    const name =
      ((_a = col == null ? void 0 : col.filterProps) == null ? void 0 : _a.path) ||
      (0, import_utils.genFieldName)(col.dataIndex);
    const showFilterType = (_b = col.filterProps) == null ? void 0 : _b.showFilterType;
    return {
      name,
      showFilterType,
      type: (_c = col.filterProps) == null ? void 0 : _c.defaultType,
      defaultValue: (_d = col.filterProps) == null ? void 0 : _d.defaultValue,
    };
  };
  const getFilters = () => (0, import_utils2.convertToFilters)(form.getFieldsValue());
  const resetFilters = (filters) =>
    form.setFieldsValue({
      ...(0, import_utils2.convertToFilterFormData)(form.getFieldsValue(), filters),
    });
  const renderItems = () =>
    (filterProps == null ? void 0 : filterProps.render)
      ? filterProps.render().props.children
      : filterColumns.map((col) => {
          var _a, _b, _c, _d, _e, _f, _g;
          const { key = '' } = col;
          const filterItemProps = {
            ...getFilterItemProps(col),
            label: (0, import_utils.genColumnTitle)(col.title),
          };
          if ((_a = col.filterProps) == null ? void 0 : _a.render) {
            if ((col.filterProps.colSize ?? 1) > 1)
              return /* @__PURE__ */ import_react.default.createElement(
                import_pro_form.ProFormField,
                {
                  noStyle: true,
                  ...{ key },
                  colSize: col.filterProps.colSize,
                },
                col.filterProps.render({
                  ...filterItemProps,
                  label: (0, import_utils.genColumnTitle)(filterItemProps.label),
                  key,
                }),
              );
            return /* @__PURE__ */ import_react.default.createElement(
              import_pro_form.default.Item,
              { noStyle: true, key },
              (_c = (_b = col.filterProps) == null ? void 0 : _b.render) == null
                ? void 0
                : _c.call(_b, {
                    ...filterItemProps,
                    key,
                  }),
            );
          }
          switch (col.valueType) {
            case 'number':
              return /* @__PURE__ */ import_react.default.createElement(
                import_pro_form.default.Item,
                { noStyle: true, ...{ key } },
                ((_d = col.filterProps) == null ? void 0 : _d.isComposite)
                  ? /* @__PURE__ */ import_react.default.createElement(
                      import_FilterNumberRange.default,
                      { ...{ ...filterItemProps } },
                    )
                  : /* @__PURE__ */ import_react.default.createElement(
                      import_FilterNumber.default,
                      { ...{ ...filterItemProps } },
                    ),
              );
            case 'date':
              return /* @__PURE__ */ import_react.default.createElement(
                import_pro_form.default.Item,
                { noStyle: true, ...{ key } },
                ((_e = col.filterProps) == null ? void 0 : _e.isComposite)
                  ? /* @__PURE__ */ import_react.default.createElement(
                      import_FilterDateRangePicker.default,
                      {
                        ...{ ...filterItemProps, mode: 'date' },
                      },
                    )
                  : /* @__PURE__ */ import_react.default.createElement(
                      import_FilterDatePicker.default,
                      {
                        ...{ ...filterItemProps, mode: 'date' },
                      },
                    ),
              );
            case 'time':
              return /* @__PURE__ */ import_react.default.createElement(
                import_pro_form.default.Item,
                { noStyle: true, ...{ key } },
                ((_f = col.filterProps) == null ? void 0 : _f.isComposite)
                  ? /* @__PURE__ */ import_react.default.createElement(
                      import_FilterDateRangePicker.default,
                      {
                        ...{ ...filterItemProps, mode: 'time' },
                      },
                    )
                  : /* @__PURE__ */ import_react.default.createElement(
                      import_FilterDatePicker.default,
                      {
                        ...{ ...filterItemProps, mode: 'time' },
                      },
                    ),
              );
            case 'dateTime':
              return /* @__PURE__ */ import_react.default.createElement(
                import_pro_form.default.Item,
                { noStyle: true, ...{ key } },
                ((_g = col.filterProps) == null ? void 0 : _g.isComposite)
                  ? /* @__PURE__ */ import_react.default.createElement(
                      import_FilterDateRangePicker.default,
                      {
                        ...{ ...filterItemProps, mode: 'dateTime' },
                      },
                    )
                  : /* @__PURE__ */ import_react.default.createElement(
                      import_FilterDatePicker.default,
                      {
                        ...{ ...filterItemProps, mode: 'dateTime' },
                      },
                    ),
              );
            case 'enum':
              return /* @__PURE__ */ import_react.default.createElement(
                import_pro_form.default.Item,
                { noStyle: true, ...{ key } },
                /* @__PURE__ */ import_react.default.createElement(import_FilterSelect.default, {
                  ...{
                    ...filterItemProps,
                    options: (0, import_objectUtils.enumToListItem)(col.enumType),
                  },
                }),
              );
            case 'boolean':
              return /* @__PURE__ */ import_react.default.createElement(
                import_pro_form.default.Item,
                { noStyle: true, key },
                /* @__PURE__ */ import_react.default.createElement(import_FilterSelect.default, {
                  ...{
                    ...filterItemProps,
                    options: [
                      { text: '是', value: 'true' },
                      { text: '否', value: 'false' },
                    ],
                  },
                }),
              );
            default:
              return /* @__PURE__ */ import_react.default.createElement(
                import_pro_form.default.Item,
                { noStyle: true, ...{ key } },
                /* @__PURE__ */ import_react.default.createElement(import_FilterText.default, {
                  ...filterItemProps,
                }),
              );
          }
        });
  const render = () => {
    var _a, _b;
    return /* @__PURE__ */ import_react.default.createElement(
      import_antd.Card,
      {
        style: {
          ...((filterProps == null ? void 0 : filterProps.hide) ? { display: 'none' } : {}),
          marginBottom: 10,
        },
      },
      (hiddenFilters.length || (filterProps == null ? void 0 : filterProps.renderHidden)) &&
        /* @__PURE__ */ import_react.default.createElement(
          import_Form2.default,
          { ...{ form }, style: { display: 'none' } },
          hiddenFilters.map((col) =>
            /* @__PURE__ */ import_react.default.createElement(import_FilterHidden.default, {
              ...getFilterItemProps(col),
              key: col.key,
            }),
          ),
          (_a = filterProps == null ? void 0 : filterProps.renderHidden) == null
            ? void 0
            : _a.call(filterProps),
        ),
      /* @__PURE__ */ import_react.default.createElement(
        import_FilterForm.default,
        {
          ...{ form, loading },
          onSearch: (fs, isReset) => {
            var _a2, _b2;
            if (isReset)
              (_a2 = filterProps == null ? void 0 : filterProps.onReset) == null
                ? void 0
                : _a2.call(filterProps);
            else
              (_b2 = filterProps == null ? void 0 : filterProps.onSearch) == null
                ? void 0
                : _b2.call(filterProps);
            return onSearch(fs);
          },
        },
        renderItems(),
        (_b = filterProps == null ? void 0 : filterProps.extraRender) == null
          ? void 0
          : _b.call(filterProps),
      ),
    );
  };
  return {
    render,
    getFilters,
    setFilter: form.setFieldsValue,
    resetFilters,
  };
};
