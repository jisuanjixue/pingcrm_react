import type { ISorter } from '../../../../dataTypes/dynamicQuery';
import type { ISorterResult, TBaseView } from '../../ProTable/interface';
import type { IQueryColumnType } from '../interface';
interface IProps<TListView extends TBaseView> {
  columnsFlattened: IQueryColumnType<TListView>[];
}
declare const _default: <TListView extends TBaseView>({
  columnsFlattened,
}: IProps<TListView>) => {
  sorterResult: ISorterResult<TListView>[] | undefined;
  getSorters: (
    value?: ISorterResult<TListView> | ISorterResult<TListView>[] | undefined,
  ) => ISorter[];
  setSorters: (sorter: ISorterResult<TListView> | ISorterResult<TListView>[]) => void;
};
export default _default;
