var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, '__esModule', { value: true }), mod);

// src/components/Table/QueryTable/hooks/useSorterResult.tsx
var useSorterResult_exports = {};
__export(useSorterResult_exports, {
  default: () => useSorterResult_default,
});
module.exports = __toCommonJS(useSorterResult_exports);
var import_objectUtils = require('../../../../utils/objectUtils');
var import_utils = require('../../ProTable/utils');
var import_ahooks = require('ahooks');
var useSorterResult_default = ({ columnsFlattened }) => {
  const [result, setResult] = (0, import_ahooks.useSafeState)(
    columnsFlattened
      .filter((col) => {
        if (typeof col.sorterProps === 'object') {
          return (0, import_objectUtils.hasKey)(col.sorterProps, 'defaultValue');
        }
        return false;
      })
      .map((col) => ({
        columnKey: col.key,
        column: col,
        order: col.sorterProps.defaultValue,
      })),
  );
  const convertToSorter = (sorter) => {
    if (!sorter.order) return void 0;
    const { column } = sorter;
    if (!column) return void 0;
    let path = (0, import_utils.genFieldName)(column.dataIndex);
    const { sorterProps } = column;
    if (typeof sorterProps === 'object') path = sorterProps.name ?? path;
    return { path, ascending: sorter.order === 'ascend' };
  };
  const getSorters = (value) => {
    if (!value) return [];
    const values = value instanceof Array ? value : [value];
    return values
      .map((item) => convertToSorter(item))
      .filter((s) => !!s)
      .map((s) => s);
  };
  const setSorters = (sorter) => {
    if (sorter instanceof Array) {
      setResult(sorter);
    } else if (sorter == null ? void 0 : sorter.column) {
      setResult([sorter]);
    } else {
      setResult(void 0);
    }
  };
  return { sorterResult: result, getSorters, setSorters };
};
