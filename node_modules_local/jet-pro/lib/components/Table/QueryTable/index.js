var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (
  (target = mod != null ? __create(__getProtoOf(mod)) : {}),
  __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule
      ? __defProp(target, 'default', { value: mod, enumerable: true })
      : target,
    mod,
  )
);
var __toCommonJS = (mod) => __copyProps(__defProp({}, '__esModule', { value: true }), mod);

// src/components/Table/QueryTable/index.tsx
var QueryTable_exports = {};
__export(QueryTable_exports, {
  default: () => QueryTable_default,
});
module.exports = __toCommonJS(QueryTable_exports);
var import_antd = require('antd');
var import_react = __toESM(require('react'));
var import_ahooks = require('ahooks');
var import_ahooks2 = require('ahooks');
var import_ProTable = __toESM(require('../ProTable'));
var import_utils = require('../ProTable/utils');
var import_utils2 = require('./utils');
var import_useHistory = __toESM(require('./hooks/useHistory'));
var import_useFilterForm = __toESM(require('./hooks/useFilterForm'));
var import_useSorterResult = __toESM(require('./hooks/useSorterResult'));
var import_DeleteButton = __toESM(require('./DeleteButton'));
var QueryData = class {
  constructor() {
    this.loading = false;
    this.dataSource = [];
    this.pagination = {
      current: 1,
      pageSize: 20,
      total: 0,
      showQuickJumper: true,
      showSizeChanger: true,
      showTitle: true,
      showLessItems: true,
      showTotal: (total) => `共${total}条`,
    };
  }
};
var resetColumns = (columns) =>
  columns.map((column) => {
    if ((0, import_utils.isGroupColumn)(column)) {
      const colGroup = column;
      colGroup.children = resetColumns(colGroup.children || []);
      return colGroup;
    }
    const columnNormal = column;
    const { sorterProps } = columnNormal;
    return {
      hide: columnNormal.isKey,
      hideInFilter: columnNormal.isKey,
      ...column,
      ...(sorterProps ? { sorter: { multiple: 1 } } : {}),
    };
  });
var QueryTable = (props) => {
  var _b, _c, _d, _e, _f, _g;
  const {
    refAction: propsRefAction,
    actionColumn: propsActionColumns,
    pagination: propsPagination,
    queryRequest,
    queryEffectUrl = true,
    deleteRequest,
  } = props;
  const history = (0, import_useHistory.default)(props.history);
  const { location } = history;
  const [queryData, setQueryData] = (0, import_ahooks.useSafeState)(new QueryData());
  const propsColumns = resetColumns((0, import_utils.genColumnsKeyIfy)(props.columns));
  const columnsFlattened = (0, import_utils.flatColumns)(propsColumns);
  const fetchQuery = async ({ page = 1, pageSize = 20, filters = [], sorts = [] } = {}) => {
    setQueryData({ ...queryData, loading: true });
    try {
      const result = await queryRequest({ page, pageSize, filters, sorts });
      setQueryData({ ...queryData, loading: false });
      if (!result.success) {
        import_antd.message.error(result.errorMessage);
        return;
      }
      queryData.loading = false;
      queryData.dataSource = result.data;
      const pagination = {
        ...queryData.pagination,
        ...(typeof propsPagination === 'object' ? propsPagination : {}),
        current: page,
        pageSize,
        total: result.total,
      };
      setQueryData({ ...queryData, pagination });
      if (queryEffectUrl)
        history.replace({
          ...location,
          search: (0, import_utils2.getSearchFromQuery)(location, {
            page,
            pageSize,
            filters,
            sorts,
          }),
        });
    } catch (e) {
      setQueryData({ ...queryData, loading: false });
      import_antd.message.error('出错了');
    }
  };
  const { sorterResult, getSorters, setSorters } = (0, import_useSorterResult.default)({
    columnsFlattened,
  });
  const filterForm = (0, import_useFilterForm.default)({
    columnsFlattened,
    loading: queryData.loading,
    filterProps: props.filterProps,
    onSearch: (filters) => fetchQuery({ page: 1, filters, sorts: getSorters(sorterResult) }),
  });
  const fetchQueryWithDefault = ({
    page = queryData.pagination.current || 1,
    pageSize = queryData.pagination.pageSize || 20,
    filters = ((_a) => ((_a = filterForm.getFilters) == null ? void 0 : _a.call(filterForm)))(),
    sorts = getSorters(sorterResult),
  }) => fetchQuery({ page, pageSize, filters, sorts });
  const reload = () => {
    fetchQueryWithDefault({
      page: queryData.pagination.current,
      pageSize: queryData.pagination.pageSize,
    });
  };
  const genActionColumn = (0, import_react.useCallback)(() => {
    if (!propsActionColumns && !deleteRequest) return void 0;
    const actionColumn = propsActionColumns || {};
    if (actionColumn.render) return actionColumn;
    actionColumn.render = (item, index) => {
      var _a, _b2, _c2;
      const hideDelete =
        typeof actionColumn.hideDelete === 'function'
          ? (_a = actionColumn.hideDelete) == null
            ? void 0
            : _a.call(actionColumn, item, index)
          : actionColumn.hideDelete;
      return /* @__PURE__ */ import_react.default.createElement(
        import_antd.Space,
        null,
        (_b2 = actionColumn.preRender) == null ? void 0 : _b2.call(actionColumn, item, index),
        !hideDelete &&
          deleteRequest &&
          /* @__PURE__ */ import_react.default.createElement(import_DeleteButton.default, {
            ...{
              deleteRequest,
              id: item.id,
              onResult: (res) => res.success && reload(),
            },
          }),
        (_c2 = actionColumn.postRender) == null ? void 0 : _c2.call(actionColumn, item, index),
      );
    };
    return actionColumn;
  }, [deleteRequest, propsActionColumns]);
  (0, import_ahooks2.useMount)(() => {
    var _a, _b2;
    const defaultQueryParams = queryEffectUrl
      ? (0, import_utils2.getQueryFromLocation)(location)
      : {};
    if (typeof propsPagination === 'object') {
      if (propsPagination.defaultCurrent) defaultQueryParams.page = propsPagination.defaultCurrent;
      if (propsPagination.defaultPageSize)
        defaultQueryParams.pageSize = propsPagination.defaultPageSize;
    }
    if (!defaultQueryParams.filters)
      defaultQueryParams.filters =
        (_a = filterForm.getFilters) == null ? void 0 : _a.call(filterForm);
    if (!defaultQueryParams.sorts) defaultQueryParams.sorts = getSorters(sorterResult);
    fetchQueryWithDefault(defaultQueryParams);
    (_b2 = filterForm.resetFilters) == null
      ? void 0
      : _b2.call(filterForm, defaultQueryParams.filters);
    setSorters(
      (0, import_utils2.convertToSorterResult)(defaultQueryParams.sorts, columnsFlattened),
    );
  });
  const refAction = (0, import_react.useRef)();
  (0, import_ahooks2.useUpdateEffect)(() => {
    if (!propsRefAction) return;
    let action;
    if (refAction.current)
      action = {
        ...refAction.current,
        search: () => fetchQueryWithDefault({ page: 1 }),
        getFilters: filterForm.getFilters,
        setFilter: filterForm.setFilter,
        setFilterAndSearch: (data) => {
          var _a;
          (_a = filterForm.setFilter) == null ? void 0 : _a.call(filterForm, data);
          fetchQueryWithDefault({ page: 1 });
        },
      };
    if (typeof propsRefAction === 'function') propsRefAction(action);
    else propsRefAction.current = action;
  }, [propsRefAction, refAction.current]);
  return /* @__PURE__ */ import_react.default.createElement(
    import_react.default.Fragment,
    null,
    (_b = filterForm.render) == null ? void 0 : _b.call(filterForm),
    /* @__PURE__ */ import_react.default.createElement(import_ProTable.default, {
      ...{
        ...props,
        refAction,
        columns: propsColumns,
        actionColumn: genActionColumn(),
        sorterResult,
        ...queryData,
        ...(typeof propsPagination === 'boolean' ? { pagination: false } : {}),
        onChange: ({ current, pageSize }, _, sorter) => {
          setSorters(sorter);
          fetchQueryWithDefault({
            page: current,
            pageSize,
            sorts: getSorters(sorter),
          });
        },
        toolbarProps: {
          ...props.toolbarProps,
          hideActions: (_c = props.toolbarProps) == null ? void 0 : _c.hideActions,
          loading: queryData.loading,
          onLoad: reload,
          extra: /* @__PURE__ */ import_react.default.createElement(
            import_react.default.Fragment,
            null,
            (_d = props.toolbarProps) == null ? void 0 : _d.extra,
            ((_e = props.toolbarProps) == null ? void 0 : _e.extra) &&
              ((_g = (_f = props.toolbarProps) == null ? void 0 : _f.hideActions) == null
                ? void 0
                : _g.length) !== 3 &&
              /* @__PURE__ */ import_react.default.createElement(import_antd.Divider, {
                type: 'vertical',
              }),
          ),
        },
      },
    }),
  );
};
var QueryTable_default = QueryTable;
