import type { FormInstance, TablePaginationConfig } from 'antd';
import type { MutableRefObject, ReactNode } from 'react';
import type { IFilter, ISorter } from '../../../dataTypes/dynamicQuery';
import type { FilterType } from '../../../dataTypes/dynamicQuery/enums';
import type { IResponse, IResponseListDataWithTotal } from '../../../dataTypes/response';
import type {
  IProActionColumnType,
  IProColumnGroupType,
  IProColumnType,
  IProTableAction,
  IProTableProps,
  IProToolbarProps,
  TBaseView,
} from '../ProTable/interface';
import type { TFilterFormData } from './FilterItem/interface';

type excludeColumnProps = '';
// | 'filters'
// | 'filtered'
// | 'filteredValue'
// | 'filterMultiple'
// | 'filterDropdown'
// | 'filterDropdownVisible'
// | 'filterIcon'
// | 'defaultFilteredValue'
// | 'onFilter'
// | 'onFilterDropdownVisibleChange'
// | 'sorter'
// | 'sortOrder'
// | 'sortDirections'
// | 'showSorterTooltip'
// | 'defaultSortOrder';

export interface IQueryColumnFilterProps {
  /**
   * 【jet-pro】默认查询值
   */
  defaultValue?: any;
  /**
   * 【jet-pro】默认查询条件
   * @see FilterType
   */
  defaultType?: FilterType;
  /**
   * 【jet-pro】查询字段名，默认为视图类字段，由Column的dataIndex生成。
   * 如果和默认名不一致请指定，如：跨表查询，字段名应为entity.entityProperty，具体与后端确认
   */
  path?: string;
  /**
   * 【jet-pro】是否显示查询条件（仅对自带的查询组件有效，如string类型的查询可用条件为'Contains'|'Equal'|'NotEqual'|'StartWith'|'EndWith'）。
   *  条件选择器请参考@see FilterTypeSelect
   */
  showFilterType?: boolean;
  /**
   * 【jet-pro】是否是复杂查询 （仅对自带的查询组件有效，如date/dateTime类型，对同一个字段将生成两个查询条件（区间））
   */
  isComposite?: boolean;
  /**
   * 【jet-pro】col大小，默认1个col
   */
  colSize?: number;
  /**
   * 【jet-pro】查询项排列顺序，由小到大排列。默认为0
   */
  order?: number;

  /**
   * 【jet-pro】自定义查询组件，请参考查询表单项的值类型和示例
   * @see TFilterFormData
   */
  render?: (props: {
    name: string;
    label: ReactNode | string;
    key: string;
    defaultValue?: any;
    defaultType?: FilterType;
  }) => JSX.Element;

  /**
   * 【jet-pro】将查询项移至隐藏的查询表单中
   */
  renderInHidden?: boolean;
}

export interface IQueryColumnType<TListView extends TBaseView>
  extends Omit<IProColumnType<TListView>, excludeColumnProps> {
  /**
   * 【jet-pro】是否是主/外键。
   * 主/外键默认不在列表和查询中渲染，在编辑表单中则是隐藏。
   */
  isKey?: boolean;

  /**
   * 【jet-pro】是否在隐藏(禁用)查询项
   */
  hideInFilter?: boolean;

  /**
   * 【jet-pro】查询配置
   * @see IQueryColumnFilterProps
   */
  filterProps?: IQueryColumnFilterProps;
}

export interface IQueryActionColumnType<TListView extends TBaseView>
  extends IProActionColumnType<TListView> {
  /**
   * 【jet-pro】是否隐藏删除，默认根据deleteRequest自带删除按钮。
   *  使用函数可针对具体行隐藏
   */
  hideDelete?: (item: TListView, index: number) => boolean | boolean;

  /**
   * 【jet-pro】操作列前置render（相对删除按钮）
   */
  preRender?: (item: TListView, index: number) => ReactNode;

  /**
   * 【jet-pro】操作列后置render（相对删除按钮）
   */
  postRender?: (item: TListView, index: number) => ReactNode;
}

export interface IQueryColumnGroupType<TListView extends TBaseView>
  extends Omit<IProColumnGroupType<TListView>, excludeColumnProps> {
  children?: IQueryColumnType<TListView>[];
}

export type TQueryColumnType<TListView extends TBaseView> =
  | IQueryColumnType<TListView>
  | IQueryColumnGroupType<TListView>;

export type TQueryColumnsType<TListView extends TBaseView> = TQueryColumnType<TListView>[];

export interface IQueryTableFilterProps {
  /**
   * 【jet-pro】设置默认隐藏(禁用)每查询项
   * @default false
   */
  defaultHideInFilter?: boolean;

  /**
   * 【jet-pro】不显示查询表单(渲染)
   */
  hide?: boolean;

  /**
   * 【jet-pro】禁用查询(不渲染)
   */
  disabled?: boolean;
  /**
   * 【jet-pro】render整个查询表单，如有隐藏的查询项请放在@see renderHide
   */
  render?: () => JSX.Element;

  /**
   * 【jet-pro】追加查询项
   */
  extraRender?: () => ReactNode;
  /**
   * 【jet-pro】render隐藏的查询表单
   */
  renderHidden?: () => ReactNode;

  /**
   * 【jet-pro】查询
   */
  onSearch?: () => void;

  /**
   * 【jet-pro】重置
   */
  onReset?: () => void;
}

export interface IQueryTableProps<TListView extends TBaseView>
  extends Omit<IProTableProps<TListView>, 'dataSource' | 'loading'> {
  history?: History<any>;
  /**
   * 【jet-pro】列配置
   * @see TQueryColumnsType
   */
  columns: TQueryColumnsType<TListView>;

  /**
   * 【jet-pro】QueryTable操作列，如果指定了deleteRequest则带删除操作
   */
  actionColumn?: IQueryActionColumnType<TListView>;
  /**
   * 【jet-pro】toolbar配置
   * @see IProToolbarProps
   */
  toolbarProps?: IProToolbarProps;
  /**
   * 【jet-pro】是否影响url，所有查询的请求数据将填充到url中，默认影响
   * @default true
   */
  queryEffectUrl?: boolean;
  /**
   * 【jet-pro】pagination配置，不可接收current|pageSize|total，这些值由内部控制
   */
  pagination?: Omit<TablePaginationConfig, 'current' | 'pageSize' | 'total'> | false;
  /**
   * 【jet-pro】查询
   * @param {IQueryParams} 分页、查询、排序数据
   * @returns {Promise<IResponseListDataWithTotal<TListView>>}
   */
  queryRequest: (params: IQueryParams) => Promise<IResponseListDataWithTotal<TListView>>;

  /**
   * 【jet-pro】删除
   */
  deleteRequest?: (id?: string) => Promise<IResponse>;
  /**
   * 【jet-pro】整个filter配置
   * @see IQueryTableFilterProps
   */
  filterProps?: IQueryTableFilterProps;
  refAction?: MutableRefObject<TQueryTableAction> | ((action: TQueryTableAction) => void);
}

export interface IQueryData<TListView extends TBaseView> {
  loading?: boolean;
  dataSource?: TListView[];
  pagination: TablePaginationConfig;
}

export interface IQueryParams extends Record<string, any> {
  page?: number;
  pageSize?: number;
  filters?: IFilter[];
  sorts?: ISorter[];
}

export interface IFilterProps<TListView extends TBaseView> {
  form: FormInstance<TFilterFormData>;
  loading?: boolean;
  columnsFlattened: IQueryColumnType<TListView>[];
  /** 查询表单配置 */
  filterProps?: IQueryTableFilterProps;
  onSearch?: (filters: IFilter[]) => Promise<void>;
}

export interface IQueryTableAction extends IProTableAction {
  /**
   * 【jet-pro】获取查询项
   */
  getFilters?: () => IFilter[];
  /**
   * 【jet-pro】设置查询项
   * @param {TFilterFormData}  表单数据
   */
  setFilter?: (filter: TFilterFormData) => void;

  /**
   * 【jet-pro】合并setFilter和search
   */
  setFilterAndSearch?: (filter: TFilterFormData) => void;

  /** 【jet-pro】手动触发查询，该方法将重置page=1，适用于setFilter后执行该函数 */
  search?: () => void;
}

export type TQueryTableAction = IQueryTableAction | undefined;
