var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (
  (target = mod != null ? __create(__getProtoOf(mod)) : {}),
  __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule
      ? __defProp(target, 'default', { value: mod, enumerable: true })
      : target,
    mod,
  )
);
var __toCommonJS = (mod) => __copyProps(__defProp({}, '__esModule', { value: true }), mod);

// src/components/Table/QueryTable/utils.ts
var utils_exports = {};
__export(utils_exports, {
  convertToSorterResult: () => convertToSorterResult,
  getQueryFromLocation: () => getQueryFromLocation,
  getSearchFromQuery: () => getSearchFromQuery,
});
module.exports = __toCommonJS(utils_exports);
var import_qs = __toESM(require('qs'));
var import_numberUtils = require('../../../utils/numberUtils');
var import_utils = require('../ProTable/utils');
var queryParamsMap = {
  page: 'p',
  pageSize: 'ps',
  filters: 'fs',
  sorts: 'ss',
};
var parseQueryFromLocation = (location) => {
  let search = '';
  if (location == null ? void 0 : location.search.startsWith('?'))
    search = location.search.substr(1);
  return import_qs.default.parse(search);
};
var getQueryFromLocation = (location) => {
  const query = parseQueryFromLocation(location);
  const page = (0, import_numberUtils.tryParseInt)(
    query == null ? void 0 : query[queryParamsMap.page],
    1,
  );
  const pageSize = (0, import_numberUtils.tryParseInt)(
    query == null ? void 0 : query[queryParamsMap.pageSize],
    20,
  );
  let filters;
  let sorts;
  try {
    filters = JSON.parse(query == null ? void 0 : query[queryParamsMap.filters]);
  } catch (e) {}
  try {
    sorts = JSON.parse(query == null ? void 0 : query[queryParamsMap.sorts]);
  } catch (e) {}
  return { ...query, page, pageSize, filters, sorts };
};
var getSearchFromQuery = (location, queryParams) => {
  const query = getQueryFromLocation(location);
  query[queryParamsMap.page] = queryParams == null ? void 0 : queryParams.page;
  query[queryParamsMap.pageSize] = queryParams == null ? void 0 : queryParams.pageSize;
  try {
    query[queryParamsMap.filters] = JSON.stringify(
      queryParams == null ? void 0 : queryParams.filters,
    );
  } catch (e) {}
  try {
    query[queryParamsMap.sorts] = JSON.stringify(queryParams == null ? void 0 : queryParams.sorts);
  } catch (e) {}
  return import_qs.default.stringify(query);
};
var convertToSorterResult = (sorts, columnsFlattened) => {
  const culumnsSortable =
    columnsFlattened == null ? void 0 : columnsFlattened.filter((c) => c.sorterProps);
  const results = [];
  sorts == null
    ? void 0
    : sorts.forEach((s) => {
        const col =
          culumnsSortable == null
            ? void 0
            : culumnsSortable.find((c) => {
                let path = (0, import_utils.genFieldName)(c.dataIndex);
                if (typeof c.sorterProps === 'object') {
                  if (c.sorterProps.name) path = c.sorterProps.name;
                }
                return s.path === path;
              });
        if (col) {
          let order;
          if (s.ascending !== void 0) order = s.ascending ? 'ascend' : 'descend';
          results.push({
            columnKey: col.key,
            column: col,
            order,
          });
        }
      });
  return results;
};
// Annotate the CommonJS export names for ESM import in node:
0 &&
  (module.exports = {
    convertToSorterResult,
    getQueryFromLocation,
    getSearchFromQuery,
  });
