var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (
  (target = mod != null ? __create(__getProtoOf(mod)) : {}),
  __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule
      ? __defProp(target, 'default', { value: mod, enumerable: true })
      : target,
    mod,
  )
);
var __toCommonJS = (mod) => __copyProps(__defProp({}, '__esModule', { value: true }), mod);

// src/utils/dateUtils.ts
var dateUtils_exports = {};
__export(dateUtils_exports, {
  convertToMoment: () => convertToMoment,
  formatDate: () => formatDate,
  formatDateTime: () => formatDateTime,
  formatTime: () => formatTime,
});
module.exports = __toCommonJS(dateUtils_exports);
var import_dayjs = __toESM(require('dayjs'));
var formatDateTime = (value, format) => {
  if (!value) return '';
  let formatStr = format;
  if (!formatStr) formatStr = 'YYYY-MM-DD HH:mm';
  const date = (0, import_dayjs.isDayjs)(value) ? value : (0, import_dayjs.default)(value);
  return date.format(formatStr);
};
var formatTime = (value) => formatDateTime(value, 'HH:mm:ss');
var formatDate = (value) => formatDateTime(value, 'YYYY-MM-DD');
var convertToMoment = (value) => {
  if (!value) return void 0;
  if ((0, import_dayjs.isDayjs)(value)) return value;
  let valMoment;
  if (typeof value === 'string') {
    if (value.indexOf('-') === -1) {
      valMoment = (0, import_dayjs.default)(`${formatDate((0, import_dayjs.default)())} ${value}`);
    }
  }
  if (!valMoment) valMoment = (0, import_dayjs.default)(value);
  if (!valMoment.isValid()) return void 0;
  return valMoment;
};
// Annotate the CommonJS export names for ESM import in node:
0 &&
  (module.exports = {
    convertToMoment,
    formatDate,
    formatDateTime,
    formatTime,
  });
