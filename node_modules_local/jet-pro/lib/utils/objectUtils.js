var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, '__esModule', { value: true }), mod);

// src/utils/objectUtils.ts
var objectUtils_exports = {};
__export(objectUtils_exports, {
  convert2CascaderOptions: () => convert2CascaderOptions,
  convertSimpleTreeNodes2CascaderOptions: () => convertSimpleTreeNodes2CascaderOptions,
  enumToListItem: () => enumToListItem,
  getObjValue: () => getObjValue,
  hasKey: () => hasKey,
  isPromise: () => isPromise,
  splitToArray: () => splitToArray,
});
module.exports = __toCommonJS(objectUtils_exports);
var import_numberUtils = require('./numberUtils');
var import_stringUtils = require('./stringUtils');
var hasKey = (obj, key) => Object.keys(obj).some((k) => k === key);
var getObjValue = (obj, key) => {
  if (!obj || !key) return void 0;
  const keys = [];
  if (key instanceof Array) keys.push(...key);
  else if (typeof key === 'string') keys.push(...key.split('.'));
  const nextObj = obj == null ? void 0 : obj[keys[0]];
  const nextKeys = keys.splice(1);
  if (!nextKeys.length) return nextObj;
  return getObjValue(nextObj, nextKeys);
};
var convert2CascaderOptions = (labelField, valueField, childrenField, items) => {
  if (!items || !items.length) return [];
  return items.map((item) => {
    const children = getObjValue(item, childrenField);
    const obj = {
      value: getObjValue(item, valueField),
      label: getObjValue(item, labelField),
      data: item,
    };
    if (children == null ? void 0 : children.length)
      return {
        ...obj,
        children: convert2CascaderOptions(labelField, valueField, childrenField, children),
      };
    return obj;
  });
};
var convertSimpleTreeNodes2CascaderOptions = (nodes) =>
  convert2CascaderOptions('text', 'value', 'children', nodes);
var enumToListItem = (data) =>
  Object.entries(data)
    .filter(([, value]) => (0, import_numberUtils.isNumber)(value))
    .map(([text, value]) => ({ text, value }));
var splitToArray = (value, splitter = ',') => {
  if ((0, import_stringUtils.isNullOrEmpty)(value)) return [];
  return (value == null ? void 0 : value.split(splitter)) || [];
};
var isPromise = (obj) => {
  return (
    !!obj &&
    ((typeof obj === 'object' && typeof obj.then === 'function') || typeof obj === 'function')
  );
};
// Annotate the CommonJS export names for ESM import in node:
0 &&
  (module.exports = {
    convert2CascaderOptions,
    convertSimpleTreeNodes2CascaderOptions,
    enumToListItem,
    getObjValue,
    hasKey,
    isPromise,
    splitToArray,
  });
