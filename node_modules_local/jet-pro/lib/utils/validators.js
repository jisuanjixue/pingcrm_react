var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, '__esModule', { value: true }), mod);

// src/utils/validators.ts
var validators_exports = {};
__export(validators_exports, {
  genFormItemRules: () => genFormItemRules,
  idcardValidator: () => idcardValidator,
  requriedRule: () => requriedRule,
});
module.exports = __toCommonJS(validators_exports);
var idcardValidator = () => ({
  validator: (rule, value) => {
    if (!value) {
      return Promise.resolve();
    }
    const errorMessage = '身份证号不合法';
    if (value.length !== 18) {
      return Promise.reject(errorMessage);
    }
    const reg =
      /^(^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$)|(^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])((\d{4})|\d{3}[Xx])$)$/;
    if (!reg.test(value)) {
      return Promise.reject(errorMessage);
    }
    const idCardWi = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];
    const idCardY = [1, 0, 10, 9, 8, 7, 6, 5, 4, 3, 2];
    let idCardWiSum = 0;
    for (let i = 0; i < 17; i += 1) {
      idCardWiSum += value.substring(i, i + 1) * idCardWi[i];
    }
    const idCardMod = idCardWiSum % 11;
    const idCardLast = value.substring(17);
    if (idCardMod === 2) {
      if (idCardLast === 'X' || idCardLast === 'x') {
        return Promise.resolve();
      }
      return Promise.reject(errorMessage);
    }
    if (idCardLast === idCardY[idCardMod].toString()) {
      return Promise.resolve();
    }
    return Promise.reject(errorMessage);
  },
});
var requriedRule = (required, defaultMessage = '不能为空') => {
  let requriedMessage;
  if (required) {
    requriedMessage = defaultMessage;
    if (typeof required === 'string') requriedMessage = required;
  }
  return {
    required: !!requriedMessage,
    message: requriedMessage,
  };
};
var genFormItemRules = (required, defaultMessage = '不能为空', rules = []) => [
  requriedRule(required, defaultMessage),
  ...rules,
];
// Annotate the CommonJS export names for ESM import in node:
0 &&
  (module.exports = {
    genFormItemRules,
    idcardValidator,
    requriedRule,
  });
